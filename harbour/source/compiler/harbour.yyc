/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse hb_compparse
#define yylex   hb_complex
#define yyerror hb_comperror
#define yylval  hb_complval
#define yychar  hb_compchar
#define yydebug hb_compdebug
#define yynerrs hb_compnerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     FUNCTION = 258,
     PROCEDURE = 259,
     IDENTIFIER = 260,
     RETURN = 261,
     NIL = 262,
     NUM_DOUBLE = 263,
     INASSIGN = 264,
     NUM_LONG = 265,
     LOCAL = 266,
     STATIC = 267,
     IIF = 268,
     IF = 269,
     ELSE = 270,
     ELSEIF = 271,
     END = 272,
     ENDIF = 273,
     LITERAL = 274,
     TRUEVALUE = 275,
     FALSEVALUE = 276,
     ANNOUNCE = 277,
     EXTERN = 278,
     INIT = 279,
     EXIT = 280,
     AND = 281,
     OR = 282,
     NOT = 283,
     PUBLIC = 284,
     EQ = 285,
     NE1 = 286,
     NE2 = 287,
     INC = 288,
     DEC = 289,
     ALIASOP = 290,
     DOCASE = 291,
     CASE = 292,
     OTHERWISE = 293,
     ENDCASE = 294,
     ENDDO = 295,
     MEMVAR = 296,
     WHILE = 297,
     LOOP = 298,
     FOR = 299,
     NEXT = 300,
     TO = 301,
     STEP = 302,
     LE = 303,
     GE = 304,
     FIELD = 305,
     IN = 306,
     PARAMETERS = 307,
     PLUSEQ = 308,
     MINUSEQ = 309,
     MULTEQ = 310,
     DIVEQ = 311,
     POWER = 312,
     EXPEQ = 313,
     MODEQ = 314,
     PRIVATE = 315,
     BEGINSEQ = 316,
     BREAK = 317,
     RECOVER = 318,
     RECOVERUSING = 319,
     DO = 320,
     WITH = 321,
     SELF = 322,
     LINE = 323,
     MACROVAR = 324,
     MACROTEXT = 325,
     AS_ARRAY = 326,
     AS_BLOCK = 327,
     AS_CHARACTER = 328,
     AS_CLASS = 329,
     AS_DATE = 330,
     AS_LOGICAL = 331,
     AS_NUMERIC = 332,
     AS_OBJECT = 333,
     AS_VARIANT = 334,
     DECLARE = 335,
     OPTIONAL = 336,
     DECLARE_CLASS = 337,
     DECLARE_MEMBER = 338,
     AS_ARRAY_ARRAY = 339,
     AS_BLOCK_ARRAY = 340,
     AS_CHARACTER_ARRAY = 341,
     AS_CLASS_ARRAY = 342,
     AS_DATE_ARRAY = 343,
     AS_LOGICAL_ARRAY = 344,
     AS_NUMERIC_ARRAY = 345,
     AS_OBJECT_ARRAY = 346,
     PROCREQ = 347,
     CBSTART = 348,
     DOIDENT = 349,
     FOREACH = 350,
     DESCEND = 351,
     DOSWITCH = 352,
     WITHOBJECT = 353,
     NUM_DATE = 354,
     EPSILON = 355,
     POST = 356,
     UNARY = 357,
     PRE = 358
   };
#endif
/* Tokens.  */
#define FUNCTION 258
#define PROCEDURE 259
#define IDENTIFIER 260
#define RETURN 261
#define NIL 262
#define NUM_DOUBLE 263
#define INASSIGN 264
#define NUM_LONG 265
#define LOCAL 266
#define STATIC 267
#define IIF 268
#define IF 269
#define ELSE 270
#define ELSEIF 271
#define END 272
#define ENDIF 273
#define LITERAL 274
#define TRUEVALUE 275
#define FALSEVALUE 276
#define ANNOUNCE 277
#define EXTERN 278
#define INIT 279
#define EXIT 280
#define AND 281
#define OR 282
#define NOT 283
#define PUBLIC 284
#define EQ 285
#define NE1 286
#define NE2 287
#define INC 288
#define DEC 289
#define ALIASOP 290
#define DOCASE 291
#define CASE 292
#define OTHERWISE 293
#define ENDCASE 294
#define ENDDO 295
#define MEMVAR 296
#define WHILE 297
#define LOOP 298
#define FOR 299
#define NEXT 300
#define TO 301
#define STEP 302
#define LE 303
#define GE 304
#define FIELD 305
#define IN 306
#define PARAMETERS 307
#define PLUSEQ 308
#define MINUSEQ 309
#define MULTEQ 310
#define DIVEQ 311
#define POWER 312
#define EXPEQ 313
#define MODEQ 314
#define PRIVATE 315
#define BEGINSEQ 316
#define BREAK 317
#define RECOVER 318
#define RECOVERUSING 319
#define DO 320
#define WITH 321
#define SELF 322
#define LINE 323
#define MACROVAR 324
#define MACROTEXT 325
#define AS_ARRAY 326
#define AS_BLOCK 327
#define AS_CHARACTER 328
#define AS_CLASS 329
#define AS_DATE 330
#define AS_LOGICAL 331
#define AS_NUMERIC 332
#define AS_OBJECT 333
#define AS_VARIANT 334
#define DECLARE 335
#define OPTIONAL 336
#define DECLARE_CLASS 337
#define DECLARE_MEMBER 338
#define AS_ARRAY_ARRAY 339
#define AS_BLOCK_ARRAY 340
#define AS_CHARACTER_ARRAY 341
#define AS_CLASS_ARRAY 342
#define AS_DATE_ARRAY 343
#define AS_LOGICAL_ARRAY 344
#define AS_NUMERIC_ARRAY 345
#define AS_OBJECT_ARRAY 346
#define PROCREQ 347
#define CBSTART 348
#define DOIDENT 349
#define FOREACH 350
#define DESCEND 351
#define DOSWITCH 352
#define WITHOBJECT 353
#define NUM_DATE 354
#define EPSILON 355
#define POST 356
#define UNARY 357
#define PRE 358




/* Copy the first part of user declarations.  */
#line 5 "harbour.y"

/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * Compiler YACC rules and actions
 *
 * Copyright 1999 Antonio Linares <alinares@fivetech.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA (or visit
 * their web site at http://www.gnu.org/).
 *
 */

/* TODO list
 * 1) Change the pcode generated by ::cVar from Self:cVar to QSELF():cVar
 *    The major problem to solve is how to support QSELF() inside a codeblock.
 */

#include "hbcomp.h"

/* Compile using: bison -d -v harbour.y */

/* to pacify some warnings in BCC */
#if defined( __BORLANDC__ ) && !defined( __STDC__ )
#  define __STDC__
#endif

#undef alloca
#define alloca  hb_xgrab
#undef malloc
#define malloc  hb_xgrab
#undef realloc
#define realloc hb_xrealloc
#undef free
#define free    hb_xfree

/* NOTE: these symbols are used internally in bison.simple
 */
#undef YYFREE
#define YYFREE hb_xfree
#undef YYMALLOC
#define YYMALLOC hb_xgrab

static void hb_compLoopStart( HB_COMP_DECL );
static void hb_compLoopEnd( HB_COMP_DECL );
static void hb_compLoopLoop( HB_COMP_DECL );
static void hb_compLoopExit( HB_COMP_DECL );
static void hb_compLoopHere( HB_COMP_DECL );

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirstElseIf, ULONG ulOffset ); /* generates a support structure for elseifs pcode fixups */
static void hb_compElseIfFix( HB_COMP_DECL, void * pIfElseIfs ); /* implements the ElseIfs pcode fixups */

static void hb_compRTVariableAdd( HB_COMP_DECL, HB_EXPR_PTR, BOOL );
static void hb_compRTVariableGen( HB_COMP_DECL, char * );

static void hb_compVariableDim( char *, HB_EXPR_PTR, HB_COMP_DECL );

static void hb_compForStart( HB_COMP_DECL, char *szVarName, BOOL bForEach );
static void hb_compForEnd( HB_COMP_DECL, char *szVarName );
static void hb_compEnumStart( HB_COMP_DECL, HB_EXPR_PTR pVars, HB_EXPR_PTR pExprs, int descend );
static void hb_compEnumNext( HB_COMP_DECL, HB_EXPR_PTR pExpr, int descend );
static void hb_compEnumEnd( HB_COMP_DECL, HB_EXPR_PTR pExpr );

static void hb_compSwitchStart( HB_COMP_DECL );
static void hb_compSwitchAdd( HB_COMP_DECL, HB_EXPR_PTR );
static void hb_compSwitchEnd( HB_COMP_DECL );

static HB_EXPR_PTR hb_compCheckPassByRef( HB_COMP_DECL, HB_EXPR_PTR pExpr );

#ifdef HARBOUR_YYDEBUG
   #define YYDEBUG        1 /* Parser debug information support */
#endif

/* Controls if passing by reference '@' is allowed */
#define HB_PASSBYREF_OFF      0
#define HB_PASSBYREF_FUNCALL  1
#define HB_PASSBYREF_ARRAY    2

static void hb_compDebugStart( void ) { };



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 104 "harbour.y"
{
   char *  string;      /* to hold a string returned by lex */
   int     iNumber;     /* to hold a temporary integer number */
   HB_LONG lNumber;     /* to hold a temporary long number */
   BOOL    bTrue;
   HB_EXPR_PTR asExpr;
   void * pVoid;        /* to hold any memory structure we may need */
   struct
   {
      HB_LONG  lNumber;    /* to hold a long number returned by lex */
      UCHAR    bWidth;     /* to hold the width of the value */
   } valLong;
   struct
   {
      double   dNumber;    /* to hold a double number returned by lex */
      /* NOTE: Intentionally using "unsigned char" instead of "BYTE" */
      UCHAR    bWidth;     /* to hold the width of the value */
      UCHAR    bDec;       /* to hold the number of decimal points in the value */
   } valDouble;
   struct
   {
      char *   string;
      int      length;
      BOOL     dealloc;
   } valChar;
   struct
   {
      char *   string;
      int      length;
      int      flags;   /* Flag for early {|| &macro} (1) or late {|| &(macro)} (2) binding */
   } asCodeblock;
   struct
   {
      BOOL bMacro;
      union 
      {
         char * string;
         HB_EXPR_PTR macro;
      } value;
   } asMessage;
}
/* Line 193 of yacc.c.  */
#line 450 "harboury.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 146 "harbour.y"

/* This must be placed after the above union - the union is
 * typedef-ined to YYSTYPE
 */
extern int  yylex( YYSTYPE *, HB_COMP_DECL );    /* main lex token function, called by yyparse() */
extern void yyerror( HB_COMP_DECL, char * );     /* parsing error management function */


/* Line 216 of yacc.c.  */
#line 470 "harboury.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  3
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   8107

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  126
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  246
/* YYNRULES -- Number of rules.  */
#define YYNRULES  626
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1001

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   358

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     115,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,   105,   110,   113,     2,
     118,   119,   108,   106,   117,   107,     2,   109,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   122,   116,
     103,   102,   104,     2,   114,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   124,     2,   123,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   120,   125,   121,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   111,   112
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     4,     7,     8,    10,    12,    14,    16,
      18,    21,    24,    27,    30,    33,    36,    40,    45,    52,
      53,    59,    60,    66,    67,    76,    77,    86,    87,    89,
      91,    93,    94,    96,    98,   102,   103,   105,   107,   109,
     111,   113,   115,   117,   120,   122,   124,   126,   128,   130,
     132,   134,   136,   138,   140,   143,   146,   151,   152,   156,
     159,   162,   165,   168,   171,   174,   177,   180,   183,   186,
     189,   192,   195,   198,   201,   202,   207,   208,   212,   213,
     217,   220,   221,   226,   227,   228,   234,   235,   236,   242,
     244,   246,   248,   252,   253,   258,   263,   265,   269,   270,
     273,   275,   277,   279,   281,   283,   285,   290,   298,   303,
     311,   312,   314,   316,   318,   320,   323,   325,   329,   331,
     333,   335,   337,   339,   341,   343,   345,   347,   349,   351,
     353,   355,   357,   359,   361,   363,   365,   367,   369,   372,
     375,   377,   380,   382,   385,   388,   390,   392,   395,   397,
     400,   401,   406,   409,   412,   415,   417,   420,   422,   424,
     427,   430,   433,   436,   440,   443,   446,   449,   452,   455,
     458,   461,   464,   467,   470,   473,   476,   479,   481,   483,
     485,   488,   491,   494,   497,   500,   503,   506,   509,   512,
     515,   518,   521,   524,   527,   530,   533,   536,   539,   542,
     545,   548,   551,   554,   557,   560,   563,   566,   569,   572,
     575,   578,   581,   584,   587,   590,   593,   596,   599,   602,
     605,   608,   611,   614,   615,   621,   623,   624,   630,   631,
     637,   640,   643,   645,   649,   651,   653,   656,   659,   662,
     665,   668,   670,   672,   676,   680,   683,   685,   687,   689,
     694,   697,   698,   704,   707,   709,   711,   713,   715,   717,
     719,   721,   722,   726,   728,   730,   732,   734,   736,   738,
     740,   742,   743,   747,   749,   751,   752,   756,   758,   759,
     763,   765,   767,   769,   771,   773,   775,   777,   779,   781,
     783,   785,   786,   790,   791,   795,   797,   799,   801,   802,
     804,   806,   808,   810,   812,   814,   816,   818,   820,   822,
     824,   826,   828,   830,   832,   834,   836,   838,   840,   842,
     844,   846,   848,   850,   852,   854,   856,   858,   860,   862,
     865,   868,   871,   874,   877,   880,   884,   888,   892,   896,
     900,   904,   908,   912,   916,   920,   924,   928,   932,   936,
     940,   944,   948,   952,   956,   960,   964,   968,   972,   976,
     980,   984,   988,   990,   992,   994,   996,   998,  1000,  1004,
    1008,  1012,  1016,  1020,  1024,  1028,  1032,  1036,  1040,  1044,
    1048,  1052,  1056,  1060,  1064,  1068,  1071,  1074,  1078,  1083,
    1085,  1089,  1090,  1097,  1099,  1103,  1104,  1106,  1108,  1112,
    1115,  1120,  1123,  1126,  1129,  1132,  1134,  1136,  1138,  1140,
    1143,  1146,  1150,  1154,  1158,  1162,  1171,  1179,  1187,  1194,
    1197,  1198,  1203,  1204,  1209,  1210,  1215,  1217,  1221,  1223,
    1227,  1229,  1232,  1237,  1240,  1244,  1245,  1249,  1250,  1251,
    1258,  1261,  1265,  1268,  1271,  1275,  1280,  1281,  1286,  1289,
    1294,  1298,  1299,  1304,  1307,  1312,  1313,  1322,  1323,  1329,
    1333,  1337,  1338,  1346,  1348,  1352,  1354,  1357,  1359,  1362,
    1363,  1370,  1371,  1375,  1376,  1378,  1380,  1384,  1386,  1390,
    1392,  1395,  1399,  1405,  1410,  1416,  1424,  1428,  1433,  1440,
    1446,  1453,  1462,  1464,  1466,  1468,  1470,  1472,  1474,  1476,
    1479,  1483,  1487,  1492,  1494,  1497,  1498,  1500,  1501,  1502,
    1509,  1511,  1513,  1515,  1517,  1519,  1520,  1525,  1526,  1527,
    1534,  1535,  1536,  1544,  1546,  1548,  1552,  1556,  1559,  1564,
    1566,  1568,  1569,  1573,  1575,  1578,  1579,  1580,  1587,  1588,
    1589,  1597,  1598,  1599,  1605,  1606,  1612,  1613,  1614,  1622,
    1624,  1626,  1628,  1629,  1630,  1631,  1644,  1646,  1648,  1649,
    1652,  1655,  1659,  1662,  1666,  1668,  1670,  1672,  1676,  1679,
    1681,  1683,  1687,  1688,  1689,  1690,  1701,  1702,  1704,  1705,
    1710,  1713,  1715,  1716,  1721,  1723,  1726,  1727,  1733,  1734,
    1741,  1743,  1746,  1747,  1748,  1754,  1755,  1756,  1757,  1766,
    1767,  1771,  1775,  1777,  1780,  1782,  1784,  1785,  1790,  1791,
    1795,  1796,  1799,  1801,  1804,  1806,  1809,  1813,  1815,  1817,
    1819,  1821,  1823,  1824,  1831,  1836,  1838
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     127,     0,    -1,    -1,   128,   129,    -1,    -1,   371,    -1,
     277,    -1,   131,    -1,   142,    -1,   130,    -1,     1,   371,
      -1,   129,   371,    -1,   129,   277,    -1,   129,   131,    -1,
     129,   142,    -1,   129,   130,    -1,   129,     1,   371,    -1,
      68,    10,    19,   371,    -1,    68,    10,    19,   114,    19,
     371,    -1,    -1,   136,     3,   161,   132,   371,    -1,    -1,
     136,     4,   161,   133,   371,    -1,    -1,   136,     3,   161,
     134,   118,   137,   119,   371,    -1,    -1,   136,     4,   161,
     135,   118,   137,   119,   371,    -1,    -1,    12,    -1,    24,
      -1,    25,    -1,    -1,   100,    -1,   141,    -1,   141,   117,
     100,    -1,    -1,   139,    -1,    77,    -1,    73,    -1,    75,
      -1,    76,    -1,    72,    -1,    78,    -1,    74,   161,    -1,
      79,    -1,   140,    -1,    71,    -1,    90,    -1,    86,    -1,
      88,    -1,    89,    -1,    84,    -1,    85,    -1,    91,    -1,
      87,   161,    -1,   161,   138,    -1,   141,   117,   161,   138,
      -1,    -1,   292,   143,   154,    -1,   369,   154,    -1,   256,
     154,    -1,   194,   154,    -1,   189,   154,    -1,   207,   154,
      -1,   181,   154,    -1,   183,   154,    -1,   250,   154,    -1,
     224,   154,    -1,   223,   154,    -1,   234,   154,    -1,   227,
     154,    -1,   226,   154,    -1,   363,   154,    -1,    62,   154,
      -1,    -1,    62,   144,   215,   371,    -1,    -1,    25,   145,
     154,    -1,    -1,    43,   146,   154,    -1,     6,   154,    -1,
      -1,     6,   147,   215,   371,    -1,    -1,    -1,    29,   148,
     263,   149,   371,    -1,    -1,    -1,    60,   150,   263,   151,
     371,    -1,   258,    -1,   271,    -1,   274,    -1,    23,   160,
     371,    -1,    -1,    22,   161,   152,   371,    -1,    92,   153,
     119,   371,    -1,    19,    -1,    19,   106,    19,    -1,    -1,
     155,   371,    -1,   371,    -1,   142,    -1,   277,    -1,   130,
      -1,   157,    -1,     1,    -1,   158,     3,   161,   371,    -1,
     158,     3,   161,   118,   137,   119,   371,    -1,   158,     4,
     161,   371,    -1,   158,     4,   161,   118,   137,   119,   371,
      -1,    -1,    12,    -1,    24,    -1,    25,    -1,   156,    -1,
     159,   156,    -1,   161,    -1,   160,   117,   161,    -1,     5,
      -1,    47,    -1,    46,    -1,    43,    -1,    25,    -1,    51,
      -1,    81,    -1,    23,    -1,    22,    -1,    11,    -1,    41,
      -1,    12,    -1,    60,    -1,    29,    -1,    52,    -1,    92,
      -1,    96,    -1,     8,    -1,    10,    -1,    99,    -1,    10,
      35,    -1,     8,    35,    -1,     7,    -1,   165,    35,    -1,
      19,    -1,   167,    35,    -1,   241,    35,    -1,    20,    -1,
      21,    -1,   170,    35,    -1,    67,    -1,   172,    35,    -1,
      -1,   120,   175,   240,   121,    -1,   174,    35,    -1,   174,
     238,    -1,   177,    35,    -1,   161,    -1,   161,    35,    -1,
      69,    -1,    70,    -1,   181,    35,    -1,   113,   250,    -1,
     183,    35,    -1,    50,    35,    -1,    50,    35,   185,    -1,
     185,   180,    -1,   185,   164,    -1,   185,   251,    -1,   185,
     182,    -1,   185,   184,    -1,   185,   166,    -1,   185,   168,
      -1,   185,   171,    -1,   185,   169,    -1,   185,   173,    -1,
     185,   176,    -1,   185,   178,    -1,   185,   257,    -1,   161,
      -1,   181,    -1,   183,    -1,   164,   187,    -1,   182,   187,
      -1,   184,   187,    -1,   251,   187,    -1,   166,   187,    -1,
     168,   187,    -1,   171,   187,    -1,   169,   187,    -1,   173,
     187,    -1,   176,   187,    -1,   178,   187,    -1,   191,   187,
      -1,   257,   187,    -1,   198,   187,    -1,   206,   187,    -1,
     209,   187,    -1,   180,   187,    -1,   185,   187,    -1,   186,
     187,    -1,   164,   250,    -1,   180,   250,    -1,   182,   250,
      -1,   184,   250,    -1,   251,   250,    -1,   185,   250,    -1,
     162,   238,    -1,   165,   238,    -1,   163,   238,    -1,   167,
     238,    -1,   241,   238,    -1,   170,   238,    -1,   172,   238,
      -1,   179,   238,    -1,   188,   238,    -1,   189,   238,    -1,
     181,   238,    -1,   183,   238,    -1,   203,   238,    -1,   207,
     238,    -1,   194,   238,    -1,   256,   238,    -1,   250,   238,
      -1,   190,    35,    -1,    -1,   161,   118,   193,   199,   119,
      -1,   192,    -1,    -1,   181,   118,   195,   199,   119,    -1,
      -1,   183,   118,   196,   199,   119,    -1,   114,   192,    -1,
     194,    35,    -1,   202,    -1,   199,   117,   202,    -1,   219,
      -1,   201,    -1,   114,   161,    -1,   114,   181,    -1,   114,
     188,    -1,   114,   203,    -1,   114,   190,    -1,   100,    -1,
     200,    -1,   221,   122,   204,    -1,   205,   122,   204,    -1,
     122,   204,    -1,   161,    -1,   181,    -1,   183,    -1,   118,
     114,   161,   119,    -1,   203,    35,    -1,    -1,   203,   118,
     208,   199,   119,    -1,   207,    35,    -1,   162,    -1,   165,
      -1,   163,    -1,   167,    -1,   241,    -1,   170,    -1,   172,
      -1,    -1,   172,   211,   139,    -1,   174,    -1,   177,    -1,
     188,    -1,   189,    -1,   181,    -1,   183,    -1,   190,    -1,
     194,    -1,    -1,   194,   212,   139,    -1,   256,    -1,   203,
      -1,    -1,   203,   213,   139,    -1,   207,    -1,    -1,   207,
     214,   139,    -1,   226,    -1,   234,    -1,   223,    -1,   224,
      -1,   225,    -1,   235,    -1,   236,    -1,   237,    -1,   210,
      -1,   179,    -1,   250,    -1,    -1,   179,   216,   139,    -1,
      -1,   250,   217,   139,    -1,   197,    -1,   100,    -1,   215,
      -1,    -1,   215,    -1,   161,    -1,   188,    -1,   181,    -1,
     183,    -1,   203,    -1,   190,    -1,   250,    -1,   162,    -1,
     165,    -1,   163,    -1,   167,    -1,   241,    -1,   170,    -1,
     172,    -1,   174,    -1,   177,    -1,   188,    -1,   189,    -1,
     181,    -1,   183,    -1,   179,    -1,   190,    -1,   250,    -1,
     194,    -1,   256,    -1,   203,    -1,   207,    -1,    33,    -1,
      34,    -1,   221,   222,    -1,    33,   215,    -1,    34,   215,
      -1,    28,   215,    -1,   107,   215,    -1,   106,   215,    -1,
     162,     9,   215,    -1,   165,     9,   215,    -1,   163,     9,
     215,    -1,   167,     9,   215,    -1,   241,     9,   215,    -1,
     170,     9,   215,    -1,   172,     9,   215,    -1,   174,     9,
     215,    -1,   177,     9,   215,    -1,   188,     9,   215,    -1,
     189,     9,   215,    -1,   181,     9,   215,    -1,   183,     9,
     215,    -1,   179,     9,   215,    -1,   190,     9,   215,    -1,
     250,     9,   215,    -1,   256,     9,   215,    -1,   194,     9,
     215,    -1,   203,     9,   215,    -1,   207,     9,   215,    -1,
     221,   102,   215,    -1,   221,    53,   215,    -1,   221,    54,
     215,    -1,   221,    55,   215,    -1,   221,    56,   215,    -1,
     221,    59,   215,    -1,   221,    58,   215,    -1,   228,    -1,
     229,    -1,   230,    -1,   231,    -1,   232,    -1,   233,    -1,
     215,   106,   215,    -1,   215,   107,   215,    -1,   215,   108,
     215,    -1,   215,   109,   215,    -1,   215,   110,   215,    -1,
     215,    57,   215,    -1,   215,    26,   215,    -1,   215,    27,
     215,    -1,   215,    30,   215,    -1,   215,   103,   215,    -1,
     215,   104,   215,    -1,   215,    48,   215,    -1,   215,    49,
     215,    -1,   215,    31,   215,    -1,   215,    32,   215,    -1,
     215,   105,   215,    -1,   215,   102,   215,    -1,   239,   123,
      -1,   124,   218,    -1,   239,   117,   218,    -1,   239,   123,
     124,   218,    -1,   202,    -1,   240,   117,   202,    -1,    -1,
      93,   242,   244,   125,   243,   121,    -1,   215,    -1,   243,
     117,   215,    -1,    -1,   100,    -1,   245,    -1,   245,   117,
     100,    -1,   161,   138,    -1,   245,   117,   161,   138,    -1,
     252,   119,    -1,   253,   119,    -1,   254,   119,    -1,   255,
     119,    -1,   246,    -1,   247,    -1,   248,    -1,   249,    -1,
     250,    35,    -1,   118,   215,    -1,   252,   117,   215,    -1,
     253,   117,   215,    -1,   254,   117,   215,    -1,   255,   117,
     215,    -1,    13,   118,   215,   117,   200,   117,   200,   119,
      -1,    14,   252,   117,   215,   117,   200,   119,    -1,    14,
     252,   117,   201,   117,   200,   119,    -1,    14,   252,   117,
     117,   200,   119,    -1,   256,    35,    -1,    -1,    11,   259,
     262,   371,    -1,    -1,    12,   260,   262,   371,    -1,    -1,
      52,   261,   276,   371,    -1,   265,    -1,   262,   117,   265,
      -1,   264,    -1,   263,   117,   264,    -1,   265,    -1,   181,
     138,    -1,   181,   138,     9,   215,    -1,   181,   269,    -1,
     181,   269,   140,    -1,    -1,   161,   138,   266,    -1,    -1,
      -1,   161,   138,   267,     9,   268,   215,    -1,   161,   269,
      -1,   161,   269,   140,    -1,   270,   123,    -1,   124,   215,
      -1,   270,   117,   215,    -1,   270,   123,   124,   215,    -1,
      -1,    50,   272,   273,   371,    -1,   161,   138,    -1,   273,
     117,   161,   138,    -1,   273,    51,   161,    -1,    -1,    41,
     275,   276,   371,    -1,   161,   138,    -1,   276,   117,   161,
     138,    -1,    -1,    80,   161,   118,   278,   287,   119,   138,
     371,    -1,    -1,    80,   161,   279,   282,   371,    -1,    82,
     161,   371,    -1,    83,   283,   371,    -1,    -1,    83,   120,
     138,   280,   281,   121,   371,    -1,   285,    -1,   281,   117,
     285,    -1,   283,    -1,   282,   283,    -1,   285,    -1,   282,
     285,    -1,    -1,   161,   118,   284,   287,   119,   138,    -1,
      -1,   161,   286,   138,    -1,    -1,   290,    -1,   291,    -1,
     290,   117,   291,    -1,   289,    -1,   288,   117,   289,    -1,
     219,    -1,   161,   138,    -1,   114,   161,   138,    -1,   114,
     161,   118,   288,   119,    -1,   290,   117,   161,   138,    -1,
     290,   117,   114,   161,   138,    -1,   290,   117,   114,   161,
     118,   288,   119,    -1,    81,   161,   138,    -1,    81,   114,
     161,   138,    -1,    81,   114,   161,   118,   288,   119,    -1,
     291,   117,    81,   161,   138,    -1,   291,   117,    81,   114,
     161,   138,    -1,   291,   117,    81,   114,   161,   118,   288,
     119,    -1,   293,    -1,   308,    -1,   322,    -1,   327,    -1,
     355,    -1,   338,    -1,   343,    -1,   296,   307,    -1,   296,
     300,   307,    -1,   296,   302,   307,    -1,   296,   302,   300,
     307,    -1,   156,    -1,   294,   156,    -1,    -1,   294,    -1,
      -1,    -1,    14,   299,   297,   371,   298,   295,    -1,   210,
      -1,   179,    -1,   246,    -1,   247,    -1,   249,    -1,    -1,
      15,   371,   301,   295,    -1,    -1,    -1,    16,   303,   215,
     371,   304,   295,    -1,    -1,    -1,   302,    16,   305,   215,
     371,   306,   295,    -1,    18,    -1,    17,    -1,   312,   313,
     309,    -1,   312,   318,   309,    -1,   312,   309,    -1,   312,
     313,   318,   309,    -1,    39,    -1,    17,    -1,    -1,    36,
     311,   371,    -1,   310,    -1,   310,   159,    -1,    -1,    -1,
      37,   314,   215,   371,   315,   295,    -1,    -1,    -1,   313,
      37,   316,   215,   371,   317,   295,    -1,    -1,    -1,    38,
     319,   371,   320,   295,    -1,    -1,   318,    38,   321,   371,
     295,    -1,    -1,    -1,   325,   215,   371,   323,   295,   324,
     326,    -1,    42,    -1,    17,    -1,    40,    -1,    -1,    -1,
      -1,    44,   220,   331,   215,   328,    46,   215,   332,   329,
     371,   330,   333,    -1,   102,    -1,     9,    -1,    -1,    47,
     215,    -1,   295,    45,    -1,   295,    45,   161,    -1,   295,
      17,    -1,   295,    17,   161,    -1,   161,    -1,   188,    -1,
     334,    -1,   335,   117,   334,    -1,   114,   161,    -1,   215,
      -1,   336,    -1,   337,   117,   336,    -1,    -1,    -1,    -1,
      95,   335,    51,   337,   339,   342,   340,   371,   341,   333,
      -1,    -1,    96,    -1,    -1,   348,   344,   349,   345,    -1,
     348,   345,    -1,    17,    -1,    -1,    97,   347,   215,   371,
      -1,   346,    -1,   346,   159,    -1,    -1,    37,   215,   350,
     371,   295,    -1,    -1,   349,    37,   215,   351,   371,   295,
      -1,   352,    -1,   349,   352,    -1,    -1,    -1,    38,   353,
     371,   354,   295,    -1,    -1,    -1,    -1,    61,   356,   371,
     295,   357,   359,   358,    17,    -1,    -1,   360,   371,   295,
      -1,   361,   371,   295,    -1,    63,    -1,    64,   161,    -1,
     181,    -1,   183,    -1,    -1,    65,   362,   364,   366,    -1,
      -1,    94,   365,   366,    -1,    -1,    66,   367,    -1,   117,
      -1,   117,   368,    -1,   368,    -1,   367,   117,    -1,   367,
     117,   368,    -1,   161,    -1,   201,    -1,   197,    -1,   210,
      -1,   250,    -1,    -1,    98,   215,   371,   370,   294,    17,
      -1,    98,   215,   371,    17,    -1,   115,    -1,   116,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   264,   264,   264,   265,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   282,   284,   289,
     289,   290,   290,   291,   291,   292,   292,   295,   296,   297,
     298,   301,   302,   303,   304,   307,   308,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   333,   334,   342,   342,   343,
     344,   345,   346,   347,   348,   354,   360,   361,   362,   363,
     364,   365,   366,   367,   369,   369,   373,   373,   374,   374,
     375,   389,   389,   409,   411,   409,   415,   417,   415,   421,
     422,   423,   424,   425,   425,   439,   442,   450,   463,   463,
     466,   467,   468,   469,   470,   471,   484,   485,   486,   487,
     490,   491,   492,   493,   496,   497,   500,   501,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   525,   526,   529,   537,   538,
     543,   546,   551,   557,   562,   567,   568,   571,   576,   579,
     584,   584,   587,   592,   595,   600,   603,   608,   609,   612,
     617,   620,   627,   628,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   648,   649,   650,
     653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
     663,   664,   665,   666,   667,   668,   669,   670,   671,   680,
     681,   682,   683,   684,   685,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   709,   712,   712,   715,   716,   716,   717,   717,
     721,   724,   727,   728,   731,   732,   735,   736,   737,   738,
     739,   742,   743,   748,   749,   750,   756,   757,   758,   761,
     764,   769,   769,   772,   781,   782,   783,   784,   785,   786,
     787,   788,   788,   789,   790,   791,   792,   793,   794,   795,
     796,   797,   797,   798,   799,   800,   800,   801,   802,   802,
     803,   804,   805,   806,   807,   808,   809,   810,   813,   814,
     815,   816,   816,   817,   817,   818,   821,   822,   825,   826,
     829,   830,   831,   832,   833,   834,   835,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   867,   868,   871,
     874,   875,   878,   879,   880,   883,   884,   885,   886,   887,
     888,   889,   890,   891,   892,   893,   894,   895,   896,   897,
     898,   899,   900,   901,   902,   905,   908,   911,   914,   917,
     920,   923,   926,   927,   928,   929,   930,   931,   934,   935,
     936,   937,   938,   939,   942,   943,   946,   947,   948,   949,
     950,   951,   952,   953,   954,   957,   963,   964,   965,   968,
     969,   972,   972,   978,   979,   984,   985,   986,   987,   990,
     991,  1001,  1004,  1007,  1010,  1013,  1014,  1015,  1016,  1019,
    1028,  1031,  1034,  1037,  1038,  1041,  1043,  1045,  1047,  1051,
    1054,  1054,  1056,  1056,  1058,  1058,  1065,  1066,  1069,  1070,
    1078,  1079,  1081,  1085,  1092,  1101,  1101,  1115,  1118,  1115,
    1143,  1144,  1150,  1153,  1154,  1155,  1159,  1159,  1162,  1163,
    1164,  1167,  1167,  1170,  1171,  1174,  1174,  1197,  1197,  1198,
    1199,  1200,  1200,  1203,  1204,  1207,  1208,  1209,  1210,  1213,
    1213,  1235,  1235,  1291,  1292,  1293,  1294,  1297,  1298,  1301,
    1304,  1305,  1306,  1307,  1308,  1309,  1312,  1313,  1314,  1315,
    1316,  1317,  1320,  1321,  1322,  1323,  1324,  1325,  1326,  1329,
    1330,  1331,  1332,  1335,  1336,  1339,  1340,  1344,  1346,  1343,
    1351,  1352,  1353,  1354,  1355,  1358,  1358,  1362,  1364,  1362,
    1372,  1374,  1372,  1383,  1386,  1391,  1395,  1399,  1402,  1408,
    1413,  1420,  1420,  1423,  1424,  1432,  1433,  1432,  1444,  1445,
    1444,  1457,  1457,  1457,  1459,  1459,  1464,  1469,  1463,  1483,
    1486,  1487,  1491,  1502,  1507,  1490,  1573,  1574,  1577,  1578,
    1581,  1584,  1587,  1590,  1595,  1596,  1599,  1600,  1603,  1604,
    1607,  1608,  1613,  1619,  1628,  1612,  1648,  1649,  1653,  1652,
    1665,  1672,  1680,  1679,  1689,  1690,  1698,  1698,  1701,  1701,
    1704,  1706,  1709,  1709,  1709,  1714,  1721,  1729,  1713,  1750,
    1751,  1752,  1755,  1766,  1784,  1785,  1789,  1788,  1796,  1795,
    1806,  1807,  1810,  1811,  1812,  1813,  1814,  1817,  1818,  1819,
    1820,  1821,  1825,  1824,  1837,  1840,  1841
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "FUNCTION", "PROCEDURE", "IDENTIFIER",
  "RETURN", "NIL", "NUM_DOUBLE", "INASSIGN", "NUM_LONG", "LOCAL", "STATIC",
  "IIF", "IF", "ELSE", "ELSEIF", "END", "ENDIF", "LITERAL", "TRUEVALUE",
  "FALSEVALUE", "ANNOUNCE", "EXTERN", "INIT", "EXIT", "AND", "OR", "NOT",
  "PUBLIC", "EQ", "NE1", "NE2", "INC", "DEC", "ALIASOP", "DOCASE", "CASE",
  "OTHERWISE", "ENDCASE", "ENDDO", "MEMVAR", "WHILE", "LOOP", "FOR",
  "NEXT", "TO", "STEP", "LE", "GE", "FIELD", "IN", "PARAMETERS", "PLUSEQ",
  "MINUSEQ", "MULTEQ", "DIVEQ", "POWER", "EXPEQ", "MODEQ", "PRIVATE",
  "BEGINSEQ", "BREAK", "RECOVER", "RECOVERUSING", "DO", "WITH", "SELF",
  "LINE", "MACROVAR", "MACROTEXT", "AS_ARRAY", "AS_BLOCK", "AS_CHARACTER",
  "AS_CLASS", "AS_DATE", "AS_LOGICAL", "AS_NUMERIC", "AS_OBJECT",
  "AS_VARIANT", "DECLARE", "OPTIONAL", "DECLARE_CLASS", "DECLARE_MEMBER",
  "AS_ARRAY_ARRAY", "AS_BLOCK_ARRAY", "AS_CHARACTER_ARRAY",
  "AS_CLASS_ARRAY", "AS_DATE_ARRAY", "AS_LOGICAL_ARRAY",
  "AS_NUMERIC_ARRAY", "AS_OBJECT_ARRAY", "PROCREQ", "CBSTART", "DOIDENT",
  "FOREACH", "DESCEND", "DOSWITCH", "WITHOBJECT", "NUM_DATE", "EPSILON",
  "POST", "'='", "'<'", "'>'", "'$'", "'+'", "'-'", "'*'", "'/'", "'%'",
  "UNARY", "PRE", "'&'", "'@'", "'\\n'", "';'", "','", "'('", "')'", "'{'",
  "'}'", "':'", "']'", "'['", "'|'", "$accept", "Main", "@1", "Source",
  "Line", "Function", "@2", "@3", "@4", "@5", "FunScope", "Params",
  "AsType", "StrongType", "AsArray", "ParamList", "Statement", "@6", "@7",
  "@8", "@9", "@10", "@11", "@12", "@13", "@14", "@15", "CompTimeStr",
  "CrlfStmnt", "@16", "LineStat", "ControlError", "FunScopeId",
  "Statements", "ExtList", "IdentName", "NumValue", "DateValue",
  "NumAlias", "NilValue", "NilAlias", "LiteralValue", "LiteralAlias",
  "CodeBlockAlias", "Logical", "LogicalAlias", "SelfValue", "SelfAlias",
  "Array", "@17", "ArrayAlias", "ArrayAt", "ArrayAtAlias", "Variable",
  "VarAlias", "MacroVar", "MacroVarAlias", "MacroExpr", "MacroExprAlias",
  "FieldAlias", "FieldVarAlias", "AliasId", "AliasVar", "AliasExpr",
  "VariableAt", "VariableAtAlias", "FunIdentCall", "@18", "FunCall", "@19",
  "@20", "FunRef", "FunCallAlias", "ArgList", "Argument", "RefArgument",
  "ExtArgument", "ObjectData", "SendId", "ObjectRef", "ObjectDataAlias",
  "ObjectMethod", "@21", "ObjectMethodAlias", "SimpleExpression", "@22",
  "@23", "@24", "@25", "Expression", "@26", "@27", "ExtExpression",
  "EmptyExpression", "LValue", "LeftExpression", "PostOp", "ExprPostOp",
  "ExprPreOp", "ExprUnary", "ExprAssign", "ExprEqual", "ExprPlusEq",
  "ExprMinusEq", "ExprMultEq", "ExprDivEq", "ExprModEq", "ExprExpEq",
  "ExprOperEq", "ExprMath", "ExprBool", "ExprRelation", "ArrayIndex",
  "IndexList", "ElemList", "CodeBlock", "@28", "BlockExpList", "BlockVars",
  "BlockVarList", "PareExpList1", "PareExpList2", "PareExpList3",
  "PareExpListN", "PareExpList", "PareExpListAlias", "ExpList1",
  "ExpList2", "ExpList3", "ExpList", "IfInline", "IfInlineAlias",
  "VarDefs", "@29", "@30", "@31", "VarList", "ExtVarList", "ExtVarDef",
  "VarDef", "@32", "@33", "@34", "DimList", "DimIndex", "FieldsDef", "@35",
  "FieldList", "MemvarDef", "@36", "MemvarList", "Declaration", "@37",
  "@38", "@39", "DecDataList", "ClassInfo", "DecMethod", "@40", "DecData",
  "@41", "DecList", "DummyArgList", "DummyArgument", "FormalList",
  "OptList", "ExecFlow", "IfEndif", "EmptyStatements", "EmptyStats",
  "IfBegin", "@42", "@43", "IfExpression", "IfElse", "@44", "IfElseIf",
  "@45", "@46", "@47", "@48", "EndIf", "DoCase", "EndCase", "DoCaseStart",
  "@49", "DoCaseBegin", "Cases", "@50", "@51", "@52", "@53", "Otherwise",
  "@54", "@55", "@56", "DoWhile", "@57", "@58", "WhileBegin", "EndWhile",
  "ForNext", "@59", "@60", "@61", "ForAssign", "StepExpr", "ForStatements",
  "ForVar", "ForList", "ForExpr", "ForArgs", "ForEach", "@62", "@63",
  "@64", "Descend", "DoSwitch", "@65", "EndSwitch", "SwitchStart", "@66",
  "SwitchBegin", "SwitchCases", "@67", "@68", "SwitchDefault", "@69",
  "@70", "BeginSeq", "@71", "@72", "@73", "RecoverSeq", "RecoverEmpty",
  "RecoverUsing", "DoName", "DoProc", "@74", "@75", "DoArgs", "DoArgList",
  "DoArgument", "WithObject", "@76", "Crlf", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,    61,    60,    62,    36,    43,    45,    42,    47,
      37,   357,   358,    38,    64,    10,    59,    44,    40,    41,
     123,   125,    58,    93,    91,   124
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   126,   128,   127,   127,   129,   129,   129,   129,   129,
     129,   129,   129,   129,   129,   129,   129,   130,   130,   132,
     131,   133,   131,   134,   131,   135,   131,   136,   136,   136,
     136,   137,   137,   137,   137,   138,   138,   139,   139,   139,
     139,   139,   139,   139,   139,   139,   140,   140,   140,   140,
     140,   140,   140,   140,   140,   141,   141,   143,   142,   142,
     142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
     142,   142,   142,   142,   144,   142,   145,   142,   146,   142,
     142,   147,   142,   148,   149,   142,   150,   151,   142,   142,
     142,   142,   142,   152,   142,   142,   153,   153,   155,   154,
     156,   156,   156,   156,   156,   156,   157,   157,   157,   157,
     158,   158,   158,   158,   159,   159,   160,   160,   161,   161,
     161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
     161,   161,   161,   161,   161,   162,   162,   163,   164,   164,
     165,   166,   167,   168,   169,   170,   170,   171,   172,   173,
     175,   174,   176,   177,   178,   179,   180,   181,   181,   182,
     183,   184,   185,   185,   186,   186,   186,   186,   186,   186,
     186,   186,   186,   186,   186,   186,   186,   187,   187,   187,
     188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
     188,   188,   188,   188,   188,   188,   188,   188,   188,   189,
     189,   189,   189,   189,   189,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   191,   193,   192,   194,   195,   194,   196,   194,
     197,   198,   199,   199,   200,   200,   201,   201,   201,   201,
     201,   202,   202,   203,   203,   203,   204,   204,   204,   205,
     206,   208,   207,   209,   210,   210,   210,   210,   210,   210,
     210,   211,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   212,   210,   210,   210,   213,   210,   210,   214,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   215,   215,
     215,   216,   215,   217,   215,   215,   218,   218,   219,   219,
     220,   220,   220,   220,   220,   220,   220,   221,   221,   221,
     221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
     221,   221,   221,   221,   221,   221,   221,   222,   222,   223,
     224,   224,   225,   225,   225,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   226,   226,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   234,   234,   234,   234,   234,   235,   235,
     235,   235,   235,   235,   236,   236,   237,   237,   237,   237,
     237,   237,   237,   237,   237,   238,   239,   239,   239,   240,
     240,   242,   241,   243,   243,   244,   244,   244,   244,   245,
     245,   246,   247,   248,   249,   250,   250,   250,   250,   251,
     252,   253,   254,   255,   255,   256,   256,   256,   256,   257,
     259,   258,   260,   258,   261,   258,   262,   262,   263,   263,
     264,   264,   264,   264,   264,   266,   265,   267,   268,   265,
     265,   265,   269,   270,   270,   270,   272,   271,   273,   273,
     273,   275,   274,   276,   276,   278,   277,   279,   277,   277,
     277,   280,   277,   281,   281,   282,   282,   282,   282,   284,
     283,   286,   285,   287,   287,   287,   287,   288,   288,   289,
     290,   290,   290,   290,   290,   290,   291,   291,   291,   291,
     291,   291,   292,   292,   292,   292,   292,   292,   292,   293,
     293,   293,   293,   294,   294,   295,   295,   297,   298,   296,
     299,   299,   299,   299,   299,   301,   300,   303,   304,   302,
     305,   306,   302,   307,   307,   308,   308,   308,   308,   309,
     309,   311,   310,   312,   312,   314,   315,   313,   316,   317,
     313,   319,   320,   318,   321,   318,   323,   324,   322,   325,
     326,   326,   328,   329,   330,   327,   331,   331,   332,   332,
     333,   333,   333,   333,   334,   334,   335,   335,   336,   336,
     337,   337,   339,   340,   341,   338,   342,   342,   344,   343,
     343,   345,   347,   346,   348,   348,   350,   349,   351,   349,
     349,   349,   353,   354,   352,   356,   357,   358,   355,   359,
     359,   359,   360,   361,   362,   362,   364,   363,   365,   363,
     366,   366,   367,   367,   367,   367,   367,   368,   368,   368,
     368,   368,   370,   369,   369,   371,   371
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     0,     2,     0,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     2,     2,     3,     4,     6,     0,
       5,     0,     5,     0,     8,     0,     8,     0,     1,     1,
       1,     0,     1,     1,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     4,     0,     3,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     0,     4,     0,     3,     0,     3,
       2,     0,     4,     0,     0,     5,     0,     0,     5,     1,
       1,     1,     3,     0,     4,     4,     1,     3,     0,     2,
       1,     1,     1,     1,     1,     1,     4,     7,     4,     7,
       0,     1,     1,     1,     1,     2,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     2,     1,     2,     2,     1,     1,     2,     1,     2,
       0,     4,     2,     2,     2,     1,     2,     1,     1,     2,
       2,     2,     2,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     0,     5,     1,     0,     5,     0,     5,
       2,     2,     1,     3,     1,     1,     2,     2,     2,     2,
       2,     1,     1,     3,     3,     2,     1,     1,     1,     4,
       2,     0,     5,     2,     1,     1,     1,     1,     1,     1,
       1,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     3,     1,     1,     0,     3,     1,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     3,     0,     3,     1,     1,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     3,     4,     1,
       3,     0,     6,     1,     3,     0,     1,     1,     3,     2,
       4,     2,     2,     2,     2,     1,     1,     1,     1,     2,
       2,     3,     3,     3,     3,     8,     7,     7,     6,     2,
       0,     4,     0,     4,     0,     4,     1,     3,     1,     3,
       1,     2,     4,     2,     3,     0,     3,     0,     0,     6,
       2,     3,     2,     2,     3,     4,     0,     4,     2,     4,
       3,     0,     4,     2,     4,     0,     8,     0,     5,     3,
       3,     0,     7,     1,     3,     1,     2,     1,     2,     0,
       6,     0,     3,     0,     1,     1,     3,     1,     3,     1,
       2,     3,     5,     4,     5,     7,     3,     4,     6,     5,
       6,     8,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     3,     4,     1,     2,     0,     1,     0,     0,     6,
       1,     1,     1,     1,     1,     0,     4,     0,     0,     6,
       0,     0,     7,     1,     1,     3,     3,     2,     4,     1,
       1,     0,     3,     1,     2,     0,     0,     6,     0,     0,
       7,     0,     0,     5,     0,     5,     0,     0,     7,     1,
       1,     1,     0,     0,     0,    12,     1,     1,     0,     2,
       2,     3,     2,     3,     1,     1,     1,     3,     2,     1,
       1,     3,     0,     0,     0,    10,     0,     1,     0,     4,
       2,     1,     0,     4,     1,     2,     0,     5,     0,     6,
       1,     2,     0,     0,     5,     0,     0,     0,     8,     0,
       3,     3,     1,     2,     1,     1,     0,     4,     0,     3,
       0,     2,     1,     2,     1,     2,     3,     1,     1,     1,
       1,     1,     0,     6,     4,     1,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       2,     0,     0,     1,     0,   118,    81,   140,   135,   136,
     420,   422,     0,     0,   142,   145,   146,   126,   125,    29,
     122,    83,     0,     0,   531,   451,   549,   121,     0,   120,
     119,   446,   123,   424,    86,   595,    74,     0,   148,     0,
     157,   158,     0,   124,     0,     0,   133,   391,   608,     0,
     134,   582,     0,   137,     0,   625,   626,     0,   150,     0,
       0,     9,     7,     0,     8,   155,   307,   309,     0,   308,
       0,   310,     0,     0,   312,     0,   313,     0,   314,     0,
     315,     0,   320,     0,   318,     0,   319,     0,     0,     0,
     316,   317,   321,     0,   225,   323,     0,   325,     0,     0,
     326,     0,     0,    98,    98,    98,    98,   362,   363,   364,
     365,   366,   367,    98,   311,   405,   406,   407,   408,   322,
       0,     0,     0,     0,     0,   324,     0,    89,    90,    91,
       6,    57,   492,     0,   493,     0,     0,   494,     0,   495,
     497,   498,     0,   578,   496,    98,    98,     5,    10,     0,
      80,     0,   139,   138,     0,     0,     0,   127,   129,     0,
     126,   125,   122,     0,   131,   128,   121,     0,   132,   130,
     133,     0,     0,     0,   254,   256,   255,   257,   259,   260,
     263,   264,   289,   267,   268,   265,   266,   269,   270,   295,
     274,   277,   288,     0,     0,   282,   283,   284,   280,   281,
     285,   286,   287,   258,   405,   406,   408,   290,     0,   273,
     507,    93,     0,   116,    98,     0,   289,   288,   330,   331,
       0,     0,    98,   155,   307,   309,   308,   310,   312,   313,
     314,   315,   320,   302,   303,   301,   317,   305,   323,   304,
     326,     0,     0,   311,   306,   324,   162,     0,     0,     0,
       0,     0,    73,   604,   605,   606,     0,   457,     0,    35,
       0,     0,    96,     0,   395,   610,   155,   318,   319,   565,
     321,   325,   322,   566,     0,     0,     0,     0,   160,     0,
     410,   298,   246,   247,   248,   245,     0,    15,    13,    14,
      12,    11,     0,     0,   156,   223,     0,     0,   205,     0,
       0,   207,   177,   178,   179,   180,   199,     0,   141,   206,
     184,     0,   143,   208,   185,   187,     0,   147,   210,   186,
       0,   149,   211,   188,     0,   152,   153,   189,     0,   154,
     190,     0,   212,   196,   200,     0,   159,   226,    64,   215,
     181,   201,     0,   161,   228,    65,   216,   182,   202,     0,
       0,   177,   165,     0,   169,     0,   170,   172,     0,   171,
       0,   173,     0,   174,     0,   175,   164,   178,   167,   179,
     168,   197,     0,   204,   166,     0,   176,   198,     0,   213,
       0,    62,   214,     0,   222,   191,     0,   231,    61,   219,
     193,     0,   250,   251,   217,     0,   194,     0,   253,    63,
     218,   195,   327,   328,     0,     0,     0,     0,     0,     0,
       0,     0,   329,    68,    67,    71,    70,    69,     0,   144,
     209,     0,   409,    66,   221,   183,   203,     0,   401,     0,
     402,     0,   403,     0,   404,     0,   419,    60,   220,   192,
      98,     0,   517,   524,   523,     0,     0,   499,   105,   422,
     112,   122,   103,   101,   114,   104,     0,     0,   102,   100,
     530,   535,   541,   529,   527,     0,     0,     0,     0,   581,
       0,   580,    72,    59,     0,    99,    35,     0,   426,     0,
       0,     0,   332,   334,   333,     0,   230,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    77,    35,    84,   428,   430,
     532,    35,     0,    79,   557,   556,     0,   163,    35,     0,
       0,    87,     0,     0,   610,     0,   455,     0,   459,    46,
      41,    38,     0,    39,    40,    37,    42,    44,    51,    52,
      48,     0,    49,    50,    47,    53,   461,    36,    45,   469,
     460,     0,     0,   396,    35,     0,   397,     0,   609,     0,
       0,     0,   622,     0,   241,     0,   242,   235,   389,   299,
     234,     0,    16,    19,    21,   298,   335,   296,   297,   386,
       0,   385,   337,   336,   338,   340,   341,   342,   343,   348,
     346,   298,   347,   298,   344,   345,   349,   352,   353,   298,
     244,   354,   356,   357,   358,   359,   361,   360,   355,   243,
     339,   350,   411,   412,   413,   414,   351,    58,   515,     0,
     500,   520,     0,   501,     0,     0,   115,     0,     0,   538,
     525,     0,   544,   526,   546,     0,   592,     0,   590,    82,
       0,   435,   440,     0,     0,   421,   423,   298,     0,   262,
     292,   272,   276,   279,   374,   375,   376,   381,   382,   379,
     380,   373,   384,   377,   378,   383,   368,   369,   370,   371,
     372,   294,   298,     0,   411,   508,    94,   117,   431,   433,
       0,     0,   453,     0,   452,   552,   448,     0,     0,   447,
     425,     0,   503,     0,   596,    75,   607,     0,    17,   473,
     471,     0,   465,   467,    43,    54,     0,   473,    97,    95,
     399,     0,     0,   612,   155,   295,   618,   288,   290,   611,
     614,     0,   569,   570,   572,   567,   583,   624,     0,   249,
     236,   237,   238,   240,   230,   239,   298,   151,     0,     0,
       0,     0,     0,   232,   387,     0,     0,     0,     0,     0,
       0,     0,   502,     0,     0,     0,   542,     0,   528,     0,
       0,   586,     0,     0,   579,   591,   443,   436,     0,   441,
       0,   442,   427,     0,     0,     0,   298,   298,     0,     0,
     434,   429,    85,    35,     0,   450,    35,    88,   504,   599,
       0,   124,     0,    35,     0,   474,   475,    35,   466,   468,
     458,   471,     0,   463,     0,   393,     0,   398,    35,   613,
     615,   568,     0,   576,     0,   390,    20,    31,    22,    31,
     298,   224,   388,   227,   229,   252,   516,   518,     0,    31,
     106,    31,   108,   536,     0,     0,     0,   547,     0,   593,
     588,   438,   444,     0,   298,   418,     0,     0,   509,   432,
     454,     0,   449,   602,     0,   597,     0,     0,    18,     0,
      35,    35,   480,    35,     0,     0,   472,     0,     0,    35,
       0,   392,   400,   616,   571,   577,   573,   623,    32,     0,
      33,    35,     0,   233,     0,   521,     0,     0,     0,   543,
     539,   545,     0,     0,     0,     0,     0,   445,     0,   417,
     416,   558,   603,     0,     0,     0,    35,   486,   298,   481,
       0,     0,    35,   476,     0,   464,   462,   470,   394,     0,
       0,     0,    55,     0,   519,     0,     0,     0,   537,     0,
     550,   551,   548,   587,   594,     0,   439,   415,     0,   553,
     598,   600,   601,   298,   487,   479,     0,   477,   456,    35,
     483,     0,    35,   574,    24,    34,    35,    26,   522,   107,
     109,   540,   589,   559,     0,     0,   298,   482,   298,   484,
      35,   489,     0,    56,   554,   488,   478,     0,   298,   490,
       0,   575,     0,   485,     0,   562,   560,   555,   491,   563,
     561
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     1,     2,    60,   452,    62,   748,   750,   749,   751,
      63,   889,   556,   557,   558,   890,   453,   440,   251,   214,
     222,   149,   215,   691,   249,   701,   512,   263,   150,   151,
     702,   455,   456,   457,   212,    65,   174,   175,    68,   176,
      70,   177,    72,    73,   178,    75,   179,    77,   180,   281,
      79,   181,    81,   216,    83,   183,    85,   184,    87,    88,
      89,   305,   185,   186,   187,    93,    94,   585,   188,   601,
     603,   189,    96,   752,   576,   577,   753,   190,   285,    98,
      99,   191,   609,   101,   217,   487,   489,   490,   491,   579,
     488,   509,   589,   580,   241,   194,   412,   195,   196,   197,
     198,   106,   107,   108,   109,   110,   111,   112,   199,   200,
     201,   202,   339,   299,   581,   203,   264,   816,   565,   566,
     115,   116,   117,   118,   207,   120,   121,   122,   123,   124,
     209,   126,   127,   154,   155,   248,   477,   517,   518,   519,
     777,   778,   906,   652,   653,   128,   247,   529,   129,   221,
     522,   458,   709,   537,   716,   812,   711,   261,   717,   713,
     807,   804,   956,   957,   805,   806,   131,   132,   703,   990,
     133,   511,   788,   210,   445,   759,   446,   629,   894,   761,
     935,   447,   134,   464,   135,   220,   136,   465,   637,   898,
     767,   939,   466,   638,   844,   769,   137,   770,   902,   138,
     942,   139,   794,   974,   992,   526,   949,   991,   273,   274,
     733,   734,   140,   823,   929,   982,   886,   141,   470,   471,
     142,   275,   143,   647,   848,   905,   648,   772,   904,   144,
     250,   799,   913,   865,   866,   867,   255,   145,   534,   265,
     568,   729,   730,   146,   738,   459
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -728
static const yytype_int16 yypact[] =
{
      37,    51,  6354,  -728,   281,  -728,   352,  -728,    45,    65,
    1317,   482,   -26,  6938,  -728,  -728,  -728,  7956,  7956,  -728,
     103,  1821,  6938,  6938,  -728,  1939,  -728,   362,  3520,  -728,
    -728,    99,  -728,  2287,  2322,  -728,   352,   -31,  -728,   119,
    -728,  -728,  7956,  -728,  7956,  1648,   155,  -728,  -728,  3520,
    -728,  -728,  6938,  -728,    98,  -728,  -728,  7054,  -728,  7698,
    4434,  -728,  -728,   357,  -728,     7,    31,    34,  7561,     6,
    7698,    13,  7698,  7698,    54,  7698,    75,  7698,    79,  7698,
      18,  7698,    35,  7561,    86,  7561,   106,  7561,  3644,  7698,
      36,    41,    43,  7698,  -728,    20,  7698,   177,   134,  7698,
     161,  7698,  1111,  -728,  -728,  -728,  -728,  -728,  -728,  -728,
    -728,  -728,  -728,  -728,   110,  -728,  -728,  -728,  -728,   163,
    7561,   254,   346,   433,   468,   198,  7698,  -728,  -728,  -728,
    -728,  -728,  -728,   465,  -728,  4674,   272,  -728,  6938,  -728,
    -728,  -728,  5154,   242,  -728,  -728,  -728,  -728,  -728,  6938,
    -728,   281,  -728,  -728,  7956,  7956,  6938,  -728,  -728,    98,
    -728,  -728,  -728,  6938,  -728,  -728,  -728,    99,  -728,  -728,
    -728,  6938,  6938,  7956,   569,  1164,   671,   812,  1566,  4093,
    1744,   729,  3362,    93,   403,  1218,  1259,  1368,  4286,  -728,
    1423,  7356,   372,  7023,   521,  -728,  -728,  -728,  -728,  -728,
    -728,  -728,  -728,  2416,   380,   393,   397,  7415,   471,  2448,
    -728,  -728,   291,  -728,  -728,  7913,  7474,  -728,  -728,  -728,
     281,  7956,  -728,    14,   108,   108,    -4,    39,    68,   215,
     234,   233,   108,   208,   211,   267,   108,   -14,   235,   232,
     238,     9,   178,   248,   115,   255,   278,  7956,  7956,  7913,
     281,  6938,  -728,  -728,  -728,  -728,   330,   218,   281,  4225,
     247,   281,   274,   265,  7741,   354,   269,   200,   219,   267,
     391,   246,   264,  -728,   -19,  6938,  6675,  6938,  -728,  7956,
    7023,  3287,  -728,  -728,  -728,  -728,   281,  -728,  -728,  -728,
    -728,  -728,  7956,  7956,  -728,  -728,  6938,  6590,  -728,   -63,
    6938,  -728,  -728,  -728,  -728,  -728,  -728,  6938,  -728,  -728,
    -728,  6938,  -728,  -728,  -728,  -728,  6938,  -728,  -728,  -728,
    6938,  -728,  -728,  -728,  6938,  -728,  -728,  -728,  6938,  -728,
    -728,  6938,  -728,  -728,  -728,  6938,  -728,  -728,  -728,  -728,
    -728,  -728,  6938,  -728,  -728,  -728,  -728,  -728,  -728,    45,
      65,   419,  -728,   425,  -728,   436,  -728,  -728,   449,  -728,
     464,  -728,   234,  -728,   233,  -728,  -728,   491,  -728,   494,
    -728,  -728,   498,   511,  -728,   514,  -728,  -728,  6938,  -728,
    6938,  -728,  -728,  6938,  -728,  -728,  6938,  -728,  -728,  -728,
    -728,  6938,  -728,  -728,  -728,  7698,  -728,  6938,  -728,  -728,
    -728,  -728,  -728,  -728,  6938,  6938,  6938,  6938,  6938,  6938,
    6938,  7698,  -728,  -728,  -728,  -728,  -728,  -728,  6938,  -728,
    -728,  6938,  -728,  -728,  -728,  -728,  -728,  6938,  -728,  6938,
    -728,  6938,  -728,  6938,  -728,  6938,  -728,  -728,  -728,  -728,
    -728,   281,  -728,  -728,  -728,   554,   486,  -728,  -728,   489,
    -728,   237,  -728,  -728,  -728,  -728,   563,  4794,  -728,  -728,
    -728,  -728,  -728,  -728,  -728,   364,   375,  6675,  5274,  -728,
     644,  -728,  -728,  -728,  6675,  -728,  3033,   313,  -728,   313,
    3118,   443,  2808,  -728,  -728,   474,  -728,  4225,  4225,  4225,
    4225,  4225,  6938,  6938,  6938,  6938,  6938,  6938,  6938,  6938,
    6938,  6938,  6938,  6938,  6938,  6938,  6938,  6938,  6938,  4225,
    6706,   281,   281,  7956,  -728,  -728,  3033,   472,  -728,  -728,
    -728,  4225,   442,  -728,  -728,  -728,  6938,  -728,  4225,   317,
     442,   472,  5394,  6675,   354,   404,  -728,  7956,  -728,  -728,
    -728,  -728,  7956,  -728,  -728,  -728,  -728,  -728,  -728,  -728,
    -728,  7956,  -728,  -728,  -728,  -728,  -728,  -728,  -728,  -728,
    -728,   582,   281,  -728,  4225,   484,   488,  6822,  -728,  7170,
    3520,  6675,   601,   480,  -728,  3520,  -728,  -728,  -728,  7023,
    -728,   -16,  -728,   503,   523,  3287,  7023,  -728,  7023,  -728,
    6590,   506,  7023,  7023,  7023,  7023,  7023,  7023,  7023,  7023,
    7023,  3287,  7023,  3287,  7023,  7023,  7023,  7023,  7023,  3287,
    -728,  7023,  7023,  7023,  7023,  7023,  7023,  7023,  7023,  -728,
    7023,  7023,  7023,  7023,  7023,  7023,  7023,  -728,  -728,  6938,
    -728,  -728,   554,  -728,  7956,  7956,  -728,  6938,   281,  -728,
    -728,   375,  -728,  -728,  -728,  6938,  -728,   227,  -728,  -728,
    6938,   635,   770,   125,  7956,  -728,  -728,  7286,  6706,  -728,
    -728,  -728,  -728,  -728,  2097,  7023,  2808,  2808,  2808,  2808,
    2808,   605,  2808,  2808,  2808,  2808,   338,   338,   341,   341,
     341,  -728,  7286,   541,  3667,  -728,  -728,  -728,   658,   770,
    7913,   281,  -728,  7956,  -728,  7023,  -728,  7956,  7956,  -728,
    -728,   281,  -728,  4554,  -728,  -728,  -728,   651,  -728,  2587,
     247,  2783,  -728,  -728,  -728,  -728,  7956,  2587,  -728,  -728,
    -728,  6938,  7784,  7286,   259,   448,  -728,   466,   561,   557,
    -728,  7956,  7023,  -728,   562,  -728,  -728,  -728,  6474,  -728,
     245,   208,   267,   -14,   174,   232,  3287,  -728,   281,   566,
     281,   568,   493,  -728,  -728,  6590,   512,   536,   537,  5754,
    6675,  6938,  -728,   307,   416,  6675,  -728,  6938,  -728,   281,
    5874,  7023,   281,  6938,  -728,  -728,  7023,  -728,   680,  -728,
    6938,   573,  -728,   575,  3667,   579,  7286,  7286,  4914,  6938,
    -728,  -728,  -728,  4225,   653,  -728,  4225,  -728,  -728,   632,
     281,  2938,  7956,  4225,   583,   586,   592,  4225,  -728,  -728,
    -728,  -728,   136,  -728,   594,  7023,   195,  -728,  4225,  -728,
    7286,   474,  7170,   618,  6114,  -728,  -728,  7827,  -728,  7827,
    3287,  -728,  -728,  -728,  -728,  -728,  -728,  -728,  6675,  7827,
    -728,  7827,  -728,  -728,  5514,  6675,  5514,  -728,   281,  -728,
    7023,  -728,  7023,  6938,  7286,  -728,   597,   598,  -728,  7023,
    -728,  6938,  -728,  -728,  7956,  -728,   281,   281,  -728,  7956,
    4225,  3184,  -728,  4225,  7594,   637,  -728,  7956,   281,  4225,
    6938,  -728,  -728,  -728,  -728,  -728,  -728,  -728,  -728,   602,
     606,  4225,   603,  -728,  4914,  -728,   609,   612,  5034,  -728,
    -728,  -728,    50,  5634,  5634,   281,  6938,  7023,   613,  -728,
    -728,  3973,  -728,   716,  6234,  6234,  4315,  -728,  6938,  -728,
     281,  7956,  4225,   592,  7655,  -728,  -728,  -728,  7023,   281,
     281,  7870,  -728,   281,  -728,  4914,   281,   281,  -728,  5034,
    -728,  -728,  -728,  -728,  -728,  5634,  7023,  -728,  6938,  -728,
    -728,  -728,  -728,  6938,  -728,  -728,   540,  -728,  -728,  7954,
    -728,  7956,  4225,  -728,  -728,  -728,  4225,  -728,  -728,  -728,
    -728,  -728,  -728,  7023,   281,   546,  6938,  -728,  6938,  -728,
    7989,  -728,  5994,  -728,  -728,  -728,  -728,   549,  6938,  -728,
      16,  -728,  5994,  -728,   556,  7956,  7956,  -728,  -728,  -728,
    -728
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -728,  -728,  -728,  -728,    44,   674,  -728,  -728,  -728,  -728,
    -728,  -567,  -452,   -15,  -627,  -728,    57,  -728,  -728,  -728,
    -728,  -728,  -728,  -728,  -728,  -728,  -728,  -728,   202,  -728,
    -134,  -728,  -728,   595,  -728,  3111,  1181,  1278,   652,   203,
     654,   243,   655,   656,   355,   657,   451,   660,   659,  -728,
     661,   692,   662,   789,   663,    -2,   665,    94,   666,   500,
    -728,  7287,  1318,  1333,  1523,  -728,  -170,  -728,  1615,  -728,
    -728,  -562,  -728,  -284,  -648,  -474,  -277,  1757,  -339,  -728,
    -728,  1818,  -728,  -728,   -11,  -728,  -728,  -728,  -728,  3563,
    -728,  -728,  -570,  -536,  -728,  1947,  -728,  1955,  2108,  -728,
    2134,  -728,  -728,  -728,  -728,  -728,  -728,  -728,  2237,  -728,
    -728,  -728,  4019,  -728,  -728,  1017,  -728,  -728,  -728,  -728,
     726,   742,  -728,   743,   140,   670,    17,  -728,  -728,  -728,
    1166,   672,  -728,  -728,  -728,  -728,   604,   516,    71,  -148,
    -728,  -728,  -728,   250,  -728,  -728,  -728,  -728,  -728,  -728,
     519,    63,  -728,  -728,  -728,  -728,  -728,  -520,  -728,  -697,
    -728,    52,  -727,  -206,  -728,  -103,  -728,  -728,    38,  -504,
    -728,  -728,  -728,  -728,   326,  -728,  -728,  -728,  -728,  -728,
    -728,  -435,  -728,  -453,  -728,  -728,  -728,  -728,  -728,  -728,
    -728,  -728,   309,  -728,  -728,  -728,  -728,  -728,  -728,  -728,
    -728,  -728,  -728,  -728,  -728,  -728,  -728,  -215,   209,  -728,
     -41,  -728,  -728,  -728,  -728,  -728,  -728,  -728,  -728,   142,
    -728,  -728,  -728,  -728,  -728,  -728,   143,  -728,  -728,  -728,
    -728,  -728,  -728,  -728,  -728,  -728,  -728,  -728,  -728,  -728,
     258,  -728,  -707,  -728,  -728,  2991
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -622
static const yytype_int16 yytable[] =
{
      84,   454,   192,   486,   578,   725,   478,   478,   454,   783,
     630,   633,   640,   643,   809,   307,   819,   712,   524,   813,
     754,   384,   311,  -300,   651,   779,   233,   328,   704,   386,
     208,   308,   569,   995,   785,   253,   683,    -4,    40,    41,
     296,   308,   294,   300,   331,   378,    61,   267,   312,   294,
     380,     3,   383,   329,   590,   387,   610,   283,    84,    64,
     591,   996,   790,   316,   688,   130,   303,   940,   303,   692,
     303,   303,   619,   303,   312,   303,   696,   303,   384,   303,
     152,   303,    54,   303,   320,   303,   367,   303,   324,   317,
     941,   303,   156,   726,   303,   335,    86,   303,   570,   303,
     153,   746,   335,   317,   287,   747,   -30,   -30,  -321,   486,
     321,   525,   720,   883,   325,   342,  -300,   289,   303,   418,
     297,   336,   234,   290,   303,   295,  -318,  -318,   336,   256,
     297,   254,   295,    84,   246,   -98,   -98,   297,   856,   857,
      84,   343,   119,   268,   297,   419,  -318,  -318,  -318,  -318,
     422,  -318,  -318,   284,    86,   297,   -98,   -98,   297,   297,
     297,   725,   304,   297,   304,   297,   304,   304,   244,   304,
     397,   304,   421,   304,   262,   304,   481,   304,   297,   304,
     925,   304,   369,   304,   683,   832,   391,   304,   768,   272,
     304,   808,   297,   304,   278,   304,   398,   762,   422,   297,
     119,   -98,   -98,   297,   337,    69,   908,   435,   306,  -225,
     297,   337,   392,   516,   304,  -318,   277,   297,   -76,   -76,
     304,   -98,   -98,   334,   344,   341,   975,   348,   373,    86,
     297,   226,   297,   436,   297,   336,    86,  -322,   252,   297,
    -113,  -113,   780,   336,   469,    71,   343,   516,   781,   726,
     321,   987,   226,   877,   343,   836,   395,   878,   725,   469,
     426,   994,   892,    69,   773,   646,   847,   392,   329,   325,
     387,   227,   896,   398,   897,   119,   -98,   -98,   -98,   -98,
     294,   392,   119,   419,   858,   297,   338,   297,   345,   460,
     436,   353,   227,   381,   294,   393,  -225,   388,  -225,   422,
     411,   297,   399,    71,   294,   413,   414,   415,   416,   461,
     462,   463,   880,   -98,   -98,   417,   881,   756,   337,   757,
    -564,   423,   297,   636,   297,   758,   337,   437,   167,   344,
    -318,   355,   297,  -319,   636,   297,   536,   344,    69,   297,
     899,   860,   901,   297,   862,    69,   726,   472,   473,   535,
     393,   872,   -76,   -76,  -325,   876,   297,    74,   297,   297,
     292,   293,   297,   295,   393,   559,   882,  -155,   697,  -155,
     297,   427,   297,   428,  -617,  -617,  -617,   295,    71,   297,
     561,   460,   955,   228,   562,    71,  -564,   295,   297,  -316,
     934,   297,   460,   283,   938,   499,    55,    56,   499,   943,
     944,   639,   462,   463,   228,   744,    55,    56,   513,   283,
     951,   952,   342,   642,   463,    74,   515,   955,   917,   919,
     567,   920,    55,    56,   523,   839,   384,   927,    55,    56,
     654,   968,    55,    56,   698,   971,  -319,  -319,   343,   932,
     955,   972,   955,   358,   504,   505,   506,   507,   508,   506,
     507,   508,   955,    76,   294,    84,  -319,  -319,  -319,  -319,
     308,  -319,  -319,   429,   954,   430,    84,   -98,   -98,   825,
     960,   312,   659,   660,   661,   662,   663,   -78,   -78,   229,
     441,   442,   443,   444,   317,   -28,   -28,  -510,  -510,   284,
      74,  -129,  -111,  -111,   681,  -512,  -512,    74,  -129,   321,
     229,   441,   631,   443,   444,   284,   782,   979,  -513,  -513,
     981,    76,  -514,  -514,   983,  -129,  -129,  -129,   707,    55,
      56,   344,  -129,  -129,  -129,  -319,   336,   297,   989,   343,
      84,    55,    56,   419,   841,  -129,  -129,  -129,  -129,   360,
    -129,  -129,  -129,  -129,  -129,  -129,   422,  -129,  -129,   436,
     431,    86,   432,   893,   402,   403,   727,    55,    56,   693,
     658,   486,    86,  -619,  -619,  -619,   634,   635,   267,   798,
     421,   443,   444,   741,   404,   405,   406,   407,   296,   408,
     409,  -620,  -620,  -620,  -129,   433,    76,   434,   510,   690,
     428,  -129,   295,    76,  -322,  -322,   422,   119,   295,   739,
    -129,   718,  -307,  -307,  -129,   722,  -129,  -129,   119,   721,
     830,  -129,   831,  -129,  -322,  -322,  -322,  -322,   737,  -322,
    -322,   -23,  -307,  -307,  -307,  -307,    86,  -307,  -307,   830,
     755,   833,  -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,
    -293,   -25,   627,   411,  -437,  -293,  -293,  -293,  -293,  -293,
    -293,  -293,  -293,   830,   830,   834,   835,   976,   786,   977,
      69,    78,   499,   976,   268,   985,   976,   789,   993,   268,
     800,    69,   119,   976,   820,   998,  -621,  -621,  -621,   822,
     307,   645,   646,  -322,   827,   297,   829,   230,   516,   851,
     798,  -307,   854,   297,    80,   863,   864,   853,   855,   861,
      71,    84,   873,   874,  -308,  -308,   308,   728,   230,   875,
     272,    71,   727,   879,   885,   272,   909,   910,   924,    78,
     231,   930,   933,   931,  -308,  -308,  -308,  -308,   936,  -308,
    -308,   937,   947,   950,   288,    69,    84,   468,   328,   204,
     352,   231,   354,   356,   357,   359,   527,   362,   361,   363,
     365,   366,    80,   368,   370,   205,   206,    84,   374,   479,
     376,   791,  -315,  -315,   329,   531,   689,   530,    84,   814,
     986,   923,   632,   226,   641,    71,   824,   997,   226,   735,
     364,   884,  -315,  -315,  -315,  -315,    84,  -315,  -315,   774,
     775,    82,   706,  -308,    78,   297,     0,    86,     0,     0,
       0,    78,   182,     0,     0,     0,     0,     0,     0,   727,
       0,     0,    74,   227,     0,     0,     0,   232,   227,     0,
       0,   311,    84,    74,     0,     0,     0,    80,     0,     0,
       0,     0,    86,     0,    80,     0,     0,     0,   232,     0,
       0,   539,    84,   119,    84,  -310,  -310,   312,     0,    82,
       0,  -315,     0,    86,   548,   549,   550,   551,   552,   553,
     554,   555,     0,   728,    86,  -310,  -310,  -310,  -310,     0,
    -310,  -310,     0,     0,     0,     0,     0,     0,   119,     0,
       0,     0,    86,     0,     0,     0,     0,    74,     0,     0,
       0,     0,    84,     0,     0,     0,    84,     0,     0,   119,
       0,    84,    84,     0,     0,     0,    69,     0,    76,     0,
     119,     0,    84,    84,     0,     0,     0,     0,    86,    76,
       0,     0,     0,     0,    82,   228,     0,     0,   119,     0,
     228,    82,     0,    84,  -310,     0,   297,    84,    86,     0,
      86,    69,     0,    84,     0,     0,    71,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     728,     0,    69,     0,   119,     0,     0,     0,     0,     0,
       0,     0,     0,    69,     0,     0,     0,     0,     0,     0,
      84,    71,     0,    76,   119,     0,   119,     0,    86,     0,
      84,    69,    86,     0,     0,     0,     0,    86,    86,     0,
       0,     0,    71,     0,     0,     0,     0,     0,    86,    86,
       0,     0,     0,    71,     0,     0,     0,     0,     0,   114,
       0,   229,     0,     0,     0,     0,   229,    69,     0,    86,
       0,    71,     0,    86,   119,     0,     0,     0,   119,    86,
       0,     0,     0,   119,   119,   243,     0,    69,     0,    69,
       0,     0,     0,     0,   119,   119,     0,     0,    74,     0,
       0,     0,     0,     0,     0,     0,   243,    71,     0,     0,
       0,     0,     0,     0,     0,   119,    86,   114,     0,   119,
       0,     0,     0,     0,     0,   119,    86,    71,     0,    71,
       0,     0,     0,    74,     0,     0,     0,    69,     0,     0,
       0,    69,     0,     0,     0,   372,    69,    69,     0,     0,
       0,     0,     0,     0,    74,     0,    78,    69,    69,     0,
       0,     0,   119,     0,     0,    74,     0,    78,     0,     0,
       0,     0,   119,     0,     0,     0,     0,    71,    69,     0,
       0,    71,    69,    74,   402,   403,    71,    71,    69,    80,
       0,     0,   114,     0,    76,     0,     0,    71,    71,   114,
      80,     0,     0,     0,   404,   405,   406,   407,   125,   408,
     409,     0,     0,   300,     0,     0,     0,     0,    71,    74,
       0,     0,    71,    66,     0,    69,     0,     0,    71,    76,
       0,    78,     0,     0,   245,    69,     0,  -309,  -309,    74,
       0,    74,     0,     0,     0,     0,     0,     0,     0,   224,
      76,     0,     0,   410,     0,   245,     0,  -309,  -309,  -309,
    -309,    76,  -309,  -309,    80,    71,   125,   378,     0,   230,
     224,     0,     0,   411,   230,    71,     0,     0,     0,    76,
       0,    66,     0,     0,     0,     0,    82,     0,     0,    74,
       0,  -316,  -316,    74,   375,     0,     0,    82,    74,    74,
       0,     0,   231,     0,     0,     0,     0,   231,   380,    74,
      74,  -316,  -316,  -316,  -316,    76,  -316,  -316,     0,     0,
      67,     0,     0,     0,     0,     0,  -309,     0,   297,     0,
      74,     0,  -317,  -317,    74,    76,     0,    76,     0,     0,
      74,   125,     0,     0,     0,     0,   225,     0,   125,     0,
       0,     0,  -317,  -317,  -317,  -317,    66,  -317,  -317,     0,
      90,    82,     0,    66,     0,     0,  -127,   225,     0,     0,
       0,     0,     0,     0,     0,    91,     0,    74,    67,     0,
    -316,     0,   297,     0,     0,    76,   235,    74,     0,    76,
    -127,  -127,  -127,     0,    76,    76,     0,     0,     0,   232,
       0,   236,    78,     0,   232,    76,    76,   269,     0,     0,
    -127,  -127,  -127,  -127,     0,  -127,  -127,   383,    90,     0,
       0,  -317,   236,   297,     0,     0,    76,     0,     0,     0,
      76,     0,     0,    91,     0,    80,    76,    78,     0,     0,
       0,  -321,  -321,   384,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    67,     0,     0,     0,     0,    78,  -127,
      67,  -321,  -321,  -321,  -321,     0,  -321,  -321,     0,    78,
      80,     0,   391,    76,     0,  -127,     0,     0,     0,  -127,
       0,  -127,     0,    76,     0,     0,     0,    78,     0,     0,
       0,    80,     0,    90,     0,     0,  -325,  -325,   392,     0,
      90,     0,    80,     0,     0,     0,     0,     0,    91,     0,
       0,     0,     0,     0,   114,    91,  -325,  -325,  -325,  -325,
      80,  -325,  -325,    78,     0,   114,     0,     0,     0,     0,
    -321,     0,    82,     0,  -275,  -275,  -275,  -275,  -275,  -275,
    -275,  -275,  -275,    78,     0,    78,     0,  -275,  -275,  -275,
    -275,  -275,  -275,  -275,  -275,     0,    80,     0,     0,     0,
       0,     0,     0,     0,     0,    92,     0,    82,     0,     0,
       0,     0,     0,     0,     0,     0,    80,     0,    80,     0,
       0,   393,     0,     0,     0,  -325,     0,   297,    82,   114,
       0,   237,     0,    78,     0,     0,     0,    78,     0,    82,
       0,     0,    78,    78,     0,     0,     0,     0,     0,     0,
       0,     0,   270,    78,    78,   316,     0,    82,     0,     0,
       0,     0,     0,    92,     0,     0,    80,   243,     0,     0,
      80,     0,   243,     0,    78,    80,    80,     0,    78,  -312,
    -312,   317,     0,     0,    78,     0,    80,    80,     0,     0,
       0,     0,     0,    82,     0,     0,     0,    95,     0,  -312,
    -312,  -312,  -312,   125,  -312,  -312,     0,    80,     0,     0,
       0,    80,     0,    82,   125,    82,     0,    80,    66,     0,
       0,    78,     0,   238,     0,     0,     0,     0,     0,    66,
       0,    78,     0,     5,     0,     0,     0,     0,    92,   157,
     158,     0,     0,     0,   238,    92,     0,     0,     0,     0,
     160,   161,     0,   162,    80,    95,     0,   164,     0,     0,
       0,     0,     0,    82,    80,     0,     0,    82,  -312,   165,
     297,   166,    82,    82,    29,    30,     0,     0,   125,    32,
     168,     0,     0,    82,    82,     0,     0,     0,   169,     0,
       0,     0,     0,    66,     0,     0,     0,     0,     0,     0,
     114,     0,     0,     0,    82,     0,     0,     0,    82,    43,
       0,     0,     0,     0,    82,    67,   245,     0,     0,     0,
     170,   245,     0,     0,    50,     0,    67,     0,     0,     0,
      95,   224,     0,   324,     0,   114,   224,    95,     0,    97,
       0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
       0,    82,     0,     0,     0,    90,   114,  -314,  -314,   325,
       0,    82,     0,     0,     0,   239,    90,   114,     0,     0,
      91,     0,     0,     0,     0,     0,     0,  -314,  -314,  -314,
    -314,    91,  -314,  -314,     0,   114,   271,     0,     0,     0,
      67,     0,     0,     0,     0,     0,     0,    97,     0,     0,
     100,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -131,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   114,     0,     0,     0,     0,   240,     0,   225,     0,
      90,     0,     0,   225,  -131,  -131,  -131,     0,     0,     0,
       0,   114,     0,   114,     0,    91,  -314,   240,   297,   125,
       0,     0,     0,     0,  -131,  -131,  -131,  -131,   100,  -131,
    -131,     0,     0,     0,    66,     0,     0,     0,   269,     0,
       0,     0,    97,   742,     0,     0,     0,     0,     0,    97,
       0,     0,     0,   236,   125,     0,     0,     0,   236,     0,
       0,   114,     0,     0,     0,   114,     0,     0,     0,    66,
     114,   114,     0,  -131,     0,   125,     0,     0,     0,     0,
       0,   114,   114,     0,     0,     0,   125,     0,     0,  -131,
      66,     0,     0,  -131,     0,  -131,     0,     0,  -128,   102,
       0,    66,   114,   100,   125,     0,   114,   103,     0,     0,
     100,     0,   114,     0,     0,     0,     0,     0,     0,    66,
       0,     0,  -128,  -128,  -128,   242,     0,     0,     0,     0,
      92,    67,     0,     0,     0,     0,     0,     0,     0,     0,
     125,    92,  -128,  -128,  -128,  -128,   242,  -128,  -128,   114,
       0,     0,     0,     0,     0,    66,     0,   102,     0,   114,
     125,     0,   125,     0,     0,   103,    67,     0,     0,     0,
       0,    90,     0,     0,     0,    66,     0,    66,     0,     0,
       0,     0,     0,     0,     0,     0,    91,    67,     0,     0,
       0,  -128,     0,     0,     0,     0,     0,     0,    67,     0,
       0,     0,     0,     0,     0,    92,    90,  -128,     0,     0,
     125,  -128,     0,  -128,   125,     0,    67,     0,     0,   125,
     125,    91,    95,     0,     0,    66,     0,    90,     0,    66,
     125,   125,   102,    95,    66,    66,     0,     0,    90,   102,
     103,     0,    91,   270,     0,    66,    66,   103,   743,     0,
       0,   125,    67,    91,     0,   125,    90,     0,     0,     0,
     104,   125,     0,     0,     0,     0,    66,     0,     0,     0,
      66,    91,    67,   492,    67,     0,    66,   494,   495,   496,
       0,     0,     0,     0,     0,     0,   105,     0,     0,     0,
       0,     0,    90,     0,     0,   497,   498,    95,   125,     0,
       0,     0,     0,     0,   499,     0,     0,    91,   125,     0,
       0,     0,    90,    66,    90,     0,     0,     0,   104,     0,
       0,     0,    67,    66,     0,     0,    67,    91,     0,    91,
       0,    67,    67,     0,     0,   238,     0,     0,     0,     0,
     238,     0,    67,    67,   105,     0,     0,     0,     0,   500,
     501,   502,   503,   504,   505,   506,   507,   508,     0,     0,
       0,     0,    90,    67,    97,     0,    90,    67,     0,     0,
       0,    90,    90,    67,     0,    97,    92,    91,     0,     0,
       0,    91,    90,    90,     0,     0,    91,    91,     0,   113,
       0,     0,     0,   104,     0,     0,     0,    91,    91,     0,
     104,     0,     0,    90,     0,     0,     0,    90,     0,     0,
      67,    92,     0,    90,     0,     0,     0,     0,    91,   105,
      67,     0,    91,     0,     0,   100,   105,     0,    91,     0,
       0,     0,    92,     0,     0,     0,   100,     0,     0,    97,
       0,     0,     0,    92,     0,     0,  -132,   113,     0,     0,
      90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      90,    92,     0,     0,     0,    91,     0,     0,    95,     0,
    -132,  -132,  -132,     0,     0,    91,     0,   271,     0,     0,
       0,  -130,   745,     0,     0,     0,     0,     0,     0,     0,
    -132,  -132,  -132,  -132,     0,  -132,  -132,    92,     0,     0,
     100,     0,     0,    95,     0,  -130,  -130,  -130,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    92,     0,    92,
       0,     0,   113,     0,    95,  -130,  -130,  -130,  -130,   113,
    -130,  -130,     0,     0,     0,    95,     0,     0,   240,  -132,
       0,     0,     0,   240,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    95,   102,  -132,     0,     0,     0,  -132,
       0,  -132,   103,     0,     0,   102,     0,    92,     0,     0,
       0,    92,     0,   103,  -130,   418,    92,    92,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    92,    92,    95,
    -130,     0,     0,     0,  -130,     0,  -130,     0,     0,  -311,
    -311,   419,     0,     0,     0,     0,     0,   435,    92,    95,
      97,    95,    92,     0,     0,     0,     0,     0,    92,  -311,
    -311,  -311,  -311,     0,  -311,  -311,     0,     0,     0,   102,
       0,  -324,  -324,   436,     0,     0,     0,   103,     0,     0,
       0,     0,     0,     0,     0,    97,     0,     0,     0,     0,
       0,  -324,  -324,  -324,  -324,    92,  -324,  -324,     0,    95,
       0,     0,     0,    95,     0,    92,    97,   242,    95,    95,
       0,   100,   242,     0,     0,     0,     0,    97,     0,    95,
      95,     0,     0,     0,     0,     0,     0,     0,  -311,     0,
     297,     0,     0,     0,     0,    97,     0,     0,     0,     0,
      95,     0,     0,     0,    95,     0,   100,     0,     0,     0,
      95,     0,     0,     0,     0,   104,     0,     0,     0,     0,
    -324,     0,   297,     0,     0,     0,   104,   100,     0,     0,
       0,    97,     0,     0,     0,     0,     0,     0,   100,     0,
       0,   105,     5,     0,     0,     0,     0,    95,   157,   158,
       0,    97,   105,    97,     0,     0,   100,    95,     0,   160,
     161,     0,   162,     0,     0,     0,   164,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   165,     0,
     166,     0,     0,    29,    30,     0,     0,     0,    32,   168,
     104,     0,   100,     0,     0,     0,     0,   169,     0,     0,
     102,    97,     0,     0,     0,    97,     0,     0,   103,     0,
      97,    97,   100,     0,   100,     0,   105,     0,   801,     0,
       0,    97,    97,     0,     0,     0,     0,     0,     0,   170,
       0,     0,     0,    50,     0,   102,     0,     0,     0,     0,
       0,     0,    97,   103,   113,     0,    97,     0,     0,     0,
       0,   802,    97,     0,     0,   113,   102,     0,     0,     0,
       0,     0,   100,     0,   103,     0,   100,   102,     0,     0,
       0,   100,   100,     0,     0,   103,     0,     0,     0,     0,
       0,     0,   100,   100,     0,   102,     0,     0,     0,    97,
       0,     0,     0,   103,     0,     0,     0,     0,     0,    97,
       0,     0,     0,   100,     0,     0,     0,   100,     0,     0,
       0,     0,     0,   100,     0,     0,     0,     0,     0,   113,
       0,   102,     0,     0,     0,     0,     0,     0,     0,   103,
       0,     0,     0,     0,     0,     0,     0,     0,     5,     0,
       0,   102,     0,   102,   157,   158,     0,     0,     0,   103,
     100,   103,     0,     0,     0,   160,   161,     0,   162,     0,
     100,   104,   164,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   165,     0,   166,     0,     0,    29,
      30,     0,     0,     0,    32,   168,     0,   105,   494,   495,
     496,   102,     0,   169,     0,   102,   104,     0,     0,   103,
     102,   102,     0,   103,     0,     0,   497,   498,   103,   103,
       0,   102,   102,     0,    43,   499,     0,   104,     0,   103,
     103,     0,   105,     0,     0,   170,     0,     0,   104,    50,
       0,     0,   102,     0,     0,     0,   102,     0,     0,     0,
     103,     0,   102,   105,   103,     0,   104,     0,    55,    56,
     103,     0,     0,     0,   105,     0,     0,     0,     0,     0,
     500,   501,   502,   503,   504,   505,   506,   507,   508,     0,
       0,     0,   105,     0,     0,     0,     0,     0,     0,   102,
       0,     0,   104,     0,     0,     0,     0,   103,     0,   102,
     113,     0,     0,     5,     0,     0,     0,   103,     0,   157,
     158,     0,   104,     0,   104,     0,     0,     0,   105,     0,
     160,   161,     0,   162,     0,     0,     0,   164,     0,     0,
       0,     0,     0,     0,     0,   113,     0,     0,   105,   165,
     105,   166,     0,     0,    29,    30,     0,     0,     0,    32,
     168,     0,     0,   147,     0,   148,   113,     0,   169,     0,
       0,     0,   104,     0,     0,     0,   104,   113,     0,     0,
       0,   104,   104,     0,     0,     0,     0,     0,     0,    43,
       0,     0,   104,   104,     0,   113,     0,     0,   105,     0,
     170,     0,   105,     0,    50,     0,     0,   105,   105,     0,
       0,     0,     0,   104,     0,     0,     0,   104,   105,   105,
       0,   291,   869,   104,     0,     0,     0,     0,     0,     0,
       0,   113,     0,     0,     0,     0,     0,     0,     0,   105,
       0,     0,     0,   105,     0,     0,     0,     0,     0,   105,
       0,   113,     0,   113,     0,     0,     0,     0,     0,     0,
     104,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     104,     0,     0,     0,   539,   540,   541,   542,   543,   544,
     545,   546,   547,     0,     0,     0,   105,   548,   549,   550,
     551,   552,   553,   554,   555,     0,   105,     0,   211,   213,
       0,   113,     0,     0,     0,   113,     0,     0,     0,   223,
     113,   113,   475,     0,   492,   493,     0,     0,   494,   495,
     496,   113,   113,   257,     0,   258,   260,   650,     0,     0,
     266,     0,     0,     0,     0,     0,   497,   498,     0,     0,
     282,     0,   113,     0,     0,   499,   113,     0,     0,   302,
       0,   302,   113,   302,   302,     0,   302,     0,   302,     0,
     302,     0,   302,     0,   302,     0,   302,     0,   302,   351,
     302,     0,     0,   514,   302,     0,     0,   302,     0,     0,
     302,   520,   302,     0,     0,     0,     0,     0,     0,   113,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   113,
       0,   302,     0,     0,     0,   657,     0,   302,     0,     0,
       0,   532,     0,     0,     0,     0,     0,     0,     0,   538,
       0,     0,   560,     0,     0,   539,   540,   541,   542,   543,
     544,   545,   546,   547,     0,   476,   476,   572,   548,   549,
     550,   551,   552,   553,   554,   555,     0,   582,     0,     0,
       0,     0,     0,     0,   485,     0,     0,     0,     0,     0,
       0,     0,     5,     0,     7,     8,     0,     9,   157,   158,
      12,   159,   918,     0,     0,     0,    14,    15,    16,   160,
     161,     0,   162,     0,     0,   163,   164,     0,     0,     0,
      22,    23,     0,     0,     0,     0,   476,     0,   165,     0,
     166,     0,   521,    29,    30,     0,     0,   167,    32,   168,
       0,     0,     0,     0,     0,     0,     0,   169,     0,     0,
       0,     0,     0,     0,    38,     0,    40,    41,   528,   521,
     476,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       0,   331,     0,     0,     0,   564,     0,     0,     0,   170,
      47,     0,     0,    50,     0,     0,    53,   574,     0,     0,
     573,     0,     0,   171,   172,  -320,  -320,     0,     0,     0,
      54,   575,     0,   583,   584,    57,     0,    58,     0,    59,
       0,     0,     0,     0,     0,  -320,  -320,  -320,  -320,     0,
    -320,  -320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   628,  -291,  -291,  -291,  -291,  -291,  -291,  -291,
    -291,  -291,     0,     0,     0,     0,  -291,  -291,  -291,  -291,
    -291,  -291,  -291,  -291,     0,     0,     0,     0,   644,     0,
       0,     0,     0,     0,     0,   649,     0,     0,   655,     0,
     656,     0,     0,     0,     0,     0,     0,  -511,  -511,     0,
       0,     0,     0,     0,  -320,     0,   297,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   685,   686,     0,     0,   282,     0,     0,     0,
       0,     0,     0,   694,     0,     0,     0,     0,     0,     0,
     699,   700,   282,     0,   705,     5,   708,     7,     8,     0,
       9,   157,   158,    12,   159,     0,     0,     0,     0,    14,
      15,    16,   160,   161,     0,   162,     0,     0,     0,   164,
       0,     0,     0,   719,     0,     0,     0,     0,     0,     0,
       0,   165,   736,   166,     0,     0,    29,    30,     0,     0,
     167,    32,   168,     0,     0,     0,   193,     0,     0,     0,
     169,     0,     0,     0,     0,   218,   219,    38,     0,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   170,    47,     0,   276,    50,     0,     0,    53,
     280,     0,     0,     0,   687,     0,     0,     0,     0,   766,
       0,     0,     0,    54,     0,     0,     0,     0,    57,     0,
      58,     0,    59,     0,     0,     0,     0,     0,   710,     5,
       0,     7,   349,   714,   350,   157,   158,    12,   159,     0,
       0,     0,   715,    14,    15,    16,   160,   161,     0,   162,
       0,     0,     0,   164,     0,     0,     0,     0,   724,     0,
       0,   266,   792,     0,     0,   165,   740,   166,     0,     0,
      29,    30,   797,   492,   493,    32,   168,   494,   495,   496,
       0,   467,   810,     0,   169,     0,     0,     0,     0,     0,
       0,    38,   474,    40,    41,   497,   498,     0,     0,   480,
       0,     0,     0,     0,   499,    43,   482,     0,     0,     0,
       0,     0,     0,     0,   483,   484,   170,    47,     0,   826,
      50,   828,     0,     0,     0,   763,   764,     0,     0,     0,
       0,   837,     0,     0,   840,   842,   843,    54,     0,     0,
     846,     0,   277,   849,    58,   476,     0,     0,     0,   500,
     501,   502,   503,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,     0,   787,     0,     0,     0,     0,     0,
       0,   868,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   476,     0,     0,   793,     0,     0,     0,   795,   796,
       0,     0,     0,     0,   533,     0,     0,     0,     0,     0,
     803,     0,   710,     0,     0,     0,     0,   811,   803,   895,
       0,     0,     0,   818,   724,     0,   900,     0,   571,   903,
     280,     0,   821,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   914,   915,   586,
     588,     0,     0,   592,     0,     0,     0,     0,     0,   926,
     593,     0,     0,     0,   594,     0,     0,     0,     0,   595,
       0,     0,     0,   596,     0,     0,     0,   597,     0,     0,
       0,   598,     0,     0,   599,     0,   945,     0,   600,     0,
       0,     0,     0,     0,     0,   602,     0,     0,     0,     0,
       0,   958,   870,   871,     0,     0,     0,     0,     0,     0,
     963,   964,     0,     0,   967,     0,     0,   969,   970,     0,
       0,   724,     0,     0,     0,     0,     0,     0,   891,     0,
     891,   604,     0,   605,     0,     0,   606,     0,     0,   607,
     891,     0,   891,     0,   608,     0,     0,     0,     0,     0,
     611,     0,     0,     0,     0,   984,     0,   612,   613,   614,
     615,   616,   617,   618,     0,   912,     0,     0,     0,     0,
     916,   620,     0,     0,   621,   922,     0,     0,   811,     0,
     622,     0,   623,     0,   624,     0,   625,     0,   626,   492,
     493,     0,     0,   494,   495,   496,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     948,   497,   498,     0,     0,     0,     0,     0,     0,     0,
     499,     0,   959,     0,     0,   962,     0,     0,     0,     0,
       0,     0,   966,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   664,   665,   666,   667,   668,
     669,   670,   671,   672,   673,   674,   675,   676,   677,   678,
     679,   680,   980,   684,     0,   500,   501,   502,   503,   504,
     505,   506,   507,   508,     0,   298,   301,     0,   309,   695,
     313,     0,     0,   318,     0,   322,     0,   326,     0,     0,
       0,   332,   320,     0,     0,   346,   999,  1000,     0,   379,
     382,     0,     0,     0,   389,     0,   394,     0,     0,   400,
       0,     0,     0,     0,     0,     0,  -313,  -313,   321,     0,
     193,     0,   732,   420,     0,     0,     0,     0,   424,     0,
       0,     0,     0,     0,   438,     0,  -313,  -313,  -313,  -313,
       0,  -313,  -313,   588,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -261,  -261,  -261,  -261,  -261,  -261,
    -261,  -261,  -261,     0,     0,     0,     0,  -261,  -261,  -261,
    -261,  -261,  -261,  -261,  -261,     0,     0,     0,     0,     0,
       0,     0,   760,   298,   301,   309,   313,   318,   322,   326,
     765,   332,     0,   346,   379,   382,     0,   389,   771,   394,
     400,     0,     0,   776,     0,  -313,     0,   297,     0,     0,
       0,   784,   420,     0,     0,     0,   424,     0,   438,     0,
       0,     0,     0,     0,     0,   332,     0,     0,     0,     0,
       0,     0,     0,   298,   301,   309,   313,   318,   322,   326,
       0,   332,     0,   346,   379,   382,     0,   389,   394,   400,
       0,     0,   420,   424,   438,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   815,     0,   193,   346,   379,     0,
     394,   424,     0,     0,     0,   386,   539,   540,   541,   542,
     543,   544,   545,   546,   547,     0,     0,     0,     0,   548,
     549,   550,   551,   552,   553,   554,   555,     0,   588,  -323,
    -323,   387,     0,     0,   838,     0,     0,     0,     0,     0,
     845,     0,     0,     0,     0,     0,   850,     0,     0,  -323,
    -323,  -323,  -323,   852,  -323,  -323,     0,     0,     0,     0,
       0,     0,   859,     0,     0,     0,     0,  -271,  -271,  -271,
    -271,  -271,  -271,  -271,  -271,  -271,     0,     0,     0,     0,
    -271,  -271,  -271,  -271,  -271,  -271,  -271,  -271,     0,     0,
       0,   326,     0,   193,     0,   732,   539,   540,   541,   542,
     543,   544,   545,   546,   547,     0,     0,     0,     0,   548,
     549,   550,   551,   552,   553,   554,   555,     0,  -323,     0,
     297,     0,     0,     0,     0,     0,   907,     0,     0,     0,
       0,     0,     0,     0,   911,     0,     0,     0,     0,     0,
       0,     0,     0,   953,    -3,   286,     0,   -27,   -27,     5,
       6,     7,     8,   928,     9,    10,    11,    12,    13,     0,
       0,     0,     0,    14,    15,    16,    17,    18,    19,    20,
       0,     0,     0,    21,     0,     0,     0,    22,    23,   946,
      24,     0,     0,     0,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,   973,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,  -506,
    -506,  -506,  -506,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,  -506,  -506,  -506,  -506,    25,    26,    27,    28,  -506,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,  -506,  -506,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -533,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,  -533,  -533,  -533,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,   424,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,   379,     0,     0,   394,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -534,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,  -534,  -534,  -534,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,  -505,
    -505,  -505,  -505,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,     0,     0,     0,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -505,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,  -505,  -505,  -505,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -584,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,  -584,  -584,     0,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -585,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,  -585,  -585,     0,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -505,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,     0,     0,     0,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,  -505,  -505,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -505,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,     0,  -505,  -505,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -505,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,  -505,  -505,     0,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -505,  -505,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,     0,     0,     0,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -505,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,     0,     0,     0,  -505,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -505,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,     0,     0,     0,     0,    25,    26,    27,    28,  -505,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,   887,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,     0,     0,     0,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,  -505,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,     0,     0,     0,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,     4,    59,   -27,   -27,     5,
       6,     7,     8,     0,     9,    10,    11,    12,    13,     0,
       0,     0,     0,    14,    15,    16,    17,    18,    19,    20,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,     0,     0,     0,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   448,    59,  -110,  -110,     5,
       6,     7,     8,     0,     9,    10,   449,    12,    13,     0,
       0,     0,     0,    14,    15,    16,    17,    18,   450,   451,
       0,     0,     0,    21,     0,     0,     0,    22,    23,     0,
      24,     0,     0,     0,     0,    25,    26,    27,    28,     0,
      29,    30,     0,     0,    31,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,     0,     0,    37,
       0,    38,    39,    40,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,    43,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
      50,    51,    52,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,     5,    59,     7,     8,     0,
       9,   157,   158,    12,   159,     0,     0,     0,     0,    14,
      15,    16,   160,   161,     0,   162,     0,     0,   163,   164,
       0,     0,     0,    22,    23,     0,     0,     0,     0,     0,
       0,   165,     0,   166,     0,     0,    29,    30,     0,     0,
     167,    32,   168,     0,     0,     0,     0,     0,     0,     0,
     169,     0,     0,     0,     0,     0,     0,    38,     0,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   170,    47,     0,     0,    50,     0,     0,    53,
     587,     0,     0,     0,     0,     0,   171,   172,     0,     0,
       0,   492,   493,    54,   173,   494,   495,   496,    57,     0,
      58,     5,    59,     7,     8,     0,     9,   157,   158,    12,
     159,     0,     0,   497,   498,    14,    15,    16,   160,   161,
       0,   162,   499,     0,   163,   164,     0,     0,     0,    22,
      23,     0,     0,     0,     0,     0,     0,   165,     0,   166,
       0,     0,    29,    30,     0,     0,   167,    32,   168,     0,
       0,     0,     0,     0,     0,     0,   169,     0,     0,     0,
       0,     0,     0,    38,     0,    40,    41,   500,   501,   502,
     503,   504,   505,   506,   507,   508,     0,    43,     0,     0,
      55,    56,     0,     0,     0,     0,     0,     0,   170,    47,
       0,     0,    50,     0,     0,    53,     0,     0,     0,     0,
       0,     0,   171,   172,     0,     0,     0,     0,     0,    54,
     575,     0,     0,   682,    57,     0,    58,     5,    59,     7,
       8,     0,     9,   157,   158,    12,   159,     0,     0,     0,
       0,    14,    15,    16,   160,   161,     0,   162,     0,     0,
     163,   164,     0,     0,     0,    22,    23,     0,     0,     0,
       0,     0,     0,   165,     0,   166,     0,     0,    29,    30,
       0,     0,   167,    32,   168,     0,     0,     0,     0,     0,
       0,     0,   169,     0,     0,     0,     0,     0,     0,    38,
       0,    40,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   170,    47,     0,     0,    50,     0,
       0,    53,     0,     0,     0,     0,     0,     0,   171,   172,
       0,     0,     0,     0,     0,    54,   575,     0,     0,   723,
      57,     0,    58,     5,    59,     7,     8,     0,     9,   157,
     158,    12,   159,     0,     0,     0,     0,    14,    15,    16,
     160,   161,     0,   162,     0,     0,   163,   164,     0,     0,
       0,    22,    23,     0,     0,     0,     0,     0,     0,   165,
       0,   166,     0,     0,    29,    30,     0,     0,   167,    32,
     168,     0,     0,     0,     0,     0,     0,     0,   169,     0,
       0,     0,     0,     0,     0,    38,     0,    40,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     170,    47,     0,     0,    50,     0,     0,    53,     0,     0,
       0,     0,     0,     0,   171,   172,     0,     0,     0,   492,
     493,    54,   173,   494,   495,   496,    57,     0,    58,     5,
      59,     7,     8,     0,     9,   157,   158,    12,   159,     0,
       0,   497,   498,    14,    15,    16,   160,   161,     0,   162,
     499,     0,   163,   164,     0,     0,     0,    22,    23,     0,
       0,     0,     0,     0,     0,   165,     0,   166,     0,     0,
      29,    30,     0,     0,   167,    32,   168,     0,     0,     0,
       0,     0,     0,     0,   169,     0,     0,     0,     0,     0,
       0,    38,     0,    40,    41,   500,   501,   502,   503,   504,
     505,   506,   507,   508,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   170,    47,     0,     0,
      50,     0,     0,    53,     0,     0,     0,     0,     0,     0,
     171,   172,     0,     0,     0,     0,     0,    54,   279,     0,
       0,     0,    57,     0,    58,     5,    59,     7,     8,     0,
       9,   157,   158,    12,   159,     0,     0,     0,     0,    14,
      15,    16,   160,   161,     0,   162,     0,     0,   163,   164,
       0,     0,     0,    22,    23,     0,     0,     0,     0,     0,
       0,   165,     0,   166,     0,     0,    29,    30,     0,     0,
     167,    32,   168,     0,     0,     0,     0,     0,     0,     0,
     169,     0,     0,     0,     0,     0,     0,    38,     0,    40,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   170,    47,     0,     0,    50,     0,     0,    53,
       0,     0,     0,     0,     0,     0,   171,   172,     0,     0,
       0,     0,     0,    54,   731,     0,     0,     0,    57,     0,
      58,     5,    59,     7,     8,     0,     9,   157,   158,    12,
     159,     0,     0,     0,     0,    14,    15,    16,   160,   161,
       0,   162,     0,     0,   163,   164,     0,     0,     0,    22,
      23,     0,     0,     0,     0,     0,     0,   165,     0,   166,
       0,     0,    29,    30,     0,     0,   167,    32,   168,     0,
       0,     0,     0,     0,     0,     0,   169,     0,     0,     0,
       0,     0,     0,    38,     0,    40,    41,   310,     0,   314,
     315,     0,   319,     0,   323,   397,   327,    43,   330,     0,
     333,     0,   340,     0,   347,   371,   377,     0,   170,    47,
     385,     0,    50,   390,     0,    53,   396,     0,   401,  -326,
    -326,   398,   171,   172,     0,     0,     0,     0,     0,    54,
     575,     0,     0,     0,    57,     0,    58,   425,    59,  -326,
    -326,  -326,  -326,   439,  -326,  -326,     0,     0,     0,     0,
       0,     0,     0,     0,   421,     0,     0,  -278,  -278,  -278,
    -278,  -278,  -278,  -278,  -278,  -278,     0,     0,     0,     0,
    -278,  -278,  -278,  -278,  -278,  -278,  -278,  -278,  -322,  -322,
     422,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -322,  -322,
    -322,  -322,     0,  -322,  -322,     0,     0,     0,  -326,     0,
     297,     0,     0,   331,     0,     0,  -293,  -293,  -293,  -293,
    -293,  -293,  -293,  -293,  -293,     0,     0,     0,     0,  -293,
    -293,  -293,  -293,  -293,  -293,  -293,  -293,  -320,  -320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -320,  -320,  -320,
    -320,     0,  -320,  -320,     0,     0,     0,  -322,     0,   297,
       0,     0,     0,     0,     0,  -291,  -291,  -291,  -291,  -291,
    -291,  -291,  -291,  -291,     0,     0,     0,     0,  -291,  -291,
    -291,  -291,  -291,  -291,  -291,  -291,     5,     0,     0,     0,
       0,     0,   157,   158,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   160,   161,     0,   162,     0,     0,     0,
     164,     0,     0,     0,     0,     0,  -320,     0,   297,     5,
       0,     0,   165,     0,   166,   157,   158,    29,    30,     0,
       0,     0,    32,   168,     0,     0,   160,   161,     0,   162,
       0,   169,     0,   164,     0,     0,     0,     0,     0,     0,
      40,    41,     0,     0,     0,   165,     0,   166,     0,     0,
      29,    30,    43,     0,     0,    32,   168,     0,     0,     0,
       0,     0,     0,   170,   169,     0,     0,    50,     0,     0,
       5,     0,     0,     0,     0,     0,   157,   158,     0,     0,
       0,     0,     0,     0,    54,   801,     0,   160,   161,   277,
     162,     0,     0,     0,   164,     0,   170,     0,     0,     0,
      50,     0,     0,     0,     0,     0,   165,     0,   166,     0,
       0,    29,    30,     5,     0,     0,    32,   168,   921,   157,
     158,     0,     0,     0,     0,   169,     0,     0,     0,     0,
     160,   161,     0,   162,     0,     0,     0,   164,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,     0,   165,
       0,   166,     0,     0,    29,    30,     5,   170,     0,    32,
     168,    50,   157,   158,     0,     0,     0,     0,   169,     0,
       0,     0,     0,   160,   161,     0,   162,    40,    41,   961,
     164,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     0,   165,     0,   166,     0,     0,    29,    30,     5,
     170,     0,    32,   168,    50,   157,   158,     0,     0,     0,
       0,   169,     0,     0,     0,     0,   160,   161,     0,   162,
       0,    54,     0,   164,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,     0,   165,     0,   166,     0,     0,
      29,    30,     5,   170,     0,    32,   168,    50,   157,   158,
       0,   563,     0,     0,   169,     0,     0,     0,     0,   160,
     161,     0,   162,     0,     0,     0,   164,     0,     0,     0,
       0,     0,     0,     0,     0,    43,     0,     0,   165,     0,
     166,     0,     0,    29,    30,     5,   170,     0,    32,   168,
      50,   157,   158,     0,   817,     0,     0,   169,     0,     0,
       0,     0,   160,   161,     0,   162,     0,     0,     0,   164,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       0,   165,     0,   166,     0,     0,    29,    30,     5,   170,
       0,    32,   168,    50,   157,   158,     0,   888,     0,     0,
     169,     0,     0,     0,     0,   160,   161,     0,   162,     0,
       0,     0,   164,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,   165,     0,   166,     0,     0,    29,
      30,     5,   170,     0,    32,   168,    50,   157,   158,     0,
     965,     0,     0,   169,     0,     0,     0,     0,   160,   161,
       0,   162,    40,    41,     0,   164,     0,     0,     0,     0,
       0,     0,     0,     0,    43,     0,     0,   165,     0,   166,
       0,     0,    29,    30,     0,   170,     0,    32,   168,    50,
       0,     0,     0,     0,     0,     0,   169,     0,     0,     0,
       0,     0,     0,     0,     0,   539,   540,   541,   542,   543,
     544,   545,   546,   547,     0,     0,     0,    43,   548,   549,
     550,   551,   552,   553,   554,   555,     0,     0,   170,     0,
       0,     0,    50,     0,     0,     0,     0,     0,     0,     0,
     539,   540,   541,   542,   543,   544,   545,   546,   547,     0,
       0,     0,   978,   548,   549,   550,   551,   552,   553,   554,
     555,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   988
};

static const yytype_int16 yycheck[] =
{
       2,   135,    13,   173,   281,   567,   154,   155,   142,   657,
     445,   446,   465,   466,   711,     9,   723,   537,     9,   716,
     590,    35,     9,     9,   476,   652,    28,     9,   532,     9,
      13,    35,    51,    17,   682,    37,   510,     0,    69,    70,
       9,    35,    35,     9,     9,     9,     2,    49,    35,    35,
       9,     0,     9,    35,   117,    35,   395,    59,    60,     2,
     123,    45,   689,     9,   516,     2,    68,    17,    70,   521,
      72,    73,   411,    75,    35,    77,   528,    79,    35,    81,
      35,    83,   113,    85,     9,    87,    88,    89,     9,    35,
      40,    93,   118,   567,    96,     9,     2,    99,   117,   101,
      35,   117,     9,    35,    60,   121,     3,     4,   122,   279,
      35,   102,   564,   820,    35,     9,   102,    60,   120,     9,
     124,    35,    28,    60,   126,   118,    33,    34,    35,    10,
     124,    37,   118,   135,    35,   115,   116,   124,   786,   787,
     142,    35,     2,    49,   124,    35,    53,    54,    55,    56,
      35,    58,    59,    59,    60,   124,   115,   116,   124,   124,
     124,   723,    68,   124,    70,   124,    72,    73,    28,    75,
       9,    77,     9,    79,    19,    81,   159,    83,   124,    85,
     877,    87,    88,    89,   658,   755,     9,    93,   641,    49,
      96,   711,   124,    99,    54,   101,    35,   632,    35,   124,
      60,   115,   116,   124,   118,     2,   854,     9,    68,    35,
     124,   118,    35,   215,   120,   122,   118,   124,   115,   116,
     126,   115,   116,    83,   118,    85,   953,    87,    88,   135,
     124,    28,   124,    35,   124,    35,   142,   122,    36,   124,
       3,     4,   117,    35,    17,     2,    35,   249,   123,   723,
      35,   978,    49,   117,    35,   759,   122,   121,   820,    17,
     120,   988,   829,    60,    37,    38,   770,    35,    35,    35,
      35,    28,   839,    35,   841,   135,   115,   116,   115,   116,
      35,    35,   142,    35,   788,   124,    84,   124,    86,    17,
      35,    88,    49,    91,    35,   118,   122,    95,   124,    35,
     122,   124,   100,    60,    35,   103,   104,   105,   106,    37,
      38,    39,   117,   115,   116,   113,   121,   601,   118,   603,
      51,   119,   124,   457,   124,   609,   118,   125,    50,   118,
     122,    88,   124,   122,   468,   124,   118,   118,   135,   124,
     844,   793,   846,   124,   796,   142,   820,   145,   146,    19,
     118,   803,   115,   116,   122,   807,   124,     2,   124,   124,
       3,     4,   124,   118,   118,   118,   818,   122,    51,   124,
     124,   117,   124,   119,   115,   116,   117,   118,   135,   124,
     106,    17,   918,    28,   119,   142,   117,   118,   124,   122,
     894,   124,    17,   395,   898,    57,   115,   116,    57,   903,
     904,    37,    38,    39,    49,   575,   115,   116,   117,   411,
     914,   915,     9,    38,    39,    60,   214,   953,   870,   871,
      66,   873,   115,   116,   222,   118,    35,   879,   115,   116,
     117,   935,   115,   116,   117,   939,    33,    34,    35,   891,
     976,   945,   978,    88,   106,   107,   108,   109,   110,   108,
     109,   110,   988,     2,    35,   457,    53,    54,    55,    56,
      35,    58,    59,   117,   916,   119,   468,   115,   116,   746,
     922,    35,   487,   488,   489,   490,   491,   115,   116,    28,
      15,    16,    17,    18,    35,     3,     4,   115,   116,   395,
     135,     9,     3,     4,   509,   115,   116,   142,     9,    35,
      49,    15,    16,    17,    18,   411,   654,   959,   115,   116,
     962,    60,   115,   116,   966,    33,    34,    35,   114,   115,
     116,   118,    33,    34,    35,   122,    35,   124,   980,    35,
     532,   115,   116,    35,   118,    53,    54,    55,    56,    88,
      58,    59,    53,    54,    55,    56,    35,    58,    59,    35,
     117,   457,   119,   830,    33,    34,   567,   115,   116,   117,
     117,   731,   468,   115,   116,   117,     3,     4,   570,   703,
       9,    17,    18,   575,    53,    54,    55,    56,     9,    58,
      59,   115,   116,   117,   102,   117,   135,   119,   117,   117,
     119,   102,   118,   142,    33,    34,    35,   457,   118,   119,
     118,    19,    33,    34,   122,   117,   124,   118,   468,   125,
     117,   122,   119,   124,    53,    54,    55,    56,    17,    58,
      59,   118,    53,    54,    55,    56,   532,    58,    59,   117,
     124,   119,    71,    72,    73,    74,    75,    76,    77,    78,
      79,   118,   440,   122,     9,    84,    85,    86,    87,    88,
      89,    90,    91,   117,   117,   119,   119,   117,   117,   119,
     457,     2,    57,   117,   570,   119,   117,     9,   119,   575,
      19,   468,   532,   117,   117,   119,   115,   116,   117,   117,
       9,    37,    38,   122,   118,   124,   118,    28,   690,     9,
     824,   122,   117,   124,     2,    63,    64,   124,   119,    46,
     457,   703,   119,   117,    33,    34,    35,   567,    49,   117,
     570,   468,   723,   119,    96,   575,   119,   119,    81,    60,
      28,   119,   119,   117,    53,    54,    55,    56,   119,    58,
      59,   119,   119,    17,    60,   532,   738,   142,     9,    13,
      88,    49,    88,    88,    88,    88,   246,    88,    88,    88,
      88,    88,    60,    88,    88,    13,    13,   759,    88,   155,
      88,   690,    33,    34,    35,   249,   516,   248,   770,   717,
     976,   874,   446,   570,   465,   532,   738,   992,   575,   570,
      88,   822,    53,    54,    55,    56,   788,    58,    59,   647,
     647,     2,   534,   122,   135,   124,    -1,   703,    -1,    -1,
      -1,   142,    13,    -1,    -1,    -1,    -1,    -1,    -1,   820,
      -1,    -1,   457,   570,    -1,    -1,    -1,    28,   575,    -1,
      -1,     9,   824,   468,    -1,    -1,    -1,   135,    -1,    -1,
      -1,    -1,   738,    -1,   142,    -1,    -1,    -1,    49,    -1,
      -1,    71,   844,   703,   846,    33,    34,    35,    -1,    60,
      -1,   122,    -1,   759,    84,    85,    86,    87,    88,    89,
      90,    91,    -1,   723,   770,    53,    54,    55,    56,    -1,
      58,    59,    -1,    -1,    -1,    -1,    -1,    -1,   738,    -1,
      -1,    -1,   788,    -1,    -1,    -1,    -1,   532,    -1,    -1,
      -1,    -1,   894,    -1,    -1,    -1,   898,    -1,    -1,   759,
      -1,   903,   904,    -1,    -1,    -1,   703,    -1,   457,    -1,
     770,    -1,   914,   915,    -1,    -1,    -1,    -1,   824,   468,
      -1,    -1,    -1,    -1,   135,   570,    -1,    -1,   788,    -1,
     575,   142,    -1,   935,   122,    -1,   124,   939,   844,    -1,
     846,   738,    -1,   945,    -1,    -1,   703,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     820,    -1,   759,    -1,   824,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   770,    -1,    -1,    -1,    -1,    -1,    -1,
     982,   738,    -1,   532,   844,    -1,   846,    -1,   894,    -1,
     992,   788,   898,    -1,    -1,    -1,    -1,   903,   904,    -1,
      -1,    -1,   759,    -1,    -1,    -1,    -1,    -1,   914,   915,
      -1,    -1,    -1,   770,    -1,    -1,    -1,    -1,    -1,     2,
      -1,   570,    -1,    -1,    -1,    -1,   575,   824,    -1,   935,
      -1,   788,    -1,   939,   894,    -1,    -1,    -1,   898,   945,
      -1,    -1,    -1,   903,   904,    28,    -1,   844,    -1,   846,
      -1,    -1,    -1,    -1,   914,   915,    -1,    -1,   703,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   824,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   935,   982,    60,    -1,   939,
      -1,    -1,    -1,    -1,    -1,   945,   992,   844,    -1,   846,
      -1,    -1,    -1,   738,    -1,    -1,    -1,   894,    -1,    -1,
      -1,   898,    -1,    -1,    -1,    88,   903,   904,    -1,    -1,
      -1,    -1,    -1,    -1,   759,    -1,   457,   914,   915,    -1,
      -1,    -1,   982,    -1,    -1,   770,    -1,   468,    -1,    -1,
      -1,    -1,   992,    -1,    -1,    -1,    -1,   894,   935,    -1,
      -1,   898,   939,   788,    33,    34,   903,   904,   945,   457,
      -1,    -1,   135,    -1,   703,    -1,    -1,   914,   915,   142,
     468,    -1,    -1,    -1,    53,    54,    55,    56,     2,    58,
      59,    -1,    -1,     9,    -1,    -1,    -1,    -1,   935,   824,
      -1,    -1,   939,     2,    -1,   982,    -1,    -1,   945,   738,
      -1,   532,    -1,    -1,    28,   992,    -1,    33,    34,   844,
      -1,   846,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
     759,    -1,    -1,   102,    -1,    49,    -1,    53,    54,    55,
      56,   770,    58,    59,   532,   982,    60,     9,    -1,   570,
      49,    -1,    -1,   122,   575,   992,    -1,    -1,    -1,   788,
      -1,    60,    -1,    -1,    -1,    -1,   457,    -1,    -1,   894,
      -1,    33,    34,   898,    88,    -1,    -1,   468,   903,   904,
      -1,    -1,   570,    -1,    -1,    -1,    -1,   575,     9,   914,
     915,    53,    54,    55,    56,   824,    58,    59,    -1,    -1,
       2,    -1,    -1,    -1,    -1,    -1,   122,    -1,   124,    -1,
     935,    -1,    33,    34,   939,   844,    -1,   846,    -1,    -1,
     945,   135,    -1,    -1,    -1,    -1,    28,    -1,   142,    -1,
      -1,    -1,    53,    54,    55,    56,   135,    58,    59,    -1,
       2,   532,    -1,   142,    -1,    -1,     9,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     2,    -1,   982,    60,    -1,
     122,    -1,   124,    -1,    -1,   894,    28,   992,    -1,   898,
      33,    34,    35,    -1,   903,   904,    -1,    -1,    -1,   570,
      -1,    28,   703,    -1,   575,   914,   915,    49,    -1,    -1,
      53,    54,    55,    56,    -1,    58,    59,     9,    60,    -1,
      -1,   122,    49,   124,    -1,    -1,   935,    -1,    -1,    -1,
     939,    -1,    -1,    60,    -1,   703,   945,   738,    -1,    -1,
      -1,    33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,   759,   102,
     142,    53,    54,    55,    56,    -1,    58,    59,    -1,   770,
     738,    -1,     9,   982,    -1,   118,    -1,    -1,    -1,   122,
      -1,   124,    -1,   992,    -1,    -1,    -1,   788,    -1,    -1,
      -1,   759,    -1,   135,    -1,    -1,    33,    34,    35,    -1,
     142,    -1,   770,    -1,    -1,    -1,    -1,    -1,   135,    -1,
      -1,    -1,    -1,    -1,   457,   142,    53,    54,    55,    56,
     788,    58,    59,   824,    -1,   468,    -1,    -1,    -1,    -1,
     122,    -1,   703,    -1,    71,    72,    73,    74,    75,    76,
      77,    78,    79,   844,    -1,   846,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    -1,   824,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     2,    -1,   738,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   844,    -1,   846,    -1,
      -1,   118,    -1,    -1,    -1,   122,    -1,   124,   759,   532,
      -1,    28,    -1,   894,    -1,    -1,    -1,   898,    -1,   770,
      -1,    -1,   903,   904,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    49,   914,   915,     9,    -1,   788,    -1,    -1,
      -1,    -1,    -1,    60,    -1,    -1,   894,   570,    -1,    -1,
     898,    -1,   575,    -1,   935,   903,   904,    -1,   939,    33,
      34,    35,    -1,    -1,   945,    -1,   914,   915,    -1,    -1,
      -1,    -1,    -1,   824,    -1,    -1,    -1,     2,    -1,    53,
      54,    55,    56,   457,    58,    59,    -1,   935,    -1,    -1,
      -1,   939,    -1,   844,   468,   846,    -1,   945,   457,    -1,
      -1,   982,    -1,    28,    -1,    -1,    -1,    -1,    -1,   468,
      -1,   992,    -1,     5,    -1,    -1,    -1,    -1,   135,    11,
      12,    -1,    -1,    -1,    49,   142,    -1,    -1,    -1,    -1,
      22,    23,    -1,    25,   982,    60,    -1,    29,    -1,    -1,
      -1,    -1,    -1,   894,   992,    -1,    -1,   898,   122,    41,
     124,    43,   903,   904,    46,    47,    -1,    -1,   532,    51,
      52,    -1,    -1,   914,   915,    -1,    -1,    -1,    60,    -1,
      -1,    -1,    -1,   532,    -1,    -1,    -1,    -1,    -1,    -1,
     703,    -1,    -1,    -1,   935,    -1,    -1,    -1,   939,    81,
      -1,    -1,    -1,    -1,   945,   457,   570,    -1,    -1,    -1,
      92,   575,    -1,    -1,    96,    -1,   468,    -1,    -1,    -1,
     135,   570,    -1,     9,    -1,   738,   575,   142,    -1,     2,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,
      -1,   982,    -1,    -1,    -1,   457,   759,    33,    34,    35,
      -1,   992,    -1,    -1,    -1,    28,   468,   770,    -1,    -1,
     457,    -1,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,
      56,   468,    58,    59,    -1,   788,    49,    -1,    -1,    -1,
     532,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
       2,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   824,    -1,    -1,    -1,    -1,    28,    -1,   570,    -1,
     532,    -1,    -1,   575,    33,    34,    35,    -1,    -1,    -1,
      -1,   844,    -1,   846,    -1,   532,   122,    49,   124,   703,
      -1,    -1,    -1,    -1,    53,    54,    55,    56,    60,    58,
      59,    -1,    -1,    -1,   703,    -1,    -1,    -1,   570,    -1,
      -1,    -1,   135,   575,    -1,    -1,    -1,    -1,    -1,   142,
      -1,    -1,    -1,   570,   738,    -1,    -1,    -1,   575,    -1,
      -1,   894,    -1,    -1,    -1,   898,    -1,    -1,    -1,   738,
     903,   904,    -1,   102,    -1,   759,    -1,    -1,    -1,    -1,
      -1,   914,   915,    -1,    -1,    -1,   770,    -1,    -1,   118,
     759,    -1,    -1,   122,    -1,   124,    -1,    -1,     9,     2,
      -1,   770,   935,   135,   788,    -1,   939,     2,    -1,    -1,
     142,    -1,   945,    -1,    -1,    -1,    -1,    -1,    -1,   788,
      -1,    -1,    33,    34,    35,    28,    -1,    -1,    -1,    -1,
     457,   703,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     824,   468,    53,    54,    55,    56,    49,    58,    59,   982,
      -1,    -1,    -1,    -1,    -1,   824,    -1,    60,    -1,   992,
     844,    -1,   846,    -1,    -1,    60,   738,    -1,    -1,    -1,
      -1,   703,    -1,    -1,    -1,   844,    -1,   846,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   703,   759,    -1,    -1,
      -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,   770,    -1,
      -1,    -1,    -1,    -1,    -1,   532,   738,   118,    -1,    -1,
     894,   122,    -1,   124,   898,    -1,   788,    -1,    -1,   903,
     904,   738,   457,    -1,    -1,   894,    -1,   759,    -1,   898,
     914,   915,   135,   468,   903,   904,    -1,    -1,   770,   142,
     135,    -1,   759,   570,    -1,   914,   915,   142,   575,    -1,
      -1,   935,   824,   770,    -1,   939,   788,    -1,    -1,    -1,
       2,   945,    -1,    -1,    -1,    -1,   935,    -1,    -1,    -1,
     939,   788,   844,    26,   846,    -1,   945,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,     2,    -1,    -1,    -1,
      -1,    -1,   824,    -1,    -1,    48,    49,   532,   982,    -1,
      -1,    -1,    -1,    -1,    57,    -1,    -1,   824,   992,    -1,
      -1,    -1,   844,   982,   846,    -1,    -1,    -1,    60,    -1,
      -1,    -1,   894,   992,    -1,    -1,   898,   844,    -1,   846,
      -1,   903,   904,    -1,    -1,   570,    -1,    -1,    -1,    -1,
     575,    -1,   914,   915,    60,    -1,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,   894,   935,   457,    -1,   898,   939,    -1,    -1,
      -1,   903,   904,   945,    -1,   468,   703,   894,    -1,    -1,
      -1,   898,   914,   915,    -1,    -1,   903,   904,    -1,     2,
      -1,    -1,    -1,   135,    -1,    -1,    -1,   914,   915,    -1,
     142,    -1,    -1,   935,    -1,    -1,    -1,   939,    -1,    -1,
     982,   738,    -1,   945,    -1,    -1,    -1,    -1,   935,   135,
     992,    -1,   939,    -1,    -1,   457,   142,    -1,   945,    -1,
      -1,    -1,   759,    -1,    -1,    -1,   468,    -1,    -1,   532,
      -1,    -1,    -1,   770,    -1,    -1,     9,    60,    -1,    -1,
     982,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     992,   788,    -1,    -1,    -1,   982,    -1,    -1,   703,    -1,
      33,    34,    35,    -1,    -1,   992,    -1,   570,    -1,    -1,
      -1,     9,   575,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    54,    55,    56,    -1,    58,    59,   824,    -1,    -1,
     532,    -1,    -1,   738,    -1,    33,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   844,    -1,   846,
      -1,    -1,   135,    -1,   759,    53,    54,    55,    56,   142,
      58,    59,    -1,    -1,    -1,   770,    -1,    -1,   570,   102,
      -1,    -1,    -1,   575,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   788,   457,   118,    -1,    -1,    -1,   122,
      -1,   124,   457,    -1,    -1,   468,    -1,   894,    -1,    -1,
      -1,   898,    -1,   468,   102,     9,   903,   904,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   914,   915,   824,
     118,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    33,
      34,    35,    -1,    -1,    -1,    -1,    -1,     9,   935,   844,
     703,   846,   939,    -1,    -1,    -1,    -1,    -1,   945,    53,
      54,    55,    56,    -1,    58,    59,    -1,    -1,    -1,   532,
      -1,    33,    34,    35,    -1,    -1,    -1,   532,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   738,    -1,    -1,    -1,    -1,
      -1,    53,    54,    55,    56,   982,    58,    59,    -1,   894,
      -1,    -1,    -1,   898,    -1,   992,   759,   570,   903,   904,
      -1,   703,   575,    -1,    -1,    -1,    -1,   770,    -1,   914,
     915,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
     124,    -1,    -1,    -1,    -1,   788,    -1,    -1,    -1,    -1,
     935,    -1,    -1,    -1,   939,    -1,   738,    -1,    -1,    -1,
     945,    -1,    -1,    -1,    -1,   457,    -1,    -1,    -1,    -1,
     122,    -1,   124,    -1,    -1,    -1,   468,   759,    -1,    -1,
      -1,   824,    -1,    -1,    -1,    -1,    -1,    -1,   770,    -1,
      -1,   457,     5,    -1,    -1,    -1,    -1,   982,    11,    12,
      -1,   844,   468,   846,    -1,    -1,   788,   992,    -1,    22,
      23,    -1,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      43,    -1,    -1,    46,    47,    -1,    -1,    -1,    51,    52,
     532,    -1,   824,    -1,    -1,    -1,    -1,    60,    -1,    -1,
     703,   894,    -1,    -1,    -1,   898,    -1,    -1,   703,    -1,
     903,   904,   844,    -1,   846,    -1,   532,    -1,    81,    -1,
      -1,   914,   915,    -1,    -1,    -1,    -1,    -1,    -1,    92,
      -1,    -1,    -1,    96,    -1,   738,    -1,    -1,    -1,    -1,
      -1,    -1,   935,   738,   457,    -1,   939,    -1,    -1,    -1,
      -1,   114,   945,    -1,    -1,   468,   759,    -1,    -1,    -1,
      -1,    -1,   894,    -1,   759,    -1,   898,   770,    -1,    -1,
      -1,   903,   904,    -1,    -1,   770,    -1,    -1,    -1,    -1,
      -1,    -1,   914,   915,    -1,   788,    -1,    -1,    -1,   982,
      -1,    -1,    -1,   788,    -1,    -1,    -1,    -1,    -1,   992,
      -1,    -1,    -1,   935,    -1,    -1,    -1,   939,    -1,    -1,
      -1,    -1,    -1,   945,    -1,    -1,    -1,    -1,    -1,   532,
      -1,   824,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   824,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,
      -1,   844,    -1,   846,    11,    12,    -1,    -1,    -1,   844,
     982,   846,    -1,    -1,    -1,    22,    23,    -1,    25,    -1,
     992,   703,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    43,    -1,    -1,    46,
      47,    -1,    -1,    -1,    51,    52,    -1,   703,    30,    31,
      32,   894,    -1,    60,    -1,   898,   738,    -1,    -1,   894,
     903,   904,    -1,   898,    -1,    -1,    48,    49,   903,   904,
      -1,   914,   915,    -1,    81,    57,    -1,   759,    -1,   914,
     915,    -1,   738,    -1,    -1,    92,    -1,    -1,   770,    96,
      -1,    -1,   935,    -1,    -1,    -1,   939,    -1,    -1,    -1,
     935,    -1,   945,   759,   939,    -1,   788,    -1,   115,   116,
     945,    -1,    -1,    -1,   770,    -1,    -1,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,    -1,
      -1,    -1,   788,    -1,    -1,    -1,    -1,    -1,    -1,   982,
      -1,    -1,   824,    -1,    -1,    -1,    -1,   982,    -1,   992,
     703,    -1,    -1,     5,    -1,    -1,    -1,   992,    -1,    11,
      12,    -1,   844,    -1,   846,    -1,    -1,    -1,   824,    -1,
      22,    23,    -1,    25,    -1,    -1,    -1,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   738,    -1,    -1,   844,    41,
     846,    43,    -1,    -1,    46,    47,    -1,    -1,    -1,    51,
      52,    -1,    -1,     2,    -1,     4,   759,    -1,    60,    -1,
      -1,    -1,   894,    -1,    -1,    -1,   898,   770,    -1,    -1,
      -1,   903,   904,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    -1,   914,   915,    -1,   788,    -1,    -1,   894,    -1,
      92,    -1,   898,    -1,    96,    -1,    -1,   903,   904,    -1,
      -1,    -1,    -1,   935,    -1,    -1,    -1,   939,   914,   915,
      -1,    60,   114,   945,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   824,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   935,
      -1,    -1,    -1,   939,    -1,    -1,    -1,    -1,    -1,   945,
      -1,   844,    -1,   846,    -1,    -1,    -1,    -1,    -1,    -1,
     982,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     992,    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    -1,    -1,   982,    84,    85,    86,
      87,    88,    89,    90,    91,    -1,   992,    -1,    17,    18,
      -1,   894,    -1,    -1,    -1,   898,    -1,    -1,    -1,    28,
     903,   904,   151,    -1,    26,    27,    -1,    -1,    30,    31,
      32,   914,   915,    42,    -1,    44,    45,   124,    -1,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    48,    49,    -1,    -1,
      59,    -1,   935,    -1,    -1,    57,   939,    -1,    -1,    68,
      -1,    70,   945,    72,    73,    -1,    75,    -1,    77,    -1,
      79,    -1,    81,    -1,    83,    -1,    85,    -1,    87,    88,
      89,    -1,    -1,   212,    93,    -1,    -1,    96,    -1,    -1,
      99,   220,   101,    -1,    -1,    -1,    -1,    -1,    -1,   982,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   992,
      -1,   120,    -1,    -1,    -1,   117,    -1,   126,    -1,    -1,
      -1,   250,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   258,
      -1,    -1,   261,    -1,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,   154,   155,   276,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,   286,    -1,    -1,
      -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,    -1,    10,    11,    12,
      13,    14,   118,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    -1,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,
      33,    34,    -1,    -1,    -1,    -1,   215,    -1,    41,    -1,
      43,    -1,   221,    46,    47,    -1,    -1,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    69,    70,   247,   248,
     249,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      -1,     9,    -1,    -1,    -1,   264,    -1,    -1,    -1,    92,
      93,    -1,    -1,    96,    -1,    -1,    99,   100,    -1,    -1,
     279,    -1,    -1,   106,   107,    33,    34,    -1,    -1,    -1,
     113,   114,    -1,   292,   293,   118,    -1,   120,    -1,   122,
      -1,    -1,    -1,    -1,    -1,    53,    54,    55,    56,    -1,
      58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   441,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,   474,    -1,    -1,   477,    -1,
     479,    -1,    -1,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,    -1,   395,    -1,    -1,    -1,
      -1,    -1,    -1,   522,    -1,    -1,    -1,    -1,    -1,    -1,
     529,   530,   411,    -1,   533,     5,   535,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    -1,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,   562,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,   571,    43,    -1,    -1,    46,    47,    -1,    -1,
      50,    51,    52,    -1,    -1,    -1,    13,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    22,    23,    67,    -1,    69,
      70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,    93,    -1,    52,    96,    -1,    -1,    99,
      57,    -1,    -1,    -1,   513,    -1,    -1,    -1,    -1,   638,
      -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,   118,    -1,
     120,    -1,   122,    -1,    -1,    -1,    -1,    -1,   537,     5,
      -1,     7,     8,   542,    10,    11,    12,    13,    14,    -1,
      -1,    -1,   551,    19,    20,    21,    22,    23,    -1,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,   691,    -1,    -1,    41,   575,    43,    -1,    -1,
      46,    47,   701,    26,    27,    51,    52,    30,    31,    32,
      -1,   138,   711,    -1,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    67,   149,    69,    70,    48,    49,    -1,    -1,   156,
      -1,    -1,    -1,    -1,    57,    81,   163,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   171,   172,    92,    93,    -1,   748,
      96,   750,    -1,    -1,    -1,   634,   635,    -1,    -1,    -1,
      -1,   760,    -1,    -1,   763,   764,   765,   113,    -1,    -1,
     769,    -1,   118,   772,   120,   654,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
      -1,   800,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   690,    -1,    -1,   693,    -1,    -1,    -1,   697,   698,
      -1,    -1,    -1,    -1,   251,    -1,    -1,    -1,    -1,    -1,
     709,    -1,   711,    -1,    -1,    -1,    -1,   716,   717,   838,
      -1,    -1,    -1,   722,   723,    -1,   845,    -1,   275,   848,
     277,    -1,   731,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   866,   867,   296,
     297,    -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,   878,
     307,    -1,    -1,    -1,   311,    -1,    -1,    -1,    -1,   316,
      -1,    -1,    -1,   320,    -1,    -1,    -1,   324,    -1,    -1,
      -1,   328,    -1,    -1,   331,    -1,   905,    -1,   335,    -1,
      -1,    -1,    -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,
      -1,   920,   801,   802,    -1,    -1,    -1,    -1,    -1,    -1,
     929,   930,    -1,    -1,   933,    -1,    -1,   936,   937,    -1,
      -1,   820,    -1,    -1,    -1,    -1,    -1,    -1,   827,    -1,
     829,   378,    -1,   380,    -1,    -1,   383,    -1,    -1,   386,
     839,    -1,   841,    -1,   391,    -1,    -1,    -1,    -1,    -1,
     397,    -1,    -1,    -1,    -1,   974,    -1,   404,   405,   406,
     407,   408,   409,   410,    -1,   864,    -1,    -1,    -1,    -1,
     869,   418,    -1,    -1,   421,   874,    -1,    -1,   877,    -1,
     427,    -1,   429,    -1,   431,    -1,   433,    -1,   435,    26,
      27,    -1,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      47,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      57,    -1,   921,    -1,    -1,   924,    -1,    -1,    -1,    -1,
      -1,    -1,   931,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   961,   510,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    66,    67,    -1,    69,   526,
      71,    -1,    -1,    74,    -1,    76,    -1,    78,    -1,    -1,
      -1,    82,     9,    -1,    -1,    86,   995,   996,    -1,    90,
      91,    -1,    -1,    -1,    95,    -1,    97,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    35,    -1,
     567,    -1,   569,   114,    -1,    -1,    -1,    -1,   119,    -1,
      -1,    -1,    -1,    -1,   125,    -1,    53,    54,    55,    56,
      -1,    58,    59,   590,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   629,   174,   175,   176,   177,   178,   179,   180,
     637,   182,    -1,   184,   185,   186,    -1,   188,   645,   190,
     191,    -1,    -1,   650,    -1,   122,    -1,   124,    -1,    -1,
      -1,   658,   203,    -1,    -1,    -1,   207,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   224,   225,   226,   227,   228,   229,   230,
      -1,   232,    -1,   234,   235,   236,    -1,   238,   239,   240,
      -1,    -1,   243,   244,   245,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   721,    -1,   723,   268,   269,    -1,
     271,   272,    -1,    -1,    -1,     9,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    -1,   755,    33,
      34,    35,    -1,    -1,   761,    -1,    -1,    -1,    -1,    -1,
     767,    -1,    -1,    -1,    -1,    -1,   773,    -1,    -1,    53,
      54,    55,    56,   780,    58,    59,    -1,    -1,    -1,    -1,
      -1,    -1,   789,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    -1,    -1,
      -1,   362,    -1,   820,    -1,   822,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    -1,   122,    -1,
     124,    -1,    -1,    -1,    -1,    -1,   853,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   861,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,   880,    10,    11,    12,    13,    14,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,   906,
      36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,   948,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    37,    38,    39,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,   728,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,   742,    -1,    -1,   745,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    37,    38,    39,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    37,    38,    39,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    37,    38,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    37,    38,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    38,    39,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    37,    38,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    -1,    40,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    45,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     1,   122,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      -1,    67,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
     116,    -1,   118,    -1,   120,     5,   122,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    -1,    25,    -1,    -1,    28,    29,
      -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    43,    -1,    -1,    46,    47,    -1,    -1,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    69,
      70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,    93,    -1,    -1,    96,    -1,    -1,    99,
     100,    -1,    -1,    -1,    -1,    -1,   106,   107,    -1,    -1,
      -1,    26,    27,   113,   114,    30,    31,    32,   118,    -1,
     120,     5,   122,     7,     8,    -1,    10,    11,    12,    13,
      14,    -1,    -1,    48,    49,    19,    20,    21,    22,    23,
      -1,    25,    57,    -1,    28,    29,    -1,    -1,    -1,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,
      -1,    -1,    46,    47,    -1,    -1,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    69,    70,   102,   103,   104,
     105,   106,   107,   108,   109,   110,    -1,    81,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,
      -1,    -1,    96,    -1,    -1,    99,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,
     114,    -1,    -1,   117,   118,    -1,   120,     5,   122,     7,
       8,    -1,    10,    11,    12,    13,    14,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    -1,    25,    -1,    -1,
      28,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    43,    -1,    -1,    46,    47,
      -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      -1,    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    92,    93,    -1,    -1,    96,    -1,
      -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
      -1,    -1,    -1,    -1,    -1,   113,   114,    -1,    -1,   117,
     118,    -1,   120,     5,   122,     7,     8,    -1,    10,    11,
      12,    13,    14,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    -1,    25,    -1,    -1,    28,    29,    -1,    -1,
      -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    41,
      -1,    43,    -1,    -1,    46,    47,    -1,    -1,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    -1,    69,    70,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      92,    93,    -1,    -1,    96,    -1,    -1,    99,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,    -1,    -1,    -1,    26,
      27,   113,   114,    30,    31,    32,   118,    -1,   120,     5,
     122,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    48,    49,    19,    20,    21,    22,    23,    -1,    25,
      57,    -1,    28,    29,    -1,    -1,    -1,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    43,    -1,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    -1,    69,    70,   102,   103,   104,   105,   106,
     107,   108,   109,   110,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    -1,    -1,
      96,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,    -1,    -1,    -1,    -1,    -1,   113,   114,    -1,
      -1,    -1,   118,    -1,   120,     5,   122,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    -1,    25,    -1,    -1,    28,    29,
      -1,    -1,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    43,    -1,    -1,    46,    47,    -1,    -1,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    69,
      70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,    93,    -1,    -1,    96,    -1,    -1,    99,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,    -1,    -1,
      -1,    -1,    -1,   113,   114,    -1,    -1,    -1,   118,    -1,
     120,     5,   122,     7,     8,    -1,    10,    11,    12,    13,
      14,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      -1,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,
      -1,    -1,    46,    47,    -1,    -1,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    -1,    69,    70,    70,    -1,    72,
      73,    -1,    75,    -1,    77,     9,    79,    81,    81,    -1,
      83,    -1,    85,    -1,    87,    88,    89,    -1,    92,    93,
      93,    -1,    96,    96,    -1,    99,    99,    -1,   101,    33,
      34,    35,   106,   107,    -1,    -1,    -1,    -1,    -1,   113,
     114,    -1,    -1,    -1,   118,    -1,   120,   120,   122,    53,
      54,    55,    56,   126,    58,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     9,    -1,    -1,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    33,    34,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    53,    54,
      55,    56,    -1,    58,    59,    -1,    -1,    -1,   122,    -1,
     124,    -1,    -1,     9,    -1,    -1,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    53,    54,    55,
      56,    -1,    58,    59,    -1,    -1,    -1,   122,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,     5,    -1,    -1,    -1,
      -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    -1,    25,    -1,    -1,    -1,
      29,    -1,    -1,    -1,    -1,    -1,   122,    -1,   124,     5,
      -1,    -1,    41,    -1,    43,    11,    12,    46,    47,    -1,
      -1,    -1,    51,    52,    -1,    -1,    22,    23,    -1,    25,
      -1,    60,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      69,    70,    -1,    -1,    -1,    41,    -1,    43,    -1,    -1,
      46,    47,    81,    -1,    -1,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    92,    60,    -1,    -1,    96,    -1,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    11,    12,    -1,    -1,
      -1,    -1,    -1,    -1,   113,    81,    -1,    22,    23,   118,
      25,    -1,    -1,    -1,    29,    -1,    92,    -1,    -1,    -1,
      96,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,    -1,
      -1,    46,    47,     5,    -1,    -1,    51,    52,   114,    11,
      12,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      22,    23,    -1,    25,    -1,    -1,    -1,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    41,
      -1,    43,    -1,    -1,    46,    47,     5,    92,    -1,    51,
      52,    96,    11,    12,    -1,    -1,    -1,    -1,    60,    -1,
      -1,    -1,    -1,    22,    23,    -1,    25,    69,    70,   114,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    -1,    41,    -1,    43,    -1,    -1,    46,    47,     5,
      92,    -1,    51,    52,    96,    11,    12,    -1,    -1,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    22,    23,    -1,    25,
      -1,   113,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    -1,    41,    -1,    43,    -1,    -1,
      46,    47,     5,    92,    -1,    51,    52,    96,    11,    12,
      -1,   100,    -1,    -1,    60,    -1,    -1,    -1,    -1,    22,
      23,    -1,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    41,    -1,
      43,    -1,    -1,    46,    47,     5,    92,    -1,    51,    52,
      96,    11,    12,    -1,   100,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    22,    23,    -1,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      -1,    41,    -1,    43,    -1,    -1,    46,    47,     5,    92,
      -1,    51,    52,    96,    11,    12,    -1,   100,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    22,    23,    -1,    25,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    41,    -1,    43,    -1,    -1,    46,
      47,     5,    92,    -1,    51,    52,    96,    11,    12,    -1,
     100,    -1,    -1,    60,    -1,    -1,    -1,    -1,    22,    23,
      -1,    25,    69,    70,    -1,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    -1,    41,    -1,    43,
      -1,    -1,    46,    47,    -1,    92,    -1,    51,    52,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    81,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    -1,    92,    -1,
      -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      -1,    -1,   118,    84,    85,    86,    87,    88,    89,    90,
      91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   127,   128,     0,     1,     5,     6,     7,     8,    10,
      11,    12,    13,    14,    19,    20,    21,    22,    23,    24,
      25,    29,    33,    34,    36,    41,    42,    43,    44,    46,
      47,    50,    51,    52,    60,    61,    62,    65,    67,    68,
      69,    70,    80,    81,    82,    83,    92,    93,    94,    95,
      96,    97,    98,    99,   113,   115,   116,   118,   120,   122,
     129,   130,   131,   136,   142,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     188,   189,   190,   191,   192,   194,   198,   203,   205,   206,
     207,   209,   221,   223,   224,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   241,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   271,   274,
     277,   292,   293,   296,   308,   310,   312,   322,   325,   327,
     338,   343,   346,   348,   355,   363,   369,   371,   371,   147,
     154,   155,    35,    35,   259,   260,   118,    11,    12,    14,
      22,    23,    25,    28,    29,    41,    43,    50,    52,    60,
      92,   106,   107,   114,   162,   163,   165,   167,   170,   172,
     174,   177,   179,   181,   183,   188,   189,   190,   194,   197,
     203,   207,   210,   215,   221,   223,   224,   225,   226,   234,
     235,   236,   237,   241,   246,   247,   249,   250,   252,   256,
     299,   161,   160,   161,   145,   148,   179,   210,   215,   215,
     311,   275,   146,   161,   162,   163,   165,   167,   170,   172,
     174,   177,   179,   181,   183,   188,   189,   190,   194,   203,
     207,   220,   221,   241,   250,   256,    35,   272,   261,   150,
     356,   144,   154,   181,   183,   362,    10,   161,   161,   120,
     161,   283,    19,   153,   242,   365,   161,   181,   183,   188,
     190,   203,   250,   334,   335,   347,   215,   118,   250,   114,
     215,   175,   161,   181,   183,   204,     1,   130,   131,   142,
     277,   371,     3,     4,    35,   118,     9,   124,   238,   239,
       9,   238,   161,   181,   183,   187,   250,     9,    35,   238,
     187,     9,    35,   238,   187,   187,     9,    35,   238,   187,
       9,    35,   238,   187,     9,    35,   238,   187,     9,    35,
     187,     9,   238,   187,   250,     9,    35,   118,   154,   238,
     187,   250,     9,    35,   118,   154,   238,   187,   250,     8,
      10,   161,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   176,   177,   178,   180,   181,   182,   183,
     184,   187,   241,   250,   251,   256,   257,   187,     9,   238,
       9,   154,   238,     9,    35,   187,     9,    35,   154,   238,
     187,     9,    35,   118,   238,   122,   187,     9,    35,   154,
     238,   187,    33,    34,    53,    54,    55,    56,    58,    59,
     102,   122,   222,   154,   154,   154,   154,   154,     9,    35,
     238,     9,    35,   154,   238,   187,   250,   117,   119,   117,
     119,   117,   119,   117,   119,     9,    35,   154,   238,   187,
     143,    15,    16,    17,    18,   300,   302,   307,     1,    12,
      24,    25,   130,   142,   156,   157,   158,   159,   277,   371,
      17,    37,    38,    39,   309,   313,   318,   215,   159,    17,
     344,   345,   154,   154,   215,   371,   161,   262,   265,   262,
     215,   252,   215,   215,   215,   161,   192,   211,   216,   212,
     213,   214,    26,    27,    30,    31,    32,    48,    49,    57,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   217,
     117,   297,   152,   117,   371,   154,   181,   263,   264,   265,
     371,   161,   276,   154,     9,   102,   331,   185,   161,   273,
     276,   263,   371,   215,   364,    19,   118,   279,   371,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    84,    85,
      86,    87,    88,    89,    90,    91,   138,   139,   140,   118,
     371,   106,   119,   100,   161,   244,   245,    66,   366,    51,
     117,   215,   371,   161,   100,   114,   200,   201,   202,   215,
     219,   240,   371,   161,   161,   193,   215,   100,   215,   218,
     117,   123,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   195,   215,   196,   215,   215,   215,   215,   215,   208,
     204,   215,   215,   215,   215,   215,   215,   215,   215,   204,
     215,   215,   215,   215,   215,   215,   215,   154,   371,   303,
     307,    16,   300,   307,     3,     4,   156,   314,   319,    37,
     309,   318,    38,   309,   371,    37,    38,   349,   352,   371,
     124,   138,   269,   270,   117,   371,   371,   117,   117,   139,
     139,   139,   139,   139,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   139,   117,   201,   215,   371,   371,   161,   138,   269,
     117,   149,   138,   117,   371,   215,   138,    51,   117,   371,
     371,   151,   156,   294,   295,   371,   366,   114,   371,   278,
     161,   282,   283,   285,   161,   161,   280,   284,    19,   371,
     138,   125,   117,   117,   161,   197,   201,   210,   250,   367,
     368,   114,   215,   336,   337,   334,   371,    17,   370,   119,
     161,   181,   188,   190,   192,   203,   117,   121,   132,   134,
     133,   135,   199,   202,   218,   124,   199,   199,   199,   301,
     215,   305,   307,   161,   161,   215,   371,   316,   309,   321,
     323,   215,   353,    37,   345,   352,   215,   266,   267,   140,
     117,   123,   265,   200,   215,   200,   117,   117,   298,     9,
     140,   264,   371,   161,   328,   161,   161,   371,   156,   357,
      19,    81,   114,   161,   287,   290,   291,   286,   283,   285,
     371,   161,   281,   285,   287,   215,   243,   100,   161,   368,
     117,   161,   117,   339,   294,   202,   371,   118,   371,   118,
     117,   119,   218,   119,   119,   119,   295,   371,   215,   118,
     371,   118,   371,   371,   320,   215,   371,   295,   350,   371,
     215,     9,   215,   124,   117,   119,   200,   200,   295,   215,
     138,    46,   138,    63,    64,   359,   360,   361,   371,   114,
     161,   161,   138,   119,   117,   117,   138,   117,   121,   119,
     117,   121,   138,   368,   336,    96,   342,    17,   100,   137,
     141,   161,   137,   202,   304,   371,   137,   137,   315,   295,
     371,   295,   324,   371,   354,   351,   268,   215,   200,   119,
     119,   215,   161,   358,   371,   371,   161,   138,   118,   138,
     138,   114,   161,   291,    81,   285,   371,   138,   215,   340,
     119,   117,   138,   119,   295,   306,   119,   119,   295,   317,
      17,    40,   326,   295,   295,   371,   215,   119,    47,   332,
      17,   295,   295,   118,   138,   219,   288,   289,   371,   161,
     138,   114,   161,   371,   371,   100,   161,   371,   295,   371,
     371,   295,   295,   215,   329,   288,   117,   119,   118,   138,
     161,   138,   341,   138,   371,   119,   289,   288,   118,   138,
     295,   333,   330,   119,   288,    17,    45,   333,   119,   161,
     161
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (pComp, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, pComp)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, pComp); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, HB_COMP_PTR pComp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, pComp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    HB_COMP_PTR pComp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (pComp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, HB_COMP_PTR pComp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, pComp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    HB_COMP_PTR pComp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, pComp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, HB_COMP_PTR pComp)
#else
static void
yy_reduce_print (yyvsp, yyrule, pComp)
    YYSTYPE *yyvsp;
    int yyrule;
    HB_COMP_PTR pComp;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , pComp);
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, pComp); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, HB_COMP_PTR pComp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, pComp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    HB_COMP_PTR pComp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (pComp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 19: /* "LITERAL" */
#line 260 "harbour.y"
	{ if( (yyvaluep->valChar).dealloc ) hb_xfree( (yyvaluep->valChar).string ); };
#line 3828 "harboury.c"
	break;
      case 93: /* "CBSTART" */
#line 259 "harbour.y"
	{ if( (yyvaluep->asCodeblock).string )  hb_xfree( (yyvaluep->asCodeblock).string ); };
#line 3833 "harboury.c"
	break;

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (HB_COMP_PTR pComp);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (HB_COMP_PTR pComp)
#else
int
yyparse (pComp)
    HB_COMP_PTR pComp;
#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 264 "harbour.y"
    { hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 3:
#line 264 "harbour.y"
    { ;}
    break;

  case 10:
#line 273 "harbour.y"
    { yyclearin; yyerrok; ;}
    break;

  case 16:
#line 279 "harbour.y"
    { yyclearin; yyerrok; ;}
    break;

  case 17:
#line 283 "harbour.y"
    { if( (yyvsp[(3) - (4)].valChar).dealloc ) { hb_xfree( (yyvsp[(3) - (4)].valChar).string ); (yyvsp[(3) - (4)].valChar).dealloc = FALSE; } ;}
    break;

  case 18:
#line 285 "harbour.y"
    { if( (yyvsp[(3) - (6)].valChar).dealloc ) { hb_xfree( (yyvsp[(3) - (6)].valChar).string ); (yyvsp[(3) - (6)].valChar).dealloc = FALSE; }
                    if( (yyvsp[(5) - (6)].valChar).dealloc ) { hb_xfree( (yyvsp[(5) - (6)].valChar).string ); (yyvsp[(5) - (6)].valChar).dealloc = FALSE; } ;}
    break;

  case 19:
#line 289 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), 0 ); ;}
    break;

  case 20:
#line 289 "harbour.y"
    {;}
    break;

  case 21:
#line 290 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), FUN_PROCEDURE ); ;}
    break;

  case 22:
#line 290 "harbour.y"
    {;}
    break;

  case 23:
#line 291 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), 0 ); HB_COMP_PARAM->iVarScope = VS_PARAMETER; ;}
    break;

  case 24:
#line 291 "harbour.y"
    {;}
    break;

  case 25:
#line 292 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), FUN_PROCEDURE ); HB_COMP_PARAM->iVarScope = VS_PARAMETER;;}
    break;

  case 26:
#line 292 "harbour.y"
    {;}
    break;

  case 27:
#line 295 "harbour.y"
    { (yyval.iNumber) = HB_FS_PUBLIC; ;}
    break;

  case 28:
#line 296 "harbour.y"
    { (yyval.iNumber) = HB_FS_STATIC; ;}
    break;

  case 29:
#line 297 "harbour.y"
    { (yyval.iNumber) = HB_FS_INIT; ;}
    break;

  case 30:
#line 298 "harbour.y"
    { (yyval.iNumber) = HB_FS_EXIT; ;}
    break;

  case 31:
#line 301 "harbour.y"
    { (yyval.iNumber) = 0; ;}
    break;

  case 32:
#line 302 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->fVParams = TRUE; (yyval.iNumber) = 0; ;}
    break;

  case 34:
#line 304 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->fVParams = TRUE; (yyval.iNumber) = (yyvsp[(1) - (3)].iNumber); ;}
    break;

  case 35:
#line 307 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 37:
#line 311 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'N'; ;}
    break;

  case 38:
#line 312 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'C'; ;}
    break;

  case 39:
#line 313 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'D'; ;}
    break;

  case 40:
#line 314 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'L'; ;}
    break;

  case 41:
#line 315 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'B'; ;}
    break;

  case 42:
#line 316 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'O'; ;}
    break;

  case 43:
#line 317 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'S'; HB_COMP_PARAM->szFromClass = (yyvsp[(2) - (2)].string); ;}
    break;

  case 44:
#line 318 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 46:
#line 322 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'A'; ;}
    break;

  case 47:
#line 323 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'n'; ;}
    break;

  case 48:
#line 324 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'c'; ;}
    break;

  case 49:
#line 325 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'd'; ;}
    break;

  case 50:
#line 326 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'l'; ;}
    break;

  case 51:
#line 327 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'a'; ;}
    break;

  case 52:
#line 328 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'b'; ;}
    break;

  case 53:
#line 329 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'o'; ;}
    break;

  case 54:
#line 330 "harbour.y"
    { HB_COMP_PARAM->cVarType = 's'; HB_COMP_PARAM->szFromClass = (yyvsp[(2) - (2)].string); ;}
    break;

  case 55:
#line 333 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType ); (yyval.iNumber) = 1; ;}
    break;

  case 56:
#line 334 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType ); (yyval.iNumber)++; ;}
    break;

  case 57:
#line 342 "harbour.y"
    { HB_COMP_PARAM->fDontGenLineNum = TRUE; ;}
    break;

  case 58:
#line 342 "harbour.y"
    { ;}
    break;

  case 59:
#line 343 "harbour.y"
    { ;}
    break;

  case 60:
#line 344 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 61:
#line 345 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 62:
#line 346 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 63:
#line 347 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 64:
#line 348 "harbour.y"
    { if( HB_COMP_ISSUPPORTED( HB_COMPFLAG_XBASE ) )
                                         hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                                      else
                                         hb_compExprDelete( hb_compErrorSyntax( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ), HB_COMP_PARAM );
                                       HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                                    ;}
    break;

  case 65:
#line 354 "harbour.y"
    { if( HB_COMP_ISSUPPORTED( HB_COMPFLAG_XBASE ) )
                                         hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                                      else
                                         hb_compExprDelete( hb_compErrorSyntax( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ), HB_COMP_PARAM );
                                       HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                                    ;}
    break;

  case 66:
#line 360 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 67:
#line 361 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 68:
#line 362 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 69:
#line 363 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 70:
#line 364 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 71:
#line 365 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 72:
#line 366 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 73:
#line 367 "harbour.y"
    { hb_compGenBreak( HB_COMP_PARAM ); hb_compGenPCode2( HB_P_DOSHORT, 0, HB_COMP_PARAM );
                                      HB_COMP_PARAM->functions.pLast->bFlags |= FUN_BREAK_CODE; ;}
    break;

  case 74:
#line 369 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 75:
#line 369 "harbour.y"
    { hb_compGenBreak( HB_COMP_PARAM ); hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                                           hb_compGenPCode2( HB_P_DOSHORT, 1, HB_COMP_PARAM );
                                           HB_COMP_PARAM->functions.pLast->bFlags |= FUN_BREAK_CODE;
                                         ;}
    break;

  case 76:
#line 373 "harbour.y"
    { HB_COMP_PARAM->fDontGenLineNum = !HB_COMP_PARAM->fDebugInfo; ;}
    break;

  case 77:
#line 373 "harbour.y"
    { hb_compLoopExit( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags |= FUN_BREAK_CODE; ;}
    break;

  case 78:
#line 374 "harbour.y"
    { HB_COMP_PARAM->fDontGenLineNum = !HB_COMP_PARAM->fDebugInfo; ;}
    break;

  case 79:
#line 374 "harbour.y"
    { hb_compLoopLoop( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags |= FUN_BREAK_CODE; ;}
    break;

  case 80:
#line 375 "harbour.y"
    {
                     if( HB_COMP_PARAM->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        hb_compGenPCode1( HB_P_ENDPROC, HB_COMP_PARAM );
                        if( (HB_COMP_PARAM->functions.pLast->bFlags & FUN_PROCEDURE) == 0 )
                        { /* return from a function without a return value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_NO_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->bFlags |= FUN_WITH_RETURN;
                        HB_COMP_PARAM->fDontGenLineNum = TRUE;
                        HB_COMP_PARAM->functions.pLast->bFlags |= FUN_BREAK_CODE;
                     ;}
    break;

  case 81:
#line 389 "harbour.y"
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 82:
#line 391 "harbour.y"
    {
                        HB_COMP_PARAM->cCastType = HB_COMP_PARAM->cVarType;
                        HB_COMP_PARAM->cVarType = ' ';

                        if( HB_COMP_PARAM->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );   /* TODO: check if return value agree with declared value */
                        hb_compGenPCode2( HB_P_RETVALUE, HB_P_ENDPROC, HB_COMP_PARAM );
                        if( HB_COMP_PARAM->functions.pLast->bFlags & FUN_PROCEDURE )
                        { /* procedure returns a value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_PROC_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->bFlags |= FUN_WITH_RETURN;
                        HB_COMP_PARAM->fDontGenLineNum = TRUE;
                        HB_COMP_PARAM->functions.pLast->bFlags |= FUN_BREAK_CODE;
                     ;}
    break;

  case 83:
#line 409 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = VS_PUBLIC; ;}
    break;

  case 84:
#line 411 "harbour.y"
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPUBLIC" ); 
                        HB_COMP_PARAM->cVarType = ' ';  HB_COMP_PARAM->iVarScope = VS_NONE; 
                        HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                     ;}
    break;

  case 86:
#line 415 "harbour.y"
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = VS_PRIVATE; ;}
    break;

  case 87:
#line 417 "harbour.y"
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPRIVATE" ); 
                        HB_COMP_PARAM->cVarType = ' '; HB_COMP_PARAM->iVarScope = VS_NONE; 
                        HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                     ;}
    break;

  case 93:
#line 425 "harbour.y"
    {
                  if( HB_COMP_PARAM->szAnnounce == NULL )
                  {
                     /* check for reserved name
                     * NOTE: Clipper doesn't check for it
                     */
                     char * szFunction = hb_compReservedName( (yyvsp[(2) - (2)].string) );
                     if( szFunction )
                        hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FUNC_RESERVED, szFunction, (yyvsp[(2) - (2)].string) );
                     HB_COMP_PARAM->szAnnounce = (yyvsp[(2) - (2)].string);
                  }
                  else
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_DUPL_ANNOUNCE, (yyvsp[(2) - (2)].string), NULL );
               ;}
    break;

  case 95:
#line 439 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 96:
#line 442 "harbour.y"
    {
               if( (yyvsp[(1) - (1)].valChar).dealloc )
               {
                  (yyvsp[(1) - (1)].valChar).string = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[(1) - (1)].valChar).string, HB_IDENT_FREE );
                  (yyvsp[(1) - (1)].valChar).dealloc = FALSE;
               }
               hb_compAutoOpenAdd( HB_COMP_PARAM, (yyvsp[(1) - (1)].valChar).string );
            ;}
    break;

  case 97:
#line 450 "harbour.y"
    {
               {
                  char szFileName[ _POSIX_PATH_MAX + 1 ];
                  hb_strncat( hb_strncpy( szFileName, (yyvsp[(1) - (3)].valChar).string, _POSIX_PATH_MAX ), (yyvsp[(3) - (3)].valChar).string, _POSIX_PATH_MAX );
                  hb_compAutoOpenAdd( HB_COMP_PARAM, hb_compIdentifierNew( HB_COMP_PARAM, szFileName, HB_IDENT_COPY ) );
                  if( (yyvsp[(1) - (3)].valChar).dealloc )
                     hb_xfree( (yyvsp[(1) - (3)].valChar).string );
                  if( (yyvsp[(3) - (3)].valChar).dealloc )
                     hb_xfree( (yyvsp[(3) - (3)].valChar).string );
               }
            ;}
    break;

  case 98:
#line 463 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 100:
#line 466 "harbour.y"
    { (yyval.lNumber) = 0; HB_COMP_PARAM->fDontGenLineNum = TRUE; ;}
    break;

  case 101:
#line 467 "harbour.y"
    { (yyval.lNumber) = 1; ;}
    break;

  case 102:
#line 468 "harbour.y"
    { (yyval.lNumber) = 1; ;}
    break;

  case 103:
#line 469 "harbour.y"
    { (yyval.lNumber) = 1; ;}
    break;

  case 104:
#line 470 "harbour.y"
    { (yyval.lNumber) = 0; hb_compCheckUnclosedStru( HB_COMP_PARAM ); ;}
    break;

  case 105:
#line 471 "harbour.y"
    { int iLine = hb_pp_line( HB_COMP_PARAM->pLex->pPP );
                             if( HB_COMP_PARAM->ilastLineErr && HB_COMP_PARAM->ilastLineErr == iLine )
                             {
                                 yyclearin; 
                             }
                             else
                             {
                                 yyerrok;
                                 HB_COMP_PARAM->ilastLineErr = iLine;
                             }
                           ;}
    break;

  case 106:
#line 484 "harbour.y"
    {;}
    break;

  case 107:
#line 485 "harbour.y"
    {;}
    break;

  case 108:
#line 486 "harbour.y"
    {;}
    break;

  case 109:
#line 487 "harbour.y"
    {;}
    break;

  case 114:
#line 496 "harbour.y"
    { (yyval.lNumber) = (yyvsp[(1) - (1)].lNumber); ;}
    break;

  case 115:
#line 497 "harbour.y"
    { (yyval.lNumber) += (yyvsp[(2) - (2)].lNumber); ;}
    break;

  case 116:
#line 500 "harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 117:
#line 501 "harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string) ); ;}
    break;

  case 119:
#line 505 "harbour.y"
    { (yyval.string) = "STEP"; ;}
    break;

  case 120:
#line 506 "harbour.y"
    { (yyval.string) = "TO"; ;}
    break;

  case 121:
#line 507 "harbour.y"
    { (yyval.string) = "LOOP"; ;}
    break;

  case 122:
#line 508 "harbour.y"
    { (yyval.string) = "EXIT"; ;}
    break;

  case 123:
#line 509 "harbour.y"
    { (yyval.string) = "IN"; ;}
    break;

  case 124:
#line 510 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 125:
#line 511 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 126:
#line 512 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 127:
#line 513 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 128:
#line 514 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 129:
#line 515 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 130:
#line 516 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 131:
#line 517 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 132:
#line 518 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 133:
#line 519 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 134:
#line 520 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 135:
#line 525 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewDouble( (yyvsp[(1) - (1)].valDouble).dNumber, (yyvsp[(1) - (1)].valDouble).bWidth, (yyvsp[(1) - (1)].valDouble).bDec, HB_COMP_PARAM ); ;}
    break;

  case 136:
#line 526 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (1)].valLong).lNumber, HB_COMP_PARAM ); ;}
    break;

  case 137:
#line 529 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewDate( (yyvsp[(1) - (1)].valLong).lNumber, HB_COMP_PARAM );
                                    if( (yyvsp[(1) - (1)].valLong).lNumber == 0 )
                                    {
                                       hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INVALID_DATE, HB_COMP_PARAM->pLex->lasttok, NULL );
                                    }
                                 ;}
    break;

  case 138:
#line 537 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (2)].valLong).lNumber, HB_COMP_PARAM ); ;}
    break;

  case 139:
#line 538 "harbour.y"
    { (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, hb_compExprNewDouble( (yyvsp[(1) - (2)].valDouble).dNumber, (yyvsp[(1) - (2)].valDouble).bWidth, (yyvsp[(1) - (2)].valDouble).bDec, HB_COMP_PARAM ) ); ;}
    break;

  case 140:
#line 543 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewNil( HB_COMP_PARAM ); ;}
    break;

  case 142:
#line 551 "harbour.y"
    {
                                 (yyval.asExpr) = hb_compExprNewString( (yyvsp[(1) - (1)].valChar).string, (yyvsp[(1) - (1)].valChar).length, (yyvsp[(1) - (1)].valChar).dealloc, HB_COMP_PARAM );
                                 (yyvsp[(1) - (1)].valChar).dealloc = FALSE;
                              ;}
    break;

  case 145:
#line 567 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLogical( TRUE, HB_COMP_PARAM ); ;}
    break;

  case 146:
#line 568 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLogical( FALSE, HB_COMP_PARAM ); ;}
    break;

  case 148:
#line 576 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewSelf( HB_COMP_PARAM ); ;}
    break;

  case 150:
#line 584 "harbour.y"
    {(yyval.bTrue)=HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_ARRAY;;}
    break;

  case 151:
#line 584 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArray( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->iPassByRef=(yyvsp[(2) - (4)].bTrue); ;}
    break;

  case 153:
#line 592 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 155:
#line 600 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 156:
#line 603 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAlias( (yyvsp[(1) - (2)].string), HB_COMP_PARAM ); ;}
    break;

  case 157:
#line 608 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, '&', (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 158:
#line 609 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, 0, (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 160:
#line 617 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( (yyvsp[(2) - (2)].asExpr), 0, NULL, HB_COMP_PARAM ); ;}
    break;

  case 162:
#line 627 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAlias( "FIELD", HB_COMP_PARAM ); ;}
    break;

  case 163:
#line 628 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(3) - (3)].asExpr); ;}
    break;

  case 164:
#line 633 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 165:
#line 634 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 166:
#line 635 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 167:
#line 636 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 168:
#line 637 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 169:
#line 638 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 170:
#line 639 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 171:
#line 640 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 172:
#line 641 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 173:
#line 642 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 174:
#line 643 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 175:
#line 644 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 176:
#line 645 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 177:
#line 648 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 180:
#line 653 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 181:
#line 654 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 182:
#line 655 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 183:
#line 656 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 184:
#line 657 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 185:
#line 658 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 186:
#line 659 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 187:
#line 660 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 188:
#line 661 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 189:
#line 662 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 190:
#line 663 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 191:
#line 664 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 192:
#line 665 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 193:
#line 666 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 194:
#line 667 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 195:
#line 668 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 196:
#line 669 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 197:
#line 670 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 198:
#line 671 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 199:
#line 680 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 200:
#line 681 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 201:
#line 682 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 202:
#line 683 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 203:
#line 684 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 204:
#line 685 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 205:
#line 690 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 206:
#line 691 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 207:
#line 692 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 208:
#line 693 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 209:
#line 694 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 210:
#line 695 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 211:
#line 696 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 212:
#line 697 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 213:
#line 698 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 214:
#line 699 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 215:
#line 700 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 216:
#line 701 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 217:
#line 702 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 218:
#line 703 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 219:
#line 704 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 220:
#line 705 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 221:
#line 706 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 223:
#line 712 "harbour.y"
    { (yyval.bTrue) = HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL;;}
    break;

  case 224:
#line 712 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( (yyvsp[(1) - (5)].string), HB_COMP_PARAM ), (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->iPassByRef = (yyvsp[(3) - (5)].bTrue); ;}
    break;

  case 226:
#line 716 "harbour.y"
    { (yyval.bTrue) = HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL;;}
    break;

  case 227:
#line 716 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(1) - (5)].asExpr), (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->iPassByRef = (yyvsp[(3) - (5)].bTrue); ;}
    break;

  case 228:
#line 717 "harbour.y"
    { (yyval.bTrue) = HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL;;}
    break;

  case 229:
#line 717 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(1) - (5)].asExpr), (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->iPassByRef = (yyvsp[(3) - (5)].bTrue); ;}
    break;

  case 230:
#line 721 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 232:
#line 727 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 233:
#line 728 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 236:
#line 735 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewVarRef( (yyvsp[(2) - (2)].string), HB_COMP_PARAM ) ); ;}
    break;

  case 237:
#line 736 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); ;}
    break;

  case 238:
#line 737 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); ;}
    break;

  case 239:
#line 738 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); ;}
    break;

  case 240:
#line 739 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr)->value.asList.reference = TRUE; ;}
    break;

  case 241:
#line 742 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); ;}
    break;

  case 243:
#line 748 "harbour.y"
    { (yyval.asExpr) = ((yyvsp[(3) - (3)].asMessage).bMacro ? hb_compExprNewSend( (yyvsp[(1) - (3)].asExpr), NULL, (yyvsp[(3) - (3)].asMessage).value.macro, HB_COMP_PARAM ) : hb_compExprNewSend( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asMessage).value.string, NULL, HB_COMP_PARAM )); ;}
    break;

  case 244:
#line 749 "harbour.y"
    { (yyval.asExpr) = ((yyvsp[(3) - (3)].asMessage).bMacro ? hb_compExprNewSend( (yyvsp[(1) - (3)].asExpr), NULL, (yyvsp[(3) - (3)].asMessage).value.macro, HB_COMP_PARAM ) : hb_compExprNewSend( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asMessage).value.string, NULL, HB_COMP_PARAM )); ;}
    break;

  case 245:
#line 750 "harbour.y"
    {  if( HB_COMP_PARAM->wWithObjectCnt == 0 )
                                                hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_WITHOBJECT, NULL, NULL );
                                             (yyval.asExpr) = ((yyvsp[(2) - (2)].asMessage).bMacro ? hb_compExprNewSend( NULL, NULL, (yyvsp[(2) - (2)].asMessage).value.macro, HB_COMP_PARAM ) : hb_compExprNewSend( NULL, (yyvsp[(2) - (2)].asMessage).value.string, NULL, HB_COMP_PARAM ));
                                          ;}
    break;

  case 246:
#line 756 "harbour.y"
    { (yyval.asMessage).value.string = (yyvsp[(1) - (1)].string); (yyval.asMessage).bMacro=FALSE; ;}
    break;

  case 247:
#line 757 "harbour.y"
    { (yyval.asMessage).value.macro  = (yyvsp[(1) - (1)].asExpr); (yyval.asMessage).bMacro=TRUE;  ;}
    break;

  case 248:
#line 758 "harbour.y"
    { (yyval.asMessage).value.macro  = (yyvsp[(1) - (1)].asExpr); (yyval.asMessage).bMacro=TRUE;  ;}
    break;

  case 249:
#line 761 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(3) - (4)].string), HB_COMP_PARAM ); ;}
    break;

  case 251:
#line 769 "harbour.y"
    {(yyval.bTrue)=HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL;;}
    break;

  case 252:
#line 769 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMethodCall( (yyvsp[(1) - (5)].asExpr), (yyvsp[(4) - (5)].asExpr) ); HB_COMP_PARAM->iPassByRef=(yyvsp[(3) - (5)].bTrue); ;}
    break;

  case 261:
#line 788 "harbour.y"
    {HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 262:
#line 788 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 271:
#line 797 "harbour.y"
    {HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 272:
#line 797 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 275:
#line 800 "harbour.y"
    {HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 276:
#line 800 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 278:
#line 802 "harbour.y"
    {HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 279:
#line 802 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 291:
#line 816 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 292:
#line 816 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 293:
#line 817 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 294:
#line 817 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 296:
#line 821 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); ;}
    break;

  case 298:
#line 825 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewEmpty( HB_COMP_PARAM ); ;}
    break;

  case 300:
#line 829 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 306:
#line 835 "harbour.y"
    { (yyval.asExpr) = hb_compExprListStrip( (yyvsp[(1) - (1)].asExpr), NULL ); ;}
    break;

  case 327:
#line 867 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPostInc( (yyvsp[(0) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 328:
#line 868 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPostDec( (yyvsp[(0) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 329:
#line 871 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 330:
#line 874 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPreInc( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 331:
#line 875 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPreDec( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 332:
#line 878 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewNot( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 333:
#line 879 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewNegate( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 334:
#line 880 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 335:
#line 883 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 336:
#line 884 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 337:
#line 885 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 338:
#line 886 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 339:
#line 887 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 340:
#line 888 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 341:
#line 889 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 342:
#line 890 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 343:
#line 891 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 344:
#line 892 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 345:
#line 893 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 346:
#line 894 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 347:
#line 895 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 348:
#line 896 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->cCastType = HB_COMP_PARAM->cVarType; HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 349:
#line 897 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->cCastType = HB_COMP_PARAM->cVarType; HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 350:
#line 898 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 351:
#line 899 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 352:
#line 900 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 353:
#line 901 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->cCastType = HB_COMP_PARAM->cVarType; HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 354:
#line 902 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 355:
#line 905 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 356:
#line 908 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 357:
#line 911 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 358:
#line 914 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 359:
#line 917 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 360:
#line 920 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 361:
#line 923 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 368:
#line 934 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlus( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 369:
#line 935 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinus( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 370:
#line 936 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMult( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 371:
#line 937 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDiv( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 372:
#line 938 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMod( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 373:
#line 939 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPower( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 374:
#line 942 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewAnd( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 375:
#line 943 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewOr( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 376:
#line 946 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEQ( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 377:
#line 947 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLT( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 378:
#line 948 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGT( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 379:
#line 949 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 380:
#line 950 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 381:
#line 951 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 382:
#line 952 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 383:
#line 953 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewIN( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 384:
#line 954 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEqual( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 386:
#line 963 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(0) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 387:
#line 964 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 388:
#line 965 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(1) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 389:
#line 968 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 390:
#line 969 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 391:
#line 972 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewCodeBlock( (yyvsp[(1) - (1)].asCodeblock).string, (yyvsp[(1) - (1)].asCodeblock).length, (yyvsp[(1) - (1)].asCodeblock).flags, HB_COMP_PARAM ); (yyvsp[(1) - (1)].asCodeblock).string = NULL; ;}
    break;

  case 392:
#line 973 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (6)].asExpr); ;}
    break;

  case 393:
#line 978 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-2) - (1)].asExpr), (yyvsp[(1) - (1)].asExpr) ); ;}
    break;

  case 394:
#line 979 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-2) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 395:
#line 984 "harbour.y"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 396:
#line 985 "harbour.y"
    { (yyval.asExpr) = NULL; (yyvsp[(0) - (1)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; ;}
    break;

  case 397:
#line 986 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr);   ;}
    break;

  case 398:
#line 987 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr);   (yyvsp[(0) - (3)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; ;}
    break;

  case 399:
#line 990 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (2)].asExpr), (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType, HB_COMP_PARAM ); HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 400:
#line 991 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (4)].asExpr), (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType, HB_COMP_PARAM ); HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 410:
#line 1028 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 411:
#line 1031 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 412:
#line 1034 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 413:
#line 1037 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 414:
#line 1038 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 415:
#line 1042 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(3) - (8)].asExpr), HB_COMP_PARAM ), (yyvsp[(5) - (8)].asExpr) ), (yyvsp[(7) - (8)].asExpr) ) ); ;}
    break;

  case 416:
#line 1044 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(2) - (7)].asExpr), HB_COMP_PARAM ), (yyvsp[(4) - (7)].asExpr) ), (yyvsp[(6) - (7)].asExpr) ) ); ;}
    break;

  case 417:
#line 1046 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(2) - (7)].asExpr), HB_COMP_PARAM ), (yyvsp[(4) - (7)].asExpr) ), (yyvsp[(6) - (7)].asExpr) ) ); ;}
    break;

  case 418:
#line 1048 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(2) - (6)].asExpr), HB_COMP_PARAM ), hb_compExprNewEmpty( HB_COMP_PARAM ) ), (yyvsp[(5) - (6)].asExpr) ) ); ;}
    break;

  case 420:
#line 1054 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_LOCAL; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 421:
#line 1055 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 422:
#line 1056 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_STATIC; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 423:
#line 1057 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 424:
#line 1058 "harbour.y"
    { if( HB_COMP_PARAM->functions.pLast->bFlags & FUN_USES_LOCAL_PARAMS )
                             hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_PARAMETERS_NOT_ALLOWED, NULL, NULL );
                          else
                             HB_COMP_PARAM->functions.pLast->wParamNum=0; HB_COMP_PARAM->iVarScope = ( VS_PRIVATE | VS_PARAMETER ); ;}
    break;

  case 425:
#line 1062 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_NONE; ;}
    break;

  case 426:
#line 1065 "harbour.y"
    { (yyval.iNumber) = 1; ;}
    break;

  case 427:
#line 1066 "harbour.y"
    { (yyval.iNumber)++; ;}
    break;

  case 428:
#line 1069 "harbour.y"
    { (yyval.iNumber) = 1; ;}
    break;

  case 429:
#line 1070 "harbour.y"
    { (yyval.iNumber)++; ;}
    break;

  case 431:
#line 1080 "harbour.y"
    { hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), FALSE ); ;}
    break;

  case 432:
#line 1082 "harbour.y"
    { hb_compExprDelete( hb_compExprGenPush( (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                 hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (4)].asExpr), HB_COMP_PARAM ), TRUE );
               ;}
    break;

  case 433:
#line 1086 "harbour.y"
    {
                  USHORT uCount = (USHORT) hb_compExprListLen( (yyvsp[(2) - (2)].asExpr) );
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
                  hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), TRUE );
               ;}
    break;

  case 434:
#line 1093 "harbour.y"
    {
                  USHORT uCount = (USHORT) hb_compExprListLen( (yyvsp[(2) - (3)].asExpr) );
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
                  hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), TRUE );
               ;}
    break;

  case 435:
#line 1101 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 436:
#line 1102 "harbour.y"
    {
                  if( HB_COMP_PARAM->iVarScope == VS_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     hb_compStaticDefEnd( HB_COMP_PARAM );
                     hb_compGenStaticName( (yyvsp[(1) - (3)].string), HB_COMP_PARAM );
                  }
                  else if( HB_COMP_PARAM->iVarScope == VS_PUBLIC || HB_COMP_PARAM->iVarScope == VS_PRIVATE )
                  {
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[(1) - (3)].string), NULL, HB_COMP_PARAM ), FALSE );
                  }
               ;}
    break;

  case 437:
#line 1115 "harbour.y"
    { (yyval.iNumber) = HB_COMP_PARAM->iVarScope;
                                hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType );
                              ;}
    break;

  case 438:
#line 1118 "harbour.y"
    {HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 439:
#line 1119 "harbour.y"
    {
                  HB_COMP_PARAM->cCastType = HB_COMP_PARAM->cVarType;
                  HB_COMP_PARAM->cVarType = ' ';

                  HB_COMP_PARAM->iVarScope = (yyvsp[(3) - (6)].iNumber);
                  if( HB_COMP_PARAM->iVarScope == VS_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     hb_compExprDelete( hb_compExprGenStatement( hb_compExprAssignStatic( hb_compExprNewVar( (yyvsp[(1) - (6)].string), HB_COMP_PARAM ), (yyvsp[(6) - (6)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ), HB_COMP_PARAM );
                     hb_compStaticDefEnd( HB_COMP_PARAM );
                     hb_compGenStaticName( (yyvsp[(1) - (6)].string), HB_COMP_PARAM );
                  }
                  else if( HB_COMP_PARAM->iVarScope == VS_PUBLIC || HB_COMP_PARAM->iVarScope == VS_PRIVATE )
                  {
                     hb_compExprDelete( hb_compExprGenPush( (yyvsp[(6) - (6)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[(1) - (6)].string), NULL, HB_COMP_PARAM ), TRUE );
                  }
                  else
                  {
                     hb_compExprDelete( hb_compExprGenStatement( hb_compExprAssign( hb_compExprNewVar( (yyvsp[(1) - (6)].string), HB_COMP_PARAM ), (yyvsp[(6) - (6)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ), HB_COMP_PARAM );
                  }
                  HB_COMP_PARAM->iVarScope = (yyvsp[(3) - (6)].iNumber);
               ;}
    break;

  case 440:
#line 1143 "harbour.y"
    { hb_compVariableDim( (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 441:
#line 1144 "harbour.y"
    { hb_compVariableDim( (yyvsp[(1) - (3)].string), (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 443:
#line 1153 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 444:
#line 1154 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 445:
#line 1155 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr) ); ;}
    break;

  case 446:
#line 1159 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_FIELD; ;}
    break;

  case 447:
#line 1159 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 448:
#line 1162 "harbour.y"
    { (yyval.iNumber)=hb_compFieldsCount( HB_COMP_PARAM ); hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 449:
#line 1163 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 450:
#line 1164 "harbour.y"
    { hb_compFieldSetAlias( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), (yyvsp[(1) - (3)].iNumber) ); ;}
    break;

  case 451:
#line 1167 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_MEMVAR; ;}
    break;

  case 452:
#line 1167 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 453:
#line 1170 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 454:
#line 1171 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 455:
#line 1174 "harbour.y"
    { hb_compDeclaredAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string) ); HB_COMP_PARAM->szDeclaredFun = (yyvsp[(2) - (3)].string); ;}
    break;

  case 456:
#line 1175 "harbour.y"
    {
               if( HB_COMP_PARAM->pLastDeclared )
               {
                 HB_COMP_PARAM->pLastDeclared->cType = HB_COMP_PARAM->cVarType;

                 if ( toupper( HB_COMP_PARAM->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastDeclared->pClass = hb_compClassFind( HB_COMP_PARAM, HB_COMP_PARAM->szFromClass );
                   if( ! HB_COMP_PARAM->pLastDeclared->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, HB_COMP_PARAM->szFromClass, HB_COMP_PARAM->pLastDeclared->szName );
                     HB_COMP_PARAM->pLastDeclared->cType = ( isupper(  ( int ) HB_COMP_PARAM->cVarType ) ? 'O' : 'o' );
                   }

                   /* Resetting */
                   HB_COMP_PARAM->szFromClass = NULL;
                 }
               }
               HB_COMP_PARAM->szDeclaredFun = NULL;
               HB_COMP_PARAM->cVarType = ' ';
               HB_COMP_PARAM->iVarScope = VS_NONE;
             ;}
    break;

  case 457:
#line 1197 "harbour.y"
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].string) ); ;}
    break;

  case 458:
#line 1197 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_NONE; ;}
    break;

  case 459:
#line 1198 "harbour.y"
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string) ); HB_COMP_PARAM->iVarScope = VS_NONE; ;}
    break;

  case 460:
#line 1199 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_NONE; ;}
    break;

  case 461:
#line 1200 "harbour.y"
    { HB_COMP_PARAM->cDataListType = HB_COMP_PARAM->cVarType; ;}
    break;

  case 462:
#line 1200 "harbour.y"
    { HB_COMP_PARAM->cDataListType = 0; HB_COMP_PARAM->iVarScope = VS_NONE; ;}
    break;

  case 469:
#line 1213 "harbour.y"
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[(1) - (2)].string) ); ;}
    break;

  case 470:
#line 1214 "harbour.y"
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                 HB_COMP_PARAM->pLastMethod->cType = HB_COMP_PARAM->cVarType;
                 if ( toupper( HB_COMP_PARAM->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastMethod->pClass = hb_compClassFind( HB_COMP_PARAM, HB_COMP_PARAM->szFromClass );
                   if( ! HB_COMP_PARAM->pLastMethod->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, HB_COMP_PARAM->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                     HB_COMP_PARAM->pLastMethod->cType = ( isupper(  ( int ) HB_COMP_PARAM->cVarType ) ? 'O' : 'o' );
                   }

                   HB_COMP_PARAM->szFromClass = NULL;
                 }
               }
               HB_COMP_PARAM->pLastMethod = NULL;
               HB_COMP_PARAM->cVarType = ' ';
             ;}
    break;

  case 471:
#line 1235 "harbour.y"
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 472:
#line 1236 "harbour.y"
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                  PCOMCLASS pClass;
                  char szSetData[ HB_SYMBOL_NAME_LEN + 1 ];
                  int iLen;

                  /* List Type overrides if exists. */
                  if( HB_COMP_PARAM->cDataListType ) HB_COMP_PARAM->cVarType = HB_COMP_PARAM->cDataListType;

                  HB_COMP_PARAM->pLastMethod->cType = HB_COMP_PARAM->cVarType;
                  if ( toupper( HB_COMP_PARAM->cVarType ) == 'S' )
                  {
                     pClass = hb_compClassFind( HB_COMP_PARAM, HB_COMP_PARAM->szFromClass );
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                     if( ! HB_COMP_PARAM->pLastMethod->pClass )
                     {
                        hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, HB_COMP_PARAM->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                        HB_COMP_PARAM->pLastMethod->cType = ( isupper(  ( int ) HB_COMP_PARAM->cVarType ) ? 'O' :'o' );
                     }
                  }
                  else
                     pClass = NULL;

                  iLen = strlen( (yyvsp[(1) - (3)].string) );
                  if( iLen >= HB_SYMBOL_NAME_LEN )
                     iLen = HB_SYMBOL_NAME_LEN - 1;
                  szSetData[ 0 ] = '_';
                  memcpy( szSetData + 1, (yyvsp[(1) - (3)].string), iLen );
                  szSetData[ iLen + 1 ] = '\0';

                  HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass,
                     hb_compIdentifierNew( HB_COMP_PARAM, szSetData, HB_IDENT_COPY ) );
                  HB_COMP_PARAM->pLastMethod->cType = HB_COMP_PARAM->cVarType;
                  HB_COMP_PARAM->pLastMethod->iParamCount = 1;

                  /* TOFIX: these allocations causes memory leaks */
                  HB_COMP_PARAM->pLastMethod->cParamTypes = ( BYTE * ) hb_xgrab( 1 );
                  HB_COMP_PARAM->pLastMethod->pParamClasses = ( PCOMCLASS * ) hb_xgrab( sizeof( COMCLASS ) );

                  HB_COMP_PARAM->pLastMethod->cParamTypes[0] = HB_COMP_PARAM->cVarType;
                  HB_COMP_PARAM->pLastMethod->pParamClasses[0] = pClass;

                  if ( toupper( HB_COMP_PARAM->cVarType ) == 'S' )
                  {
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                     HB_COMP_PARAM->szFromClass = NULL;
                  }
               }

               HB_COMP_PARAM->pLastMethod = NULL;
               HB_COMP_PARAM->cVarType = ' ';
             ;}
    break;

  case 473:
#line 1291 "harbour.y"
    {;}
    break;

  case 477:
#line 1297 "harbour.y"
    {;}
    break;

  case 478:
#line 1298 "harbour.y"
    {;}
    break;

  case 479:
#line 1301 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 480:
#line 1304 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 481:
#line 1305 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_BYREF ); ;}
    break;

  case 482:
#line 1306 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (5)].string), 'F' ); ;}
    break;

  case 483:
#line 1307 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 484:
#line 1308 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (5)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_BYREF ); ;}
    break;

  case 485:
#line 1309 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (7)].string), 'F' ); ;}
    break;

  case 486:
#line 1312 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL ); ;}
    break;

  case 487:
#line 1313 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 488:
#line 1314 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (6)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 489:
#line 1315 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (5)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL ); ;}
    break;

  case 490:
#line 1316 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(5) - (6)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 491:
#line 1317 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(5) - (8)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 499:
#line 1329 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (2)].iNumber), HB_COMP_PARAM ); ;}
    break;

  case 500:
#line 1330 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (3)].iNumber), HB_COMP_PARAM ); ;}
    break;

  case 501:
#line 1331 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (3)].iNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (3)].pVoid) ); ;}
    break;

  case 502:
#line 1332 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (4)].iNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (4)].pVoid) ); ;}
    break;

  case 503:
#line 1335 "harbour.y"
    { (yyval.lNumber) = (yyvsp[(1) - (1)].lNumber); ;}
    break;

  case 504:
#line 1336 "harbour.y"
    { (yyval.lNumber) += (yyvsp[(2) - (2)].lNumber); ;}
    break;

  case 505:
#line 1339 "harbour.y"
    { (yyval.lNumber) = 0; ;}
    break;

  case 506:
#line 1340 "harbour.y"
    { (yyval.lNumber) = (yyvsp[(1) - (1)].lNumber); ;}
    break;

  case 507:
#line 1344 "harbour.y"
    { ++HB_COMP_PARAM->wIfCounter; hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 508:
#line 1346 "harbour.y"
    { hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); (yyval.iNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM ); ;}
    break;

  case 509:
#line 1348 "harbour.y"
    { (yyval.iNumber) = hb_compGenJump( 0, HB_COMP_PARAM ); hb_compGenJumpHere( (yyvsp[(5) - (6)].iNumber), HB_COMP_PARAM ); ;}
    break;

  case 515:
#line 1358 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 517:
#line 1362 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 518:
#line 1364 "harbour.y"
    { hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
                ;}
    break;

  case 519:
#line 1368 "harbour.y"
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(5) - (6)].iNumber), HB_COMP_PARAM );
                ;}
    break;

  case 520:
#line 1372 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 521:
#line 1374 "harbour.y"
    { hb_compExprDelete( hb_compExprGenPush( (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
                ;}
    break;

  case 522:
#line 1378 "harbour.y"
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[(1) - (7)].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(6) - (7)].iNumber), HB_COMP_PARAM );
                ;}
    break;

  case 523:
#line 1383 "harbour.y"
    { if( HB_COMP_PARAM->wIfCounter )
                           --HB_COMP_PARAM->wIfCounter; 
                        HB_COMP_PARAM->functions.pLast->bFlags &= ~ ( /*FUN_WITH_RETURN |*/ FUN_BREAK_CODE ); ;}
    break;

  case 524:
#line 1386 "harbour.y"
    { if( HB_COMP_PARAM->wIfCounter )
                           --HB_COMP_PARAM->wIfCounter; 
                        HB_COMP_PARAM->functions.pLast->bFlags &= ~ ( /*FUN_WITH_RETURN |*/ FUN_BREAK_CODE ); ;}
    break;

  case 525:
#line 1393 "harbour.y"
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (3)].pVoid) ); ;}
    break;

  case 528:
#line 1405 "harbour.y"
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (4)].pVoid) ); ;}
    break;

  case 529:
#line 1409 "harbour.y"
    { if( HB_COMP_PARAM->wCaseCounter )
                    --HB_COMP_PARAM->wCaseCounter;
                 HB_COMP_PARAM->functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );
               ;}
    break;

  case 530:
#line 1414 "harbour.y"
    { if( HB_COMP_PARAM->wCaseCounter )
                  --HB_COMP_PARAM->wCaseCounter;
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );
               ;}
    break;

  case 531:
#line 1420 "harbour.y"
    { ++HB_COMP_PARAM->wCaseCounter; hb_compLinePushIfDebugger( HB_COMP_PARAM );;}
    break;

  case 533:
#line 1423 "harbour.y"
    { ;}
    break;

  case 534:
#line 1424 "harbour.y"
    {
                        if( (yyvsp[(2) - (2)].lNumber) > 0 )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                        }
                     ;}
    break;

  case 535:
#line 1432 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 536:
#line 1433 "harbour.y"
    {
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               ;}
    break;

  case 537:
#line 1438 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(5) - (6)].iNumber), HB_COMP_PARAM );
               ;}
    break;

  case 538:
#line 1444 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 539:
#line 1445 "harbour.y"
    {
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               ;}
    break;

  case 540:
#line 1450 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[(1) - (7)].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(6) - (7)].iNumber), HB_COMP_PARAM );
               ;}
    break;

  case 541:
#line 1457 "harbour.y"
    {hb_compLinePushIfDebugger( HB_COMP_PARAM ); ;}
    break;

  case 542:
#line 1457 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 544:
#line 1459 "harbour.y"
    { hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL ); ;}
    break;

  case 546:
#line 1464 "harbour.y"
    {
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  (yyval.lNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               ;}
    break;

  case 547:
#line 1469 "harbour.y"
    {
                  hb_compLoopHere( HB_COMP_PARAM );
                  hb_compGenJump( (yyvsp[(1) - (5)].lNumber) - HB_COMP_PARAM->functions.pLast->lPCodePos, HB_COMP_PARAM );
               ;}
    break;

  case 548:
#line 1474 "harbour.y"
    {
                  hb_compGenJumpHere( (yyvsp[(4) - (7)].lNumber), HB_COMP_PARAM ); 
                  if( HB_COMP_PARAM->wWhileCounter )
                     --HB_COMP_PARAM->wWhileCounter;
                  hb_compLoopEnd( HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                ;}
    break;

  case 549:
#line 1483 "harbour.y"
    { (yyval.lNumber) = HB_COMP_PARAM->functions.pLast->lPCodePos; hb_compLinePushIfInside( HB_COMP_PARAM ); ++HB_COMP_PARAM->wWhileCounter; hb_compLoopStart( HB_COMP_PARAM ); ;}
    break;

  case 550:
#line 1486 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 551:
#line 1487 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 552:
#line 1491 "harbour.y"
    {
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compDebugStart();
                  ++HB_COMP_PARAM->wForCounter;              /* 5 */
                  (yyval.asExpr) = hb_compExprGenStatement( hb_compExprAssign( (yyvsp[(2) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  if( hb_compExprAsSymbol((yyvsp[(2) - (4)].asExpr)) )
                  {
                     hb_compForStart( HB_COMP_PARAM, hb_compExprAsSymbol((yyvsp[(2) - (4)].asExpr)), FALSE );
                  }
               ;}
    break;

  case 553:
#line 1502 "harbour.y"
    {
                  hb_compLoopStart( HB_COMP_PARAM );
                  (yyval.lNumber) = hb_compGenJump( 0, HB_COMP_PARAM );  /* 9 */
               ;}
    break;

  case 554:
#line 1507 "harbour.y"
    {
                  (yyval.lNumber) = HB_COMP_PARAM->functions.pLast->lPCodePos;  /* 11 */
               ;}
    break;

  case 555:
#line 1511 "harbour.y"
    {
                  short iStep, iLocal;

                  hb_compLoopHere( HB_COMP_PARAM );

                  if( (yyvsp[(8) - (12)].asExpr) )
                  {
                     if( hb_compExprIsInteger((yyvsp[(8) - (12)].asExpr)) )
                        iStep = hb_compExprAsInteger((yyvsp[(8) - (12)].asExpr));
                     else
                        iStep = 0;
                  }
                  else
                  {
                     iStep = 1;
                  }

                  if( iStep && ( iLocal = hb_compLocalGetPos( HB_COMP_PARAM, hb_compExprAsSymbol((yyvsp[(2) - (12)].asExpr)) ) ) > 0 )
                  {
                     BYTE buffer[ 5 ];
                     buffer[ 0 ] = HB_P_LOCALADDINT;
                     buffer[ 1 ] = HB_LOBYTE( iLocal );
                     buffer[ 2 ] = HB_HIBYTE( iLocal );
                     buffer[ 3 ] = HB_LOBYTE( iStep );
                     buffer[ 4 ] = HB_HIBYTE( iStep );
                     hb_compGenPCodeN( buffer, 5, HB_COMP_PARAM );
                  }
                  else if( (yyvsp[(8) - (12)].asExpr) )
                  {
                     hb_compExprClear( hb_compExprGenStatement( hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(2) - (12)].asExpr), HB_COMP_PARAM ), (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ), HB_COMP_PARAM );
                  }
                  else
                  {
                     hb_compExprClear( hb_compExprGenStatement( hb_compExprNewPreInc( (yyvsp[(2) - (12)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ), HB_COMP_PARAM );
                  }

                  hb_compGenJumpHere( (yyvsp[(9) - (12)].lNumber), HB_COMP_PARAM );

                  hb_compExprGenPush( (yyvsp[(2) - (12)].asExpr), HB_COMP_PARAM );              /* counter */
                  hb_compExprGenPush( (yyvsp[(7) - (12)].asExpr), HB_COMP_PARAM );              /* end */
                  if( (yyvsp[(8) - (12)].asExpr) )
                  {
                     hb_compExprGenPush( (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM );   /* step */
                     hb_compGenPCode1( HB_P_FORTEST, HB_COMP_PARAM );
                  }
                  else
                     hb_compGenPCode1( HB_P_GREATER, HB_COMP_PARAM );

                  hb_compGenJumpFalse( (yyvsp[(11) - (12)].lNumber) - HB_COMP_PARAM->functions.pLast->lPCodePos, HB_COMP_PARAM );
                  hb_compLoopEnd( HB_COMP_PARAM );
                  if( hb_compExprAsSymbol((yyvsp[(2) - (12)].asExpr)) )
                  {
                     hb_compForEnd( HB_COMP_PARAM, hb_compExprAsSymbol((yyvsp[(2) - (12)].asExpr)) );
                  }
                  hb_compExprDelete( (yyvsp[(7) - (12)].asExpr), HB_COMP_PARAM );
                  hb_compExprDelete( (yyvsp[(5) - (12)].asExpr), HB_COMP_PARAM ); /* deletes $5, $2, $4 */
                  if( (yyvsp[(8) - (12)].asExpr) )
                     hb_compExprDelete( (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
               ;}
    break;

  case 558:
#line 1577 "harbour.y"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 559:
#line 1578 "harbour.y"
    { (yyval.asExpr) = hb_compExprReduce( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 560:
#line 1581 "harbour.y"
    { hb_compLinePush( HB_COMP_PARAM ); 
                                                      if( HB_COMP_PARAM->wForCounter )
                                                         --HB_COMP_PARAM->wForCounter; ;}
    break;

  case 561:
#line 1584 "harbour.y"
    { hb_compLinePush( HB_COMP_PARAM );
                                                      if( HB_COMP_PARAM->wForCounter )
                                                         --HB_COMP_PARAM->wForCounter; ;}
    break;

  case 562:
#line 1587 "harbour.y"
    { hb_compLinePush( HB_COMP_PARAM );
                                                      if( HB_COMP_PARAM->wForCounter )
                                                         --HB_COMP_PARAM->wForCounter; ;}
    break;

  case 563:
#line 1590 "harbour.y"
    { hb_compLinePush( HB_COMP_PARAM );
                                                      if( HB_COMP_PARAM->wForCounter )
                                                         --HB_COMP_PARAM->wForCounter; ;}
    break;

  case 564:
#line 1595 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 565:
#line 1596 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewRef( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 566:
#line 1599 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 567:
#line 1600 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 568:
#line 1603 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(2) - (2)].string), HB_COMP_PARAM ); ;}
    break;

  case 570:
#line 1607 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 571:
#line 1608 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 572:
#line 1613 "harbour.y"
    {
                ++HB_COMP_PARAM->wForCounter;              /* 5 */
                hb_compLinePushIfInside( HB_COMP_PARAM );
                hb_compDebugStart();
             ;}
    break;

  case 573:
#line 1619 "harbour.y"
    {
                /* 7
                */
                hb_compEnumStart( HB_COMP_PARAM, (yyvsp[(2) - (6)].asExpr), (yyvsp[(4) - (6)].asExpr), (yyvsp[(6) - (6)].iNumber) );
                
                hb_compLoopStart( HB_COMP_PARAM );
                (yyval.lNumber) = HB_COMP_PARAM->functions.pLast->lPCodePos;
             ;}
    break;

  case 574:
#line 1628 "harbour.y"
    {
                /* 9
                */
                (yyval.lNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
             ;}
    break;

  case 575:
#line 1634 "harbour.y"
    {
                hb_compLoopHere( HB_COMP_PARAM );
                hb_compEnumNext( HB_COMP_PARAM, (yyvsp[(2) - (10)].asExpr), (yyvsp[(6) - (10)].iNumber) );
                hb_compGenJump( (yyvsp[(7) - (10)].lNumber) - HB_COMP_PARAM->functions.pLast->lPCodePos, HB_COMP_PARAM );

                hb_compGenJumpHere( (yyvsp[(9) - (10)].lNumber), HB_COMP_PARAM );
                hb_compLoopEnd( HB_COMP_PARAM );
                HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                hb_compEnumEnd( HB_COMP_PARAM, (yyvsp[(2) - (10)].asExpr) );
                hb_compExprDelete( (yyvsp[(2) - (10)].asExpr), HB_COMP_PARAM );
                hb_compExprDelete( (yyvsp[(4) - (10)].asExpr), HB_COMP_PARAM );
             ;}
    break;

  case 576:
#line 1648 "harbour.y"
    { (yyval.iNumber) =  1; ;}
    break;

  case 577:
#line 1649 "harbour.y"
    { (yyval.iNumber) = -1; ;}
    break;

  case 578:
#line 1653 "harbour.y"
    {
                hb_compLoopStart( HB_COMP_PARAM );
                hb_compSwitchStart( HB_COMP_PARAM );
                hb_compGenJump( 0, HB_COMP_PARAM );
             ;}
    break;

  case 579:
#line 1660 "harbour.y"
    {
                hb_compSwitchEnd( HB_COMP_PARAM );
                hb_compLoopEnd( HB_COMP_PARAM );
             ;}
    break;

  case 580:
#line 1667 "harbour.y"
    {
                hb_compGenPCode1( HB_P_POP, HB_COMP_PARAM );
             ;}
    break;

  case 581:
#line 1673 "harbour.y"
    { if( HB_COMP_PARAM->wSwitchCounter )
                  --HB_COMP_PARAM->wSwitchCounter; 
                HB_COMP_PARAM->functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );
             ;}
    break;

  case 582:
#line 1680 "harbour.y"
    { ++HB_COMP_PARAM->wSwitchCounter; 
                 hb_compLinePushIfInside( HB_COMP_PARAM );
              ;}
    break;

  case 583:
#line 1684 "harbour.y"
    {
                 hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
              ;}
    break;

  case 584:
#line 1689 "harbour.y"
    { ;}
    break;

  case 585:
#line 1690 "harbour.y"
    {
                        if( (yyvsp[(2) - (2)].lNumber) > 0 )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                        }
                     ;}
    break;

  case 586:
#line 1698 "harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 588:
#line 1701 "harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 592:
#line 1709 "harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, NULL ); hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 593:
#line 1709 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 595:
#line 1714 "harbour.y"
    {
                  ++HB_COMP_PARAM->wSeqCounter;
                  hb_compStatmentStart( HB_COMP_PARAM );
                  (yyval.lNumber) = hb_compSequenceBegin( HB_COMP_PARAM );
               ;}
    break;

  case 596:
#line 1721 "harbour.y"
    {
                  /* Set jump address for HB_P_SEQBEGIN opcode - this address
                   * will be used in BREAK code if there is no RECOVER clause
                   */
                  hb_compGenJumpHere( (yyvsp[(2) - (4)].lNumber), HB_COMP_PARAM );
                  (yyval.lNumber) = hb_compSequenceEnd( HB_COMP_PARAM );
               ;}
    break;

  case 597:
#line 1729 "harbour.y"
    {
                  /* Replace END address with RECOVER address in
                   * HB_P_SEQBEGIN opcode if there is RECOVER clause
                   */
                  if( (yyvsp[(6) - (6)].lNumber) )
                     hb_compGenJumpThere( (yyvsp[(2) - (6)].lNumber), (yyvsp[(6) - (6)].lNumber), HB_COMP_PARAM );
               ;}
    break;

  case 598:
#line 1737 "harbour.y"
    {
                  /* Fix END address
                   * There is no line number after HB_P_SEQEND in case no
                   * RECOVER clause is used
                   */
                  hb_compGenJumpThere( (yyvsp[(5) - (8)].lNumber), HB_COMP_PARAM->functions.pLast->lPCodePos, HB_COMP_PARAM );
                  if( !(yyvsp[(6) - (8)].lNumber) && HB_COMP_PARAM->wSeqCounter )   /* only if there is no RECOVER clause */
                     --HB_COMP_PARAM->wSeqCounter;  /* RECOVER is also considered as end of sequence */
                  hb_compSequenceFinish( (yyvsp[(2) - (8)].lNumber), (yyvsp[(4) - (8)].lNumber), HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
               ;}
    break;

  case 599:
#line 1750 "harbour.y"
    { (yyval.lNumber) = 0; ;}
    break;

  case 602:
#line 1756 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.lNumber) = HB_COMP_PARAM->functions.pLast->lPCodePos;
                  if( HB_COMP_PARAM->wSeqCounter )
                     --HB_COMP_PARAM->wSeqCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode2( HB_P_SEQRECOVER, HB_P_POP, HB_COMP_PARAM );
               ;}
    break;

  case 603:
#line 1767 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.lNumber) = HB_COMP_PARAM->functions.pLast->lPCodePos;
                  if( HB_COMP_PARAM->wSeqCounter )
                     --HB_COMP_PARAM->wSeqCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode1( HB_P_SEQRECOVER, HB_COMP_PARAM );
                  hb_compGenPopVar( (yyvsp[(2) - (2)].string), HB_COMP_PARAM );
               ;}
    break;

  case 606:
#line 1789 "harbour.y"
    {  (yyval.bTrue) = HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL; ;}
    break;

  case 607:
#line 1791 "harbour.y"
    {
                  (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(2) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM );
                  HB_COMP_PARAM->iPassByRef = (yyvsp[(3) - (4)].bTrue);
               ;}
    break;

  case 608:
#line 1796 "harbour.y"
    {  (yyval.bTrue) = HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL; ;}
    break;

  case 609:
#line 1798 "harbour.y"
    {
                  hb_compAutoOpenAdd( HB_COMP_PARAM, (yyvsp[(1) - (3)].string) );
                  /* DOIDENT is the only one identifier which can be returned in lower letters */
                  (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( hb_compIdentifierNew( HB_COMP_PARAM, hb_strupr( hb_strdup( (yyvsp[(1) - (3)].string) ) ), HB_IDENT_FREE ), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM );
                  HB_COMP_PARAM->iPassByRef = (yyvsp[(2) - (3)].bTrue);
               ;}
    break;

  case 610:
#line 1806 "harbour.y"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 611:
#line 1807 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 612:
#line 1810 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), hb_compExprNewNil( HB_COMP_PARAM ) ); ;}
    break;

  case 613:
#line 1811 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 614:
#line 1812 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 615:
#line 1813 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (2)].asExpr), hb_compExprNewNil( HB_COMP_PARAM ) ); ;}
    break;

  case 616:
#line 1814 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 617:
#line 1817 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 622:
#line 1825 "harbour.y"
    {
                  hb_compLinePushIfInside( HB_COMP_PARAM ); 
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  hb_compGenPCode1( HB_P_WITHOBJECTSTART, HB_COMP_PARAM );
                  HB_COMP_PARAM->wWithObjectCnt++;
               ;}
    break;

  case 623:
#line 1833 "harbour.y"
    { if( HB_COMP_PARAM->wWithObjectCnt )
                    --HB_COMP_PARAM->wWithObjectCnt;
                  hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
               ;}
    break;

  case 624:
#line 1837 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (4)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 625:
#line 1840 "harbour.y"
    { HB_COMP_PARAM->fError = FALSE; ;}
    break;

  case 626:
#line 1841 "harbour.y"
    { HB_COMP_PARAM->fDontGenLineNum = TRUE; ;}
    break;


/* Line 1267 of yacc.c.  */
#line 6920 "harboury.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (pComp, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (pComp, yymsg);
	  }
	else
	  {
	    yyerror (pComp, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, pComp);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, pComp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (pComp, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, pComp);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, pComp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 1844 "harbour.y"


/*
 ** ------------------------------------------------------------------------ **
 */

/*
 * Avoid tracing in preprocessor/compiler.
 */
#if ! defined(HB_TRACE_UTILS)
   #if defined(HB_TRACE_LEVEL)
      #undef HB_TRACE_LEVEL
   #endif
#endif


/* ************************************************************************* */

/*
 * This function stores the position in pcode buffer where the FOR/WHILE
 * loop starts. It will be used to fix any LOOP/EXIT statements
 */
static void hb_compLoopStart( HB_COMP_DECL )
{
   HB_LOOPEXIT_PTR pLoop = ( HB_LOOPEXIT_PTR ) hb_xgrab( sizeof( HB_LOOPEXIT ) );

   if( HB_COMP_PARAM->pLoops )
   {
      HB_LOOPEXIT_PTR pLast = HB_COMP_PARAM->pLoops;

      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pLoop;
   }
   else
      HB_COMP_PARAM->pLoops = pLoop;

   pLoop->pNext       = NULL;
   pLoop->pExitList   = NULL;
   pLoop->pLoopList   = NULL;
   pLoop->ulOffset    = HB_COMP_PARAM->functions.pLast->lPCodePos;  /* store the start position */
   pLoop->wSeqCounter = HB_COMP_PARAM->wSeqCounter;  /* store current SEQUENCE counter */
}

/*
 * Stores the position of LOOP statement to fix it later at the end of loop
 */
static void hb_compLoopLoop( HB_COMP_DECL )
{
   if( ! HB_COMP_PARAM->pLoops )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "LOOP", NULL );
   }
   else
   {
      HB_LOOPEXIT_PTR pLast, pLoop;

      pLoop = ( HB_LOOPEXIT_PTR ) hb_xgrab( sizeof( HB_LOOPEXIT ) );

      pLoop->pLoopList = NULL;
      pLoop->ulOffset = HB_COMP_PARAM->functions.pLast->lPCodePos;  /* store the position to fix */

      pLast = HB_COMP_PARAM->pLoops;
      while( pLast->pNext )
         pLast = pLast->pNext;

      if( pLast->wSeqCounter != HB_COMP_PARAM->wSeqCounter )
      {
         /* Attempt to LOOP from BEGIN/END sequence
         * Current SEQUENCE counter is different then at the beginning of loop
         * Notice that LOOP is allowed in RECOVER code.
         */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else
      {
         while( pLast->pLoopList )
            pLast = pLast->pLoopList;

         pLast->pLoopList = pLoop;

         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Stores the position of EXIT statement to fix it later at the end of loop
 */
static void hb_compLoopExit( HB_COMP_DECL )
{
   if( ! HB_COMP_PARAM->pLoops )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "EXIT", NULL );
   }
   else
   {
      HB_LOOPEXIT_PTR pLast, pLoop;

      pLoop = ( HB_LOOPEXIT_PTR ) hb_xgrab( sizeof( HB_LOOPEXIT ) );

      pLoop->pExitList = NULL;
      pLoop->ulOffset = HB_COMP_PARAM->functions.pLast->lPCodePos;  /* store the position to fix */

      pLast = HB_COMP_PARAM->pLoops;
      while( pLast->pNext )
         pLast = pLast->pNext;

      if( pLast->wSeqCounter != HB_COMP_PARAM->wSeqCounter )
      {
         /* Attempt to LOOP from BEGIN/END sequence
         * Current SEQUENCE counter is different then at the beginning of loop
         * Notice that LOOP is allowed in RECOVER code.
         */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else
      {
         while( pLast->pExitList )
            pLast = pLast->pExitList;

         pLast->pExitList = pLoop;

         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Fixes the LOOP statement
 */
static void hb_compLoopHere( HB_COMP_DECL )
{
   HB_LOOPEXIT_PTR pLoop = HB_COMP_PARAM->pLoops, pFree, pLast;

   if( pLoop )
   {
      while( pLoop->pNext )
         pLoop = pLoop->pNext;

      pLast = pLoop;
      pLoop = pLoop->pLoopList;
      while( pLoop )
      {
         hb_compGenJumpHere( pLoop->ulOffset + 1, HB_COMP_PARAM );
         pFree = pLoop;
         pLoop = pLoop->pLoopList;
         hb_xfree( ( void * ) pFree );
      }
      pLast->pLoopList = NULL;
   }
}

/*
 * Fixes the EXIT statements and releases memory allocated for current loop
 */
static void hb_compLoopEnd( HB_COMP_DECL )
{
   HB_LOOPEXIT_PTR pExit, pLoop = HB_COMP_PARAM->pLoops, pLast = HB_COMP_PARAM->pLoops, pFree;

   if( pLoop )
   {
      while( pLoop->pNext )
      {
         pLast = pLoop;
         pLoop = pLoop->pNext;
      }

      pExit = pLoop->pExitList;
      while( pExit )
      {
         hb_compGenJumpHere( pExit->ulOffset + 1, HB_COMP_PARAM );
         pFree = pExit;
         pExit = pExit->pExitList;
         hb_xfree( ( void * ) pFree );
      }

      pLast->pNext = NULL;
      if( pLoop == HB_COMP_PARAM->pLoops )
         HB_COMP_PARAM->pLoops = NULL;
      hb_xfree( ( void * ) pLoop );
   }
}

void hb_compLoopKill( HB_COMP_DECL )
{
   HB_LOOPEXIT_PTR pLoop;
   HB_LOOPEXIT_PTR pExit;
   
   while( HB_COMP_PARAM->pLoops )   
   {
      pLoop = HB_COMP_PARAM->pLoops;
      while( pLoop->pExitList )
      {
         pExit = pLoop->pExitList;
         pLoop->pExitList = pExit->pExitList;
         hb_xfree( ( void * ) pExit );
      }
      HB_COMP_PARAM->pLoops = pLoop->pNext;
      hb_xfree( ( void * ) pLoop );
   }
}

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirst, ULONG ulOffset )
{
   HB_ELSEIF_PTR pElseIf = ( HB_ELSEIF_PTR ) hb_xgrab( sizeof( HB_ELSEIF ) ), pLast;

   pElseIf->ulOffset = ulOffset;
   pElseIf->pPrev   = NULL;
   pElseIf->pElseif = NULL;

   if( pFirst )
   {
      pLast = ( HB_ELSEIF_PTR ) pFirst;
      while( pLast->pElseif )
         pLast = pLast->pElseif;
      pLast->pElseif = pElseIf;
   }
   else
   {
      if( HB_COMP_PARAM->elseif )
      {
         pElseIf->pPrev = HB_COMP_PARAM->elseif;
      }
      pFirst = pElseIf;
      HB_COMP_PARAM->elseif = pElseIf;
   }
   return pFirst;
}


static void hb_compElseIfFix( HB_COMP_DECL, void * pFixElseIfs )
{
   HB_ELSEIF_PTR pFix = ( HB_ELSEIF_PTR ) pFixElseIfs;
   HB_ELSEIF_PTR pDel;
   
   HB_COMP_PARAM->elseif = pFix->pPrev;
   while( pFix )
   {
      hb_compGenJumpHere( pFix->ulOffset, HB_COMP_PARAM );
      pDel = pFix;
      pFix = pFix->pElseif;
      hb_xfree( pDel );
   }
}

void hb_compElseIfKill( HB_COMP_DECL )
{
   HB_ELSEIF_PTR pFix;
   HB_ELSEIF_PTR pDel;
   
   while( HB_COMP_PARAM->elseif )
   {
      pFix = HB_COMP_PARAM->elseif;
      HB_COMP_PARAM->elseif = pFix->pPrev;
      while( pFix )
      {
         pDel = pFix;
         pFix = pFix->pElseif;
         hb_xfree( pDel );
      }
   }
}

static void hb_compRTVariableAdd( HB_COMP_DECL, HB_EXPR_PTR pVar, BOOL bPopInitValue )
{
   HB_RTVAR_PTR pRTvar = ( HB_RTVAR_PTR ) hb_xgrab( sizeof( HB_RTVAR ) );

   pRTvar->pVar = pVar;
   pRTvar->bPopValue = bPopInitValue;
   pRTvar->pNext = NULL;
   pRTvar->pPrev = NULL;

   if( HB_COMP_PARAM->rtvars )
   {
      HB_RTVAR_PTR pLast = HB_COMP_PARAM->rtvars;
      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pRTvar;
      pRTvar->pPrev = pLast;
   }
   else
      HB_COMP_PARAM->rtvars = pRTvar;
}

static void hb_compRTVariableGen( HB_COMP_DECL, char * szCreateFun )
{
   USHORT usCount = 0;
   HB_RTVAR_PTR pVar = HB_COMP_PARAM->rtvars;
   HB_RTVAR_PTR pDel;

   /* generate the function call frame */
   hb_compGenPushSymbol( szCreateFun, TRUE, FALSE, HB_COMP_PARAM );
   hb_compGenPushNil( HB_COMP_PARAM );

   /* push variable names to create */
   while( pVar->pNext )
   {
      hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
      pVar = pVar->pNext;
      ++usCount;
   }
   hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
   ++usCount;

   /* call function that will create either PUBLIC or PRIVATE variables */
   if( usCount > 255 )
      hb_compGenPCode3( HB_P_DO, HB_LOBYTE( usCount ), HB_HIBYTE( usCount ), HB_COMP_PARAM );
   else
      hb_compGenPCode2( HB_P_DOSHORT, ( BYTE ) usCount, HB_COMP_PARAM );

   /* pop initial values */
   while( pVar )
   {
      if( pVar->bPopValue )
         hb_compExprDelete( hb_compExprGenPop( pVar->pVar, HB_COMP_PARAM ), HB_COMP_PARAM );
      else
         hb_compExprDelete( pVar->pVar, HB_COMP_PARAM );
      pDel = pVar;
      pVar = pVar->pPrev;
      hb_xfree( pDel );
   }
   HB_COMP_PARAM->rtvars = NULL;
}

void hb_compRTVariableKill( HB_COMP_DECL )
{
   HB_RTVAR_PTR pVar;
   
   while( HB_COMP_PARAM->rtvars )
   {
      pVar = HB_COMP_PARAM->rtvars;

      hb_compExprDelete( pVar->pVar, HB_COMP_PARAM );
      HB_COMP_PARAM->rtvars = pVar->pPrev;
      hb_xfree( pVar );
   }
   HB_COMP_PARAM->rtvars = NULL;
}

static void hb_compVariableDim( char * szName, HB_EXPR_PTR pInitValue, HB_COMP_DECL )
{
  if( HB_COMP_PARAM->iVarScope == VS_PUBLIC || HB_COMP_PARAM->iVarScope == VS_PRIVATE )
  {
     USHORT uCount = (USHORT) hb_compExprListLen( pInitValue );
     hb_compVariableAdd( HB_COMP_PARAM, szName, 'A' );
     hb_compExprDelete( hb_compExprGenPush( pInitValue, HB_COMP_PARAM ), HB_COMP_PARAM );
     hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( szName, NULL, HB_COMP_PARAM ), TRUE );
  }
  else if( HB_COMP_PARAM->iVarScope == VS_STATIC )
  {
     USHORT uCount = (USHORT) hb_compExprListLen( pInitValue );
     HB_EXPR_PTR pVar = hb_compExprNewVar( szName, HB_COMP_PARAM );
     HB_EXPR_PTR pAssign;

     /* create a static variable */
     hb_compVariableAdd( HB_COMP_PARAM, szName, 'A' );
     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
     /* create an array */
     hb_compExprGenPush( pInitValue, HB_COMP_PARAM );
     hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
     /* check if valid initializers were used but don't generate any code */
     pAssign = hb_compExprAssignStatic( pVar, pInitValue, HB_COMP_PARAM );
     /* now pop an array */
     hb_compExprGenPop( pVar, HB_COMP_PARAM );
     /* delete all used expressions */
     hb_compExprDelete( pAssign, HB_COMP_PARAM );
     hb_compStaticDefEnd( HB_COMP_PARAM );
  }
  else
  {
     USHORT uCount = (USHORT) hb_compExprListLen( pInitValue );

     hb_compVariableAdd( HB_COMP_PARAM, szName, 'A' );
     hb_compExprDelete( hb_compExprGenPush( pInitValue, HB_COMP_PARAM ), HB_COMP_PARAM );
     hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
     hb_compExprDelete( hb_compExprGenPop( hb_compExprNewVar( szName, HB_COMP_PARAM ), HB_COMP_PARAM ), HB_COMP_PARAM );
  }
}

static void hb_compForStart( HB_COMP_DECL, char *szVarName, BOOL bForEach )
{
   HB_ENUMERATOR_PTR pEnumVar;
   
   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar == NULL )
   {
      HB_COMP_PARAM->functions.pLast->pEnum = (HB_ENUMERATOR_PTR) hb_xgrab( sizeof(HB_ENUMERATOR) );
      pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   }
   else
   {
      BOOL bWarn = TRUE;
      HB_ENUMERATOR_PTR pLast = pEnumVar;

      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            /* Enumerator variable exists already - throw warning */
            if( bWarn == TRUE )
            {
               hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_FORVAR_DUPL, szVarName, NULL );
               bWarn = FALSE;
            }
         }
         pLast = pEnumVar;
         pEnumVar = pEnumVar->pNext;
      }
      pLast->pNext = (HB_ENUMERATOR_PTR) hb_xgrab( sizeof( HB_ENUMERATOR ) );
      pEnumVar = pLast->pNext;
   }
   pEnumVar->szName   = szVarName;
   pEnumVar->bForEach = bForEach;
   pEnumVar->pNext    = NULL;
}

BOOL hb_compForEachVarError( HB_COMP_DECL, char *szVarName )
{
   HB_ENUMERATOR_PTR pEnumVar;
   
   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar )
   {
      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            if( pEnumVar->bForEach )
            {
               /* only if it is FOR EACH enumerator 
                * generate warning if it is FOR/NEXT loop
               */
               return FALSE;
            }
         }
         pEnumVar = pEnumVar->pNext;
      }
   }

   hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_ENUM_INVALID, szVarName, NULL );
   return TRUE;            
}

static void hb_compForEnd( HB_COMP_DECL, char *szVar )
{
   HB_ENUMERATOR_PTR pEnumVar;
   
   HB_SYMBOL_UNUSED( HB_COMP_PARAM );
   HB_SYMBOL_UNUSED( szVar );
   
   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar->pNext )
   {
      HB_ENUMERATOR_PTR pLast = pEnumVar;
      
      while( pEnumVar->pNext )
      {
         pLast = pEnumVar;
         pEnumVar = pEnumVar->pNext;
      }
      hb_xfree( pEnumVar );
      pLast->pNext = NULL;
   }
   else
   {
      hb_xfree( pEnumVar );
      HB_COMP_PARAM->functions.pLast->pEnum = NULL;
   }
}

static HB_CARGO2_FUNC( hb_compEnumEvalStart )
{
   char * szName = hb_compExprAsSymbol( (HB_EXPR_PTR)cargo );
   if( szName )
      hb_compForStart( HB_COMP_PARAM, szName, TRUE );

   hb_compExprGenPush( (HB_EXPR_PTR)dummy, HB_COMP_PARAM );  /* expression */
   hb_compExprGenPush( (HB_EXPR_PTR)cargo, HB_COMP_PARAM );  /* variable */
}

static void hb_compEnumStart( HB_COMP_DECL, HB_EXPR_PTR pVars, HB_EXPR_PTR pExprs, int descend )
{
   ULONG ulLen;
   
   if( hb_compExprListLen(pVars) != hb_compExprListLen(pExprs) )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_DIFF, NULL, NULL );
   }

   ulLen = hb_compExprListEval2( HB_COMP_PARAM, pVars, pExprs, hb_compEnumEvalStart );
   
   if( ulLen > 255 )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_TOOMANY, NULL, NULL );
   }
   else
   {
      BYTE Len;
      Len = (BYTE) (ulLen & 0xFF);
      hb_compGenPCode3( HB_P_ENUMSTART, Len, descend > 0 ? 1 : 0, HB_COMP_PARAM );
   }
}

static void hb_compEnumNext( HB_COMP_DECL, HB_EXPR_PTR pExpr, int descend )
{
   HB_SYMBOL_UNUSED( pExpr );
   if( descend > 0 )
   {
      hb_compGenPCode1( HB_P_ENUMNEXT, HB_COMP_PARAM );
   }
   else
   {
      hb_compGenPCode1( HB_P_ENUMPREV, HB_COMP_PARAM );
   }
}

static HB_CARGO_FUNC( hb_compEnumEvalEnd )
{
   char * szName = hb_compExprAsSymbol( (HB_EXPR_PTR)cargo );

   if( szName )
      hb_compForEnd( HB_COMP_PARAM, szName );
}

static void hb_compEnumEnd( HB_COMP_DECL, HB_EXPR_PTR pExpr )
{
   hb_compExprListEval( HB_COMP_PARAM, pExpr, hb_compEnumEvalEnd );
   hb_compGenPCode1( HB_P_ENUMEND, HB_COMP_PARAM );
}

static void hb_compSwitchStart( HB_COMP_DECL )
{
   HB_SWITCHCMD_PTR pSwitch = (HB_SWITCHCMD_PTR) hb_xgrab( sizeof( HB_SWITCHCMD ) );

   pSwitch->pCases = NULL;
   pSwitch->pLast  = NULL;
   pSwitch->ulDefault = 0;
   pSwitch->ulOffset = HB_COMP_PARAM->functions.pLast->lPCodePos;
   pSwitch->iCount = 0;
   pSwitch->pPrev = HB_COMP_PARAM->pSwitch;
   HB_COMP_PARAM->pSwitch = pSwitch;
}

static void hb_compSwitchAdd( HB_COMP_DECL, HB_EXPR_PTR pExpr )
{
   HB_SWITCHCASE_PTR pCase;
   
   if( pExpr )
   {
      /* normal CASE */
      pCase = (HB_SWITCHCASE_PTR) hb_xgrab( sizeof( HB_SWITCHCASE ) );
      pCase->ulOffset = HB_COMP_PARAM->functions.pLast->lPCodePos;
      pCase->pNext = NULL;
      pExpr = hb_compExprReduce( pExpr, HB_COMP_PARAM );
      if( !(hb_compExprIsLong(pExpr) || hb_compExprIsString(pExpr)) )
      {
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_NOT_LITERAL_CASE, NULL, NULL );
      }
      pCase->pExpr = pExpr;

      if( HB_COMP_PARAM->pSwitch->pLast )
      {
         HB_COMP_PARAM->pSwitch->pLast->pNext = pCase;
         HB_COMP_PARAM->pSwitch->pLast = pCase;
      }
      else
      {
         HB_COMP_PARAM->pSwitch->pCases = HB_COMP_PARAM->pSwitch->pLast = pCase;
      }
      HB_COMP_PARAM->pSwitch->iCount++;
      if( hb_compExprIsString( pExpr ) && hb_compExprAsStringLen(pExpr) > 255 )
      {
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INVALID_STR, NULL, NULL );
      }
   }
   else
   {
      /* DEFAULT */
      if( HB_COMP_PARAM->pSwitch->ulDefault )
      {
         /* more than one default clause */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
      }
      else
      {
         HB_COMP_PARAM->pSwitch->ulDefault = HB_COMP_PARAM->functions.pLast->lPCodePos;
         HB_COMP_PARAM->pSwitch->iCount++;
      }
   }
   
}

static void hb_compSwitchEnd( HB_COMP_DECL )
{ 
   BOOL fLongOptimize = HB_COMP_PARAM->fLongOptimize;
   BOOL fTextSubst = HB_COMP_PARAM->fTextSubst;
   HB_SWITCHCASE_PTR pCase = HB_COMP_PARAM->pSwitch->pCases;
   HB_SWITCHCASE_PTR pTmp;
   HB_SWITCHCMD_PTR pTmpSw;
   ULONG ulExitPos;
   ULONG ulDef;

   /* skip switch pcode if there was no EXIT in the last CASE
    * or in the DEFAULT case
   */
   ulExitPos = hb_compGenJump( 0, HB_COMP_PARAM ); 
   
   hb_compGenJumpHere( HB_COMP_PARAM->pSwitch->ulOffset + 1, HB_COMP_PARAM );
   hb_compGenPCode3( HB_P_SWITCH, HB_LOBYTE(HB_COMP_PARAM->pSwitch->iCount), HB_HIBYTE(HB_COMP_PARAM->pSwitch->iCount), HB_COMP_PARAM );
   HB_COMP_PARAM->fLongOptimize = FALSE;   
   HB_COMP_PARAM->fTextSubst = FALSE;
   while( pCase )
   {
      if( pCase->pExpr )
      {
         if( hb_compExprIsLong(pCase->pExpr) || hb_compExprIsString(pCase->pExpr) )
         {
            hb_compExprDelete( hb_compExprGenPush( pCase->pExpr, HB_COMP_PARAM ), HB_COMP_PARAM );
            hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ), pCase->ulOffset, HB_COMP_PARAM );
         }
         else
         {
            hb_compExprDelete( pCase->pExpr, HB_COMP_PARAM );
         }
      }
      pCase = pCase->pNext;
   }
   hb_compGenPCode1( HB_P_PUSHNIL, HB_COMP_PARAM );    /* end of cases */
   ulDef = hb_compGenJump( 0, HB_COMP_PARAM );
   
   if( HB_COMP_PARAM->pSwitch->ulDefault )
   {
      hb_compGenJumpThere( ulDef, HB_COMP_PARAM->pSwitch->ulDefault, HB_COMP_PARAM );
   }
   else
      hb_compGenJumpHere( ulDef, HB_COMP_PARAM );

   HB_COMP_PARAM->fLongOptimize = fLongOptimize;
   HB_COMP_PARAM->fTextSubst = fTextSubst;

   hb_compGenJumpHere( ulExitPos, HB_COMP_PARAM );
   
   pCase = HB_COMP_PARAM->pSwitch->pCases;
   while( pCase )
   {
      pTmp = pCase->pNext;
      hb_xfree( (void *)pCase );
      pCase = pTmp;
   }
   pTmpSw = HB_COMP_PARAM->pSwitch;
   HB_COMP_PARAM->pSwitch = HB_COMP_PARAM->pSwitch->pPrev;
   hb_xfree( pTmpSw );
}

/* Release all switch statements
*/
void hb_compSwitchKill( HB_COMP_DECL )
{
   HB_SWITCHCASE_PTR pCase;
   HB_SWITCHCMD_PTR pSwitch;

   while( HB_COMP_PARAM->pSwitch )
   {
      while( HB_COMP_PARAM->pSwitch->pCases )
      {
         pCase = HB_COMP_PARAM->pSwitch->pCases;
         hb_compExprDelete( pCase->pExpr, HB_COMP_PARAM );
         HB_COMP_PARAM->pSwitch->pCases = pCase->pNext;
         hb_xfree( (void *) pCase );
      }
      pSwitch = HB_COMP_PARAM->pSwitch;
      HB_COMP_PARAM->pSwitch = pSwitch->pPrev;
      hb_xfree( (void *) pSwitch );
   }
}

static HB_EXPR_PTR hb_compCheckPassByRef( HB_COMP_DECL, HB_EXPR_PTR pExpr )
{
   const char * szDesc;

   if( pExpr->ExprType == HB_ET_FUNCALL )
   {
      if( hb_compExprParamListLen( pExpr->value.asFunCall.pParms ) == 0 )
      {
         HB_EXPR_PTR pDelExpr = pExpr;
         if( pExpr->value.asFunCall.pFunName->ExprType == HB_ET_MACRO )
         {
            pExpr = pExpr->value.asFunCall.pFunName;
            hb_compExprClear( pDelExpr, HB_COMP_PARAM );
         }
         else
         {
            pExpr = hb_compExprNewFunRef( hb_compExprAsSymbol( pExpr ), HB_COMP_PARAM );
            hb_compExprDelete( pDelExpr, HB_COMP_PARAM );
         }
         return pExpr;
      }
   }
   else if( HB_COMP_PARAM->iPassByRef & ( HB_PASSBYREF_FUNCALL | HB_PASSBYREF_ARRAY ) )
      return pExpr;

   if( pExpr->ExprType == HB_ET_REFERENCE )
   {
      HB_EXPR_PTR pDelExpr = pExpr;
      pExpr = pExpr->value.asReference;
      hb_compExprClear( pDelExpr, HB_COMP_PARAM );
   }

   szDesc = hb_compExprAsSymbol( pExpr );
   if( ! szDesc )
      szDesc = hb_compExprDescription( pExpr );

   return hb_compErrorRefer( HB_COMP_PARAM, pExpr, szDesc );
}

/* ************************************************************************* */

BOOL hb_compCheckUnclosedStru( HB_COMP_DECL )
{
   BOOL fUnclosed = TRUE;
   
   if( HB_COMP_PARAM->wIfCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "IF", NULL );
      HB_COMP_PARAM->wIfCounter = 0;
   }
   else if( HB_COMP_PARAM->wForCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "FOR", NULL );
      HB_COMP_PARAM->wForCounter = 0;
   }
   else if( HB_COMP_PARAM->wWhileCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WHILE", NULL );
      HB_COMP_PARAM->wWhileCounter = 0;
   }
   else if( HB_COMP_PARAM->wCaseCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "CASE", NULL );
      HB_COMP_PARAM->wCaseCounter = 0;
   }
   else if( HB_COMP_PARAM->wSwitchCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "SWITCH", NULL );
      HB_COMP_PARAM->wSwitchCounter = 0;
   }
   else if( HB_COMP_PARAM->wWithObjectCnt )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WITH OBJECT", NULL );
      HB_COMP_PARAM->wWithObjectCnt = 0;
   }
   else if( HB_COMP_PARAM->wSeqCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "BEGIN SEQUENCE", NULL );
      HB_COMP_PARAM->wSeqCounter = 0;
   }
   else
      fUnclosed = FALSE;

   return fUnclosed;
}

void yyerror( HB_COMP_DECL, char * s )
{
   HB_SYMBOL_UNUSED( pComp );

   if( !HB_COMP_PARAM->pLex->lasttok || HB_COMP_PARAM->pLex->lasttok[ 0 ] == '\n' )
   {
      if( ! hb_pp_eof( HB_COMP_PARAM->pLex->pPP ) )
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INCOMPLETE_STMT, NULL, NULL );
   }
   else
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_YACC, s, HB_COMP_PARAM->pLex->lasttok );
}

