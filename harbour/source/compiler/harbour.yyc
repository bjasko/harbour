/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse hb_compparse
#define yylex   hb_complex
#define yyerror hb_comperror
#define yylval  hb_complval
#define yychar  hb_compchar
#define yydebug hb_compdebug
#define yynerrs hb_compnerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     FUNCTION = 258,
     PROCEDURE = 259,
     IDENTIFIER = 260,
     RETURN = 261,
     NIL = 262,
     NUM_DOUBLE = 263,
     INASSIGN = 264,
     NUM_LONG = 265,
     LOCAL = 266,
     STATIC = 267,
     IIF = 268,
     IF = 269,
     ELSE = 270,
     ELSEIF = 271,
     END = 272,
     ENDIF = 273,
     LITERAL = 274,
     TRUEVALUE = 275,
     FALSEVALUE = 276,
     ANNOUNCE = 277,
     EXTERN = 278,
     INIT = 279,
     EXIT = 280,
     AND = 281,
     OR = 282,
     NOT = 283,
     PUBLIC = 284,
     EQ = 285,
     NE1 = 286,
     NE2 = 287,
     INC = 288,
     DEC = 289,
     ALIASOP = 290,
     DOCASE = 291,
     CASE = 292,
     OTHERWISE = 293,
     ENDCASE = 294,
     ENDDO = 295,
     MEMVAR = 296,
     WHILE = 297,
     LOOP = 298,
     FOR = 299,
     NEXT = 300,
     TO = 301,
     STEP = 302,
     LE = 303,
     GE = 304,
     FIELD = 305,
     IN = 306,
     PARAMETERS = 307,
     PLUSEQ = 308,
     MINUSEQ = 309,
     MULTEQ = 310,
     DIVEQ = 311,
     POWER = 312,
     EXPEQ = 313,
     MODEQ = 314,
     PRIVATE = 315,
     BEGINSEQ = 316,
     BREAK = 317,
     RECOVER = 318,
     RECOVERUSING = 319,
     ALWAYS = 320,
     DO = 321,
     WITH = 322,
     SELF = 323,
     LINE = 324,
     MACROVAR = 325,
     MACROTEXT = 326,
     AS_ARRAY = 327,
     AS_BLOCK = 328,
     AS_CHARACTER = 329,
     AS_CLASS = 330,
     AS_DATE = 331,
     AS_LOGICAL = 332,
     AS_NUMERIC = 333,
     AS_OBJECT = 334,
     AS_VARIANT = 335,
     DECLARE = 336,
     OPTIONAL = 337,
     DECLARE_CLASS = 338,
     DECLARE_MEMBER = 339,
     AS_ARRAY_ARRAY = 340,
     AS_BLOCK_ARRAY = 341,
     AS_CHARACTER_ARRAY = 342,
     AS_CLASS_ARRAY = 343,
     AS_DATE_ARRAY = 344,
     AS_LOGICAL_ARRAY = 345,
     AS_NUMERIC_ARRAY = 346,
     AS_OBJECT_ARRAY = 347,
     PROCREQ = 348,
     CBSTART = 349,
     DOIDENT = 350,
     FOREACH = 351,
     DESCEND = 352,
     DOSWITCH = 353,
     WITHOBJECT = 354,
     NUM_DATE = 355,
     EPSILON = 356,
     POST = 357,
     UNARY = 358,
     PRE = 359
   };
#endif
/* Tokens.  */
#define FUNCTION 258
#define PROCEDURE 259
#define IDENTIFIER 260
#define RETURN 261
#define NIL 262
#define NUM_DOUBLE 263
#define INASSIGN 264
#define NUM_LONG 265
#define LOCAL 266
#define STATIC 267
#define IIF 268
#define IF 269
#define ELSE 270
#define ELSEIF 271
#define END 272
#define ENDIF 273
#define LITERAL 274
#define TRUEVALUE 275
#define FALSEVALUE 276
#define ANNOUNCE 277
#define EXTERN 278
#define INIT 279
#define EXIT 280
#define AND 281
#define OR 282
#define NOT 283
#define PUBLIC 284
#define EQ 285
#define NE1 286
#define NE2 287
#define INC 288
#define DEC 289
#define ALIASOP 290
#define DOCASE 291
#define CASE 292
#define OTHERWISE 293
#define ENDCASE 294
#define ENDDO 295
#define MEMVAR 296
#define WHILE 297
#define LOOP 298
#define FOR 299
#define NEXT 300
#define TO 301
#define STEP 302
#define LE 303
#define GE 304
#define FIELD 305
#define IN 306
#define PARAMETERS 307
#define PLUSEQ 308
#define MINUSEQ 309
#define MULTEQ 310
#define DIVEQ 311
#define POWER 312
#define EXPEQ 313
#define MODEQ 314
#define PRIVATE 315
#define BEGINSEQ 316
#define BREAK 317
#define RECOVER 318
#define RECOVERUSING 319
#define ALWAYS 320
#define DO 321
#define WITH 322
#define SELF 323
#define LINE 324
#define MACROVAR 325
#define MACROTEXT 326
#define AS_ARRAY 327
#define AS_BLOCK 328
#define AS_CHARACTER 329
#define AS_CLASS 330
#define AS_DATE 331
#define AS_LOGICAL 332
#define AS_NUMERIC 333
#define AS_OBJECT 334
#define AS_VARIANT 335
#define DECLARE 336
#define OPTIONAL 337
#define DECLARE_CLASS 338
#define DECLARE_MEMBER 339
#define AS_ARRAY_ARRAY 340
#define AS_BLOCK_ARRAY 341
#define AS_CHARACTER_ARRAY 342
#define AS_CLASS_ARRAY 343
#define AS_DATE_ARRAY 344
#define AS_LOGICAL_ARRAY 345
#define AS_NUMERIC_ARRAY 346
#define AS_OBJECT_ARRAY 347
#define PROCREQ 348
#define CBSTART 349
#define DOIDENT 350
#define FOREACH 351
#define DESCEND 352
#define DOSWITCH 353
#define WITHOBJECT 354
#define NUM_DATE 355
#define EPSILON 356
#define POST 357
#define UNARY 358
#define PRE 359




/* Copy the first part of user declarations.  */
#line 5 "harbour.y"

/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * Compiler YACC rules and actions
 *
 * Copyright 1999 Antonio Linares <alinares@fivetech.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA (or visit
 * their web site at http://www.gnu.org/).
 *
 */

/* TODO list
 * 1) Change the pcode generated by ::cVar from Self:cVar to QSELF():cVar
 *    The major problem to solve is how to support QSELF() inside a codeblock.
 */


#include "hbcomp.h"

/* Compile using: bison -d -v harbour.y */

/* to pacify some warnings in BCC */
#if defined( __BORLANDC__ ) && !defined( __STDC__ )
#  define __STDC__
#endif

#undef alloca
#define alloca  hb_xgrab
#undef malloc
#define malloc  hb_xgrab
#undef realloc
#define realloc hb_xrealloc
#undef free
#define free    hb_xfree

/* NOTE: these symbols are used internally in bison.simple
 */
#undef YYFREE
#define YYFREE hb_xfree
#undef YYMALLOC
#define YYMALLOC hb_xgrab

static void hb_compLoopStart( HB_COMP_DECL );
static void hb_compLoopEnd( HB_COMP_DECL );
static void hb_compLoopLoop( HB_COMP_DECL );
static void hb_compLoopExit( HB_COMP_DECL );
static void hb_compLoopHere( HB_COMP_DECL );

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirstElseIf, ULONG ulOffset ); /* generates a support structure for elseifs pcode fixups */
static void hb_compElseIfFix( HB_COMP_DECL, void * pIfElseIfs ); /* implements the ElseIfs pcode fixups */

static void hb_compRTVariableAdd( HB_COMP_DECL, HB_EXPR_PTR, BOOL );
static void hb_compRTVariableGen( HB_COMP_DECL, char * );

static void hb_compVariableDim( char *, HB_EXPR_PTR, HB_COMP_DECL );

static void hb_compForStart( HB_COMP_DECL, char *szVarName, BOOL bForEach );
static void hb_compForEnd( HB_COMP_DECL, char *szVarName );
static void hb_compEnumStart( HB_COMP_DECL, HB_EXPR_PTR pVars, HB_EXPR_PTR pExprs, int descend );
static void hb_compEnumNext( HB_COMP_DECL, HB_EXPR_PTR pExpr, int descend );
static void hb_compEnumEnd( HB_COMP_DECL, HB_EXPR_PTR pExpr );

static void hb_compSwitchStart( HB_COMP_DECL );
static void hb_compSwitchAdd( HB_COMP_DECL, HB_EXPR_PTR );
static void hb_compSwitchEnd( HB_COMP_DECL );

static HB_EXPR_PTR hb_compCheckPassByRef( HB_COMP_DECL, HB_EXPR_PTR pExpr );

#ifdef HARBOUR_YYDEBUG
   #define YYDEBUG        1 /* Parser debug information support */
#endif

/* Controls if passing by reference '@' is allowed */
#define HB_PASSBYREF_OFF      0
#define HB_PASSBYREF_FUNCALL  1
#define HB_PASSBYREF_ARRAY    2

static void hb_compDebugStart( void ) { };



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 105 "harbour.y"
{
   char *  string;      /* to hold a string returned by lex */
   int     iNumber;     /* to hold a temporary integer number */
   HB_LONG lNumber;     /* to hold a temporary long number */
   BOOL    bTrue;
   HB_EXPR_PTR asExpr;
   void * pVoid;        /* to hold any memory structure we may need */
   struct
   {
      HB_LONG  lNumber;    /* to hold a long number returned by lex */
      UCHAR    bWidth;     /* to hold the width of the value */
   } valLong;
   struct
   {
      double   dNumber;    /* to hold a double number returned by lex */
      /* NOTE: Intentionally using "unsigned char" instead of "BYTE" */
      UCHAR    bWidth;     /* to hold the width of the value */
      UCHAR    bDec;       /* to hold the number of decimal points in the value */
   } valDouble;
   struct
   {
      char *   string;
      int      length;
      BOOL     dealloc;
   } valChar;
   struct
   {
      char *   string;
      int      length;
      int      flags;   /* Flag for early {|| &macro} (1) or late {|| &(macro)} (2) binding */
   } asCodeblock;
   struct
   {
      BOOL bMacro;
      union 
      {
         char * string;
         HB_EXPR_PTR macro;
      } value;
   } asMessage;
}
/* Line 193 of yacc.c.  */
#line 453 "harboury.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 147 "harbour.y"

/* This must be placed after the above union - the union is
 * typedef-ined to YYSTYPE
 */
extern int  yylex( YYSTYPE *, HB_COMP_DECL );    /* main lex token function, called by yyparse() */
extern void yyerror( HB_COMP_DECL, char * );     /* parsing error management function */


/* Line 216 of yacc.c.  */
#line 473 "harboury.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  284
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   8401

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  127
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  245
/* YYNRULES -- Number of rules.  */
#define YYNRULES  626
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1003

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   359

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     116,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,   106,   111,   114,     2,
     119,   120,   109,   107,   118,   108,     2,   110,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   123,   117,
     104,   103,   105,     2,   115,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   125,     2,   124,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   121,   126,   122,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   112,   113
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,     8,    10,    12,    14,    16,
      19,    22,    25,    28,    31,    34,    38,    43,    50,    51,
      57,    58,    64,    65,    74,    75,    84,    85,    87,    89,
      91,    92,    94,    96,   100,   101,   103,   105,   107,   109,
     111,   113,   115,   118,   120,   122,   124,   126,   128,   130,
     132,   134,   136,   138,   141,   144,   149,   152,   155,   158,
     161,   164,   167,   170,   173,   176,   179,   182,   185,   188,
     191,   194,   197,   198,   203,   206,   209,   212,   213,   218,
     219,   220,   226,   227,   228,   234,   236,   238,   240,   244,
     245,   250,   255,   257,   261,   262,   265,   267,   269,   271,
     273,   275,   277,   282,   290,   295,   303,   304,   306,   308,
     310,   312,   315,   317,   321,   323,   325,   327,   329,   331,
     333,   335,   337,   339,   341,   343,   345,   347,   349,   351,
     353,   355,   357,   359,   361,   364,   367,   369,   372,   374,
     377,   380,   382,   384,   387,   389,   392,   393,   398,   401,
     404,   407,   409,   412,   414,   416,   419,   422,   425,   428,
     432,   435,   438,   441,   444,   447,   450,   453,   456,   459,
     462,   465,   468,   471,   473,   475,   477,   480,   483,   486,
     489,   492,   495,   498,   501,   504,   507,   510,   513,   516,
     519,   522,   525,   528,   531,   534,   537,   540,   543,   546,
     549,   552,   555,   558,   561,   564,   567,   570,   573,   576,
     579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
     607,   613,   615,   616,   622,   623,   629,   632,   635,   637,
     641,   643,   645,   648,   651,   654,   657,   660,   662,   664,
     668,   672,   675,   677,   679,   681,   686,   689,   690,   696,
     699,   701,   703,   705,   707,   709,   711,   713,   714,   718,
     720,   722,   724,   726,   728,   730,   732,   734,   735,   739,
     741,   743,   744,   748,   750,   751,   755,   757,   759,   761,
     763,   765,   767,   769,   771,   773,   775,   777,   778,   782,
     783,   787,   789,   791,   793,   794,   796,   798,   800,   802,
     804,   806,   808,   810,   812,   814,   816,   818,   820,   822,
     824,   826,   828,   830,   832,   834,   836,   838,   840,   842,
     844,   846,   848,   850,   852,   854,   857,   860,   863,   866,
     869,   872,   876,   880,   884,   888,   892,   896,   900,   904,
     908,   912,   916,   920,   924,   928,   932,   936,   940,   944,
     948,   952,   956,   960,   964,   968,   972,   976,   980,   982,
     984,   986,   988,   990,   992,   996,  1000,  1004,  1008,  1012,
    1016,  1020,  1024,  1028,  1032,  1036,  1040,  1044,  1048,  1052,
    1056,  1060,  1063,  1066,  1070,  1075,  1077,  1081,  1082,  1089,
    1091,  1095,  1096,  1098,  1100,  1104,  1107,  1112,  1115,  1118,
    1121,  1124,  1126,  1128,  1130,  1132,  1135,  1138,  1142,  1146,
    1150,  1154,  1163,  1171,  1179,  1186,  1189,  1190,  1195,  1196,
    1201,  1202,  1207,  1209,  1213,  1215,  1219,  1221,  1224,  1229,
    1232,  1236,  1237,  1241,  1242,  1243,  1250,  1253,  1257,  1260,
    1263,  1267,  1272,  1273,  1278,  1281,  1286,  1290,  1291,  1296,
    1299,  1304,  1305,  1314,  1315,  1321,  1325,  1329,  1330,  1338,
    1340,  1344,  1346,  1349,  1351,  1354,  1355,  1362,  1363,  1367,
    1368,  1370,  1372,  1376,  1378,  1382,  1384,  1387,  1391,  1397,
    1402,  1408,  1416,  1420,  1425,  1432,  1438,  1445,  1454,  1456,
    1458,  1460,  1462,  1464,  1466,  1468,  1471,  1475,  1479,  1484,
    1486,  1489,  1490,  1492,  1493,  1494,  1501,  1503,  1505,  1507,
    1509,  1511,  1512,  1517,  1518,  1519,  1526,  1527,  1528,  1536,
    1538,  1540,  1544,  1548,  1551,  1556,  1558,  1560,  1561,  1565,
    1567,  1570,  1571,  1572,  1579,  1580,  1581,  1589,  1590,  1591,
    1597,  1598,  1604,  1605,  1606,  1614,  1616,  1618,  1620,  1621,
    1622,  1623,  1636,  1638,  1640,  1641,  1644,  1647,  1651,  1654,
    1658,  1660,  1662,  1664,  1668,  1671,  1673,  1675,  1679,  1680,
    1681,  1682,  1693,  1694,  1696,  1697,  1702,  1705,  1707,  1708,
    1713,  1715,  1718,  1719,  1725,  1726,  1733,  1735,  1738,  1739,
    1740,  1746,  1747,  1748,  1749,  1750,  1761,  1762,  1766,  1768,
    1769,  1773,  1777,  1779,  1782,  1784,  1786,  1787,  1792,  1793,
    1797,  1798,  1801,  1803,  1806,  1808,  1811,  1815,  1817,  1819,
    1821,  1823,  1825,  1826,  1833,  1838,  1840
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     128,     0,    -1,   129,    -1,    -1,   371,    -1,   274,    -1,
     131,    -1,   142,    -1,   130,    -1,     1,   371,    -1,   129,
     371,    -1,   129,   274,    -1,   129,   131,    -1,   129,   142,
      -1,   129,   130,    -1,   129,     1,   371,    -1,    69,    10,
      19,   371,    -1,    69,    10,    19,   115,    19,   371,    -1,
      -1,   136,     3,   158,   132,   371,    -1,    -1,   136,     4,
     158,   133,   371,    -1,    -1,   136,     3,   158,   134,   119,
     137,   120,   371,    -1,    -1,   136,     4,   158,   135,   119,
     137,   120,   371,    -1,    -1,    12,    -1,    24,    -1,    25,
      -1,    -1,   101,    -1,   141,    -1,   141,   118,   101,    -1,
      -1,   139,    -1,    78,    -1,    74,    -1,    76,    -1,    77,
      -1,    73,    -1,    79,    -1,    75,   158,    -1,    80,    -1,
     140,    -1,    72,    -1,    91,    -1,    87,    -1,    89,    -1,
      90,    -1,    85,    -1,    86,    -1,    92,    -1,    88,   158,
      -1,   158,   138,    -1,   141,   118,   158,   138,    -1,   289,
     151,    -1,   369,   151,    -1,   253,   151,    -1,   191,   151,
      -1,   186,   151,    -1,   204,   151,    -1,   178,   151,    -1,
     180,   151,    -1,   247,   151,    -1,   221,   151,    -1,   220,
     151,    -1,   231,   151,    -1,   224,   151,    -1,   223,   151,
      -1,   363,   151,    -1,    62,   151,    -1,    -1,    62,   143,
     212,   371,    -1,    25,   151,    -1,    43,   151,    -1,     6,
     151,    -1,    -1,     6,   144,   212,   371,    -1,    -1,    -1,
      29,   145,   260,   146,   371,    -1,    -1,    -1,    60,   147,
     260,   148,   371,    -1,   255,    -1,   268,    -1,   271,    -1,
      23,   157,   371,    -1,    -1,    22,   158,   149,   371,    -1,
      93,   150,   120,   371,    -1,    19,    -1,    19,   107,    19,
      -1,    -1,   152,   371,    -1,   371,    -1,   142,    -1,   274,
      -1,   130,    -1,   154,    -1,     1,    -1,   155,     3,   158,
     371,    -1,   155,     3,   158,   119,   137,   120,   371,    -1,
     155,     4,   158,   371,    -1,   155,     4,   158,   119,   137,
     120,   371,    -1,    -1,    12,    -1,    24,    -1,    25,    -1,
     153,    -1,   156,   153,    -1,   158,    -1,   157,   118,   158,
      -1,     5,    -1,    47,    -1,    46,    -1,    43,    -1,    25,
      -1,    51,    -1,    82,    -1,    23,    -1,    22,    -1,    11,
      -1,    41,    -1,    12,    -1,    60,    -1,    29,    -1,    52,
      -1,    93,    -1,    97,    -1,     8,    -1,    10,    -1,   100,
      -1,    10,    35,    -1,     8,    35,    -1,     7,    -1,   162,
      35,    -1,    19,    -1,   164,    35,    -1,   238,    35,    -1,
      20,    -1,    21,    -1,   167,    35,    -1,    68,    -1,   169,
      35,    -1,    -1,   121,   172,   237,   122,    -1,   171,    35,
      -1,   171,   235,    -1,   174,    35,    -1,   158,    -1,   158,
      35,    -1,    70,    -1,    71,    -1,   178,    35,    -1,   114,
     247,    -1,   180,    35,    -1,    50,    35,    -1,    50,    35,
     182,    -1,   182,   177,    -1,   182,   161,    -1,   182,   248,
      -1,   182,   179,    -1,   182,   181,    -1,   182,   163,    -1,
     182,   165,    -1,   182,   168,    -1,   182,   166,    -1,   182,
     170,    -1,   182,   173,    -1,   182,   175,    -1,   182,   254,
      -1,   158,    -1,   178,    -1,   180,    -1,   161,   184,    -1,
     179,   184,    -1,   181,   184,    -1,   248,   184,    -1,   163,
     184,    -1,   165,   184,    -1,   168,   184,    -1,   166,   184,
      -1,   170,   184,    -1,   173,   184,    -1,   175,   184,    -1,
     188,   184,    -1,   254,   184,    -1,   195,   184,    -1,   203,
     184,    -1,   206,   184,    -1,   177,   184,    -1,   182,   184,
      -1,   183,   184,    -1,   161,   247,    -1,   177,   247,    -1,
     179,   247,    -1,   181,   247,    -1,   248,   247,    -1,   182,
     247,    -1,   159,   235,    -1,   162,   235,    -1,   160,   235,
      -1,   164,   235,    -1,   238,   235,    -1,   167,   235,    -1,
     169,   235,    -1,   176,   235,    -1,   185,   235,    -1,   186,
     235,    -1,   178,   235,    -1,   180,   235,    -1,   200,   235,
      -1,   204,   235,    -1,   191,   235,    -1,   253,   235,    -1,
     247,   235,    -1,   187,    35,    -1,    -1,   158,   119,   190,
     196,   120,    -1,   189,    -1,    -1,   178,   119,   192,   196,
     120,    -1,    -1,   180,   119,   193,   196,   120,    -1,   115,
     189,    -1,   191,    35,    -1,   199,    -1,   196,   118,   199,
      -1,   216,    -1,   198,    -1,   115,   158,    -1,   115,   178,
      -1,   115,   185,    -1,   115,   200,    -1,   115,   187,    -1,
     101,    -1,   197,    -1,   218,   123,   201,    -1,   202,   123,
     201,    -1,   123,   201,    -1,   158,    -1,   178,    -1,   180,
      -1,   119,   115,   158,   120,    -1,   200,    35,    -1,    -1,
     200,   119,   205,   196,   120,    -1,   204,    35,    -1,   159,
      -1,   162,    -1,   160,    -1,   164,    -1,   238,    -1,   167,
      -1,   169,    -1,    -1,   169,   208,   139,    -1,   171,    -1,
     174,    -1,   185,    -1,   186,    -1,   178,    -1,   180,    -1,
     187,    -1,   191,    -1,    -1,   191,   209,   139,    -1,   253,
      -1,   200,    -1,    -1,   200,   210,   139,    -1,   204,    -1,
      -1,   204,   211,   139,    -1,   223,    -1,   231,    -1,   220,
      -1,   221,    -1,   222,    -1,   232,    -1,   233,    -1,   234,
      -1,   207,    -1,   176,    -1,   247,    -1,    -1,   176,   213,
     139,    -1,    -1,   247,   214,   139,    -1,   194,    -1,   101,
      -1,   212,    -1,    -1,   212,    -1,   158,    -1,   185,    -1,
     178,    -1,   180,    -1,   200,    -1,   187,    -1,   247,    -1,
     159,    -1,   162,    -1,   160,    -1,   164,    -1,   238,    -1,
     167,    -1,   169,    -1,   171,    -1,   174,    -1,   185,    -1,
     186,    -1,   178,    -1,   180,    -1,   176,    -1,   187,    -1,
     247,    -1,   191,    -1,   253,    -1,   200,    -1,   204,    -1,
      33,    -1,    34,    -1,   218,   219,    -1,    33,   212,    -1,
      34,   212,    -1,    28,   212,    -1,   108,   212,    -1,   107,
     212,    -1,   159,     9,   212,    -1,   162,     9,   212,    -1,
     160,     9,   212,    -1,   164,     9,   212,    -1,   238,     9,
     212,    -1,   167,     9,   212,    -1,   169,     9,   212,    -1,
     171,     9,   212,    -1,   174,     9,   212,    -1,   185,     9,
     212,    -1,   186,     9,   212,    -1,   178,     9,   212,    -1,
     180,     9,   212,    -1,   176,     9,   212,    -1,   187,     9,
     212,    -1,   247,     9,   212,    -1,   253,     9,   212,    -1,
     191,     9,   212,    -1,   200,     9,   212,    -1,   204,     9,
     212,    -1,   218,   103,   212,    -1,   218,    53,   212,    -1,
     218,    54,   212,    -1,   218,    55,   212,    -1,   218,    56,
     212,    -1,   218,    59,   212,    -1,   218,    58,   212,    -1,
     225,    -1,   226,    -1,   227,    -1,   228,    -1,   229,    -1,
     230,    -1,   212,   107,   212,    -1,   212,   108,   212,    -1,
     212,   109,   212,    -1,   212,   110,   212,    -1,   212,   111,
     212,    -1,   212,    57,   212,    -1,   212,    26,   212,    -1,
     212,    27,   212,    -1,   212,    30,   212,    -1,   212,   104,
     212,    -1,   212,   105,   212,    -1,   212,    48,   212,    -1,
     212,    49,   212,    -1,   212,    31,   212,    -1,   212,    32,
     212,    -1,   212,   106,   212,    -1,   212,   103,   212,    -1,
     236,   124,    -1,   125,   215,    -1,   236,   118,   215,    -1,
     236,   124,   125,   215,    -1,   199,    -1,   237,   118,   199,
      -1,    -1,    94,   239,   241,   126,   240,   122,    -1,   212,
      -1,   240,   118,   212,    -1,    -1,   101,    -1,   242,    -1,
     242,   118,   101,    -1,   158,   138,    -1,   242,   118,   158,
     138,    -1,   249,   120,    -1,   250,   120,    -1,   251,   120,
      -1,   252,   120,    -1,   243,    -1,   244,    -1,   245,    -1,
     246,    -1,   247,    35,    -1,   119,   212,    -1,   249,   118,
     212,    -1,   250,   118,   212,    -1,   251,   118,   212,    -1,
     252,   118,   212,    -1,    13,   119,   212,   118,   197,   118,
     197,   120,    -1,    14,   249,   118,   212,   118,   197,   120,
      -1,    14,   249,   118,   198,   118,   197,   120,    -1,    14,
     249,   118,   118,   197,   120,    -1,   253,    35,    -1,    -1,
      11,   256,   259,   371,    -1,    -1,    12,   257,   259,   371,
      -1,    -1,    52,   258,   273,   371,    -1,   262,    -1,   259,
     118,   262,    -1,   261,    -1,   260,   118,   261,    -1,   262,
      -1,   178,   138,    -1,   178,   138,     9,   212,    -1,   178,
     266,    -1,   178,   266,   140,    -1,    -1,   158,   138,   263,
      -1,    -1,    -1,   158,   138,   264,     9,   265,   212,    -1,
     158,   266,    -1,   158,   266,   140,    -1,   267,   124,    -1,
     125,   212,    -1,   267,   118,   212,    -1,   267,   124,   125,
     212,    -1,    -1,    50,   269,   270,   371,    -1,   158,   138,
      -1,   270,   118,   158,   138,    -1,   270,    51,   158,    -1,
      -1,    41,   272,   273,   371,    -1,   158,   138,    -1,   273,
     118,   158,   138,    -1,    -1,    81,   158,   119,   275,   284,
     120,   138,   371,    -1,    -1,    81,   158,   276,   279,   371,
      -1,    83,   158,   371,    -1,    84,   280,   371,    -1,    -1,
      84,   121,   138,   277,   278,   122,   371,    -1,   282,    -1,
     278,   118,   282,    -1,   280,    -1,   279,   280,    -1,   282,
      -1,   279,   282,    -1,    -1,   158,   119,   281,   284,   120,
     138,    -1,    -1,   158,   283,   138,    -1,    -1,   287,    -1,
     288,    -1,   287,   118,   288,    -1,   286,    -1,   285,   118,
     286,    -1,   216,    -1,   158,   138,    -1,   115,   158,   138,
      -1,   115,   158,   119,   285,   120,    -1,   287,   118,   158,
     138,    -1,   287,   118,   115,   158,   138,    -1,   287,   118,
     115,   158,   119,   285,   120,    -1,    82,   158,   138,    -1,
      82,   115,   158,   138,    -1,    82,   115,   158,   119,   285,
     120,    -1,   288,   118,    82,   158,   138,    -1,   288,   118,
      82,   115,   158,   138,    -1,   288,   118,    82,   115,   158,
     119,   285,   120,    -1,   290,    -1,   305,    -1,   319,    -1,
     324,    -1,   352,    -1,   335,    -1,   340,    -1,   293,   304,
      -1,   293,   297,   304,    -1,   293,   299,   304,    -1,   293,
     299,   297,   304,    -1,   153,    -1,   291,   153,    -1,    -1,
     291,    -1,    -1,    -1,    14,   296,   294,   371,   295,   292,
      -1,   207,    -1,   176,    -1,   243,    -1,   244,    -1,   246,
      -1,    -1,    15,   371,   298,   292,    -1,    -1,    -1,    16,
     300,   212,   371,   301,   292,    -1,    -1,    -1,   299,    16,
     302,   212,   371,   303,   292,    -1,    18,    -1,    17,    -1,
     309,   310,   306,    -1,   309,   315,   306,    -1,   309,   306,
      -1,   309,   310,   315,   306,    -1,    39,    -1,    17,    -1,
      -1,    36,   308,   371,    -1,   307,    -1,   307,   156,    -1,
      -1,    -1,    37,   311,   212,   371,   312,   292,    -1,    -1,
      -1,   310,    37,   313,   212,   371,   314,   292,    -1,    -1,
      -1,    38,   316,   371,   317,   292,    -1,    -1,   315,    38,
     318,   371,   292,    -1,    -1,    -1,   322,   212,   371,   320,
     292,   321,   323,    -1,    42,    -1,    17,    -1,    40,    -1,
      -1,    -1,    -1,    44,   217,   328,   212,   325,    46,   212,
     329,   326,   371,   327,   330,    -1,   103,    -1,     9,    -1,
      -1,    47,   212,    -1,   292,    45,    -1,   292,    45,   158,
      -1,   292,    17,    -1,   292,    17,   158,    -1,   158,    -1,
     185,    -1,   331,    -1,   332,   118,   331,    -1,   115,   158,
      -1,   212,    -1,   333,    -1,   334,   118,   333,    -1,    -1,
      -1,    -1,    96,   332,    51,   334,   336,   339,   337,   371,
     338,   330,    -1,    -1,    97,    -1,    -1,   345,   341,   346,
     342,    -1,   345,   342,    -1,    17,    -1,    -1,    98,   344,
     212,   371,    -1,   343,    -1,   343,   156,    -1,    -1,    37,
     212,   347,   371,   292,    -1,    -1,   346,    37,   212,   348,
     371,   292,    -1,   349,    -1,   346,   349,    -1,    -1,    -1,
      38,   350,   371,   351,   292,    -1,    -1,    -1,    -1,    -1,
      61,   353,   371,   292,   354,   359,   355,   357,   356,    17,
      -1,    -1,   358,   371,   292,    -1,    65,    -1,    -1,   360,
     371,   292,    -1,   361,   371,   292,    -1,    63,    -1,    64,
     158,    -1,   178,    -1,   180,    -1,    -1,    66,   362,   364,
     366,    -1,    -1,    95,   365,   366,    -1,    -1,    67,   367,
      -1,   118,    -1,   118,   368,    -1,   368,    -1,   367,   118,
      -1,   367,   118,   368,    -1,   158,    -1,   198,    -1,   194,
      -1,   207,    -1,   247,    -1,    -1,    99,   212,   371,   370,
     291,    17,    -1,    99,   212,   371,    17,    -1,   116,    -1,
     117,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   265,   265,   266,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   283,   288,   296,   296,
     297,   297,   298,   298,   299,   299,   302,   303,   304,   305,
     308,   309,   310,   311,   314,   315,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   340,   341,   349,   350,   351,   352,
     353,   354,   355,   361,   367,   368,   369,   370,   371,   372,
     373,   374,   376,   376,   382,   383,   384,   396,   396,   414,
     416,   414,   420,   422,   420,   426,   427,   428,   429,   430,
     430,   444,   447,   455,   468,   468,   471,   472,   473,   474,
     475,   476,   488,   489,   490,   491,   494,   495,   496,   497,
     500,   501,   504,   505,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   529,   530,   533,   541,   542,   547,   550,   555,   561,
     566,   571,   572,   575,   580,   583,   588,   588,   591,   596,
     599,   604,   607,   612,   613,   616,   621,   624,   631,   632,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   652,   653,   654,   657,   658,   659,   660,
     661,   662,   663,   664,   665,   666,   667,   668,   669,   670,
     671,   672,   673,   674,   675,   684,   685,   686,   687,   688,
     689,   694,   695,   696,   697,   698,   699,   700,   701,   702,
     703,   704,   705,   706,   707,   708,   709,   710,   713,   716,
     716,   719,   720,   720,   721,   721,   725,   728,   731,   732,
     735,   736,   739,   740,   741,   742,   743,   746,   747,   752,
     753,   754,   760,   761,   762,   765,   768,   773,   773,   776,
     785,   786,   787,   788,   789,   790,   791,   792,   792,   793,
     794,   795,   796,   797,   798,   799,   800,   801,   801,   802,
     803,   804,   804,   805,   806,   806,   807,   808,   809,   810,
     811,   812,   813,   814,   817,   818,   819,   820,   820,   821,
     821,   822,   825,   826,   829,   830,   833,   834,   835,   836,
     837,   838,   839,   846,   847,   848,   849,   850,   851,   852,
     853,   854,   855,   856,   857,   858,   859,   860,   861,   862,
     863,   864,   865,   871,   872,   875,   878,   879,   882,   883,
     884,   887,   888,   889,   890,   891,   892,   893,   894,   895,
     896,   897,   898,   899,   900,   901,   902,   903,   904,   905,
     906,   909,   912,   915,   918,   921,   924,   927,   930,   931,
     932,   933,   934,   935,   938,   939,   940,   941,   942,   943,
     946,   947,   950,   951,   952,   953,   954,   955,   956,   957,
     958,   961,   967,   968,   969,   972,   973,   976,   976,   982,
     983,   988,   989,   990,   991,   994,   995,  1005,  1008,  1011,
    1014,  1017,  1018,  1019,  1020,  1023,  1032,  1035,  1038,  1041,
    1042,  1045,  1047,  1049,  1051,  1055,  1058,  1058,  1060,  1060,
    1062,  1062,  1069,  1070,  1073,  1074,  1082,  1083,  1085,  1089,
    1096,  1105,  1105,  1119,  1122,  1119,  1147,  1148,  1154,  1157,
    1158,  1159,  1163,  1163,  1166,  1167,  1168,  1171,  1171,  1174,
    1175,  1178,  1178,  1201,  1201,  1202,  1203,  1204,  1204,  1207,
    1208,  1211,  1212,  1213,  1214,  1217,  1217,  1239,  1239,  1295,
    1296,  1297,  1298,  1301,  1302,  1305,  1308,  1309,  1310,  1311,
    1312,  1313,  1316,  1317,  1318,  1319,  1320,  1321,  1324,  1325,
    1326,  1327,  1328,  1329,  1330,  1333,  1334,  1335,  1336,  1339,
    1340,  1343,  1344,  1348,  1350,  1347,  1355,  1356,  1357,  1358,
    1359,  1362,  1362,  1366,  1368,  1366,  1376,  1378,  1376,  1387,
    1390,  1395,  1399,  1403,  1406,  1412,  1417,  1424,  1424,  1427,
    1428,  1436,  1437,  1436,  1448,  1449,  1448,  1461,  1461,  1461,
    1463,  1463,  1468,  1473,  1467,  1487,  1490,  1491,  1495,  1507,
    1512,  1494,  1580,  1581,  1584,  1585,  1588,  1591,  1594,  1597,
    1602,  1603,  1606,  1607,  1610,  1611,  1614,  1615,  1620,  1626,
    1635,  1619,  1655,  1656,  1660,  1659,  1672,  1679,  1687,  1686,
    1696,  1697,  1705,  1705,  1708,  1708,  1711,  1713,  1716,  1716,
    1716,  1721,  1728,  1736,  1746,  1720,  1770,  1771,  1774,  1782,
    1783,  1784,  1787,  1798,  1816,  1817,  1821,  1820,  1828,  1827,
    1838,  1839,  1842,  1843,  1844,  1845,  1846,  1849,  1850,  1851,
    1852,  1853,  1857,  1856,  1869,  1872,  1873
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "FUNCTION", "PROCEDURE", "IDENTIFIER",
  "RETURN", "NIL", "NUM_DOUBLE", "INASSIGN", "NUM_LONG", "LOCAL", "STATIC",
  "IIF", "IF", "ELSE", "ELSEIF", "END", "ENDIF", "LITERAL", "TRUEVALUE",
  "FALSEVALUE", "ANNOUNCE", "EXTERN", "INIT", "EXIT", "AND", "OR", "NOT",
  "PUBLIC", "EQ", "NE1", "NE2", "INC", "DEC", "ALIASOP", "DOCASE", "CASE",
  "OTHERWISE", "ENDCASE", "ENDDO", "MEMVAR", "WHILE", "LOOP", "FOR",
  "NEXT", "TO", "STEP", "LE", "GE", "FIELD", "IN", "PARAMETERS", "PLUSEQ",
  "MINUSEQ", "MULTEQ", "DIVEQ", "POWER", "EXPEQ", "MODEQ", "PRIVATE",
  "BEGINSEQ", "BREAK", "RECOVER", "RECOVERUSING", "ALWAYS", "DO", "WITH",
  "SELF", "LINE", "MACROVAR", "MACROTEXT", "AS_ARRAY", "AS_BLOCK",
  "AS_CHARACTER", "AS_CLASS", "AS_DATE", "AS_LOGICAL", "AS_NUMERIC",
  "AS_OBJECT", "AS_VARIANT", "DECLARE", "OPTIONAL", "DECLARE_CLASS",
  "DECLARE_MEMBER", "AS_ARRAY_ARRAY", "AS_BLOCK_ARRAY",
  "AS_CHARACTER_ARRAY", "AS_CLASS_ARRAY", "AS_DATE_ARRAY",
  "AS_LOGICAL_ARRAY", "AS_NUMERIC_ARRAY", "AS_OBJECT_ARRAY", "PROCREQ",
  "CBSTART", "DOIDENT", "FOREACH", "DESCEND", "DOSWITCH", "WITHOBJECT",
  "NUM_DATE", "EPSILON", "POST", "'='", "'<'", "'>'", "'$'", "'+'", "'-'",
  "'*'", "'/'", "'%'", "UNARY", "PRE", "'&'", "'@'", "'\\n'", "';'", "','",
  "'('", "')'", "'{'", "'}'", "':'", "']'", "'['", "'|'", "$accept",
  "Main", "Source", "Line", "Function", "@1", "@2", "@3", "@4", "FunScope",
  "Params", "AsType", "StrongType", "AsArray", "ParamList", "Statement",
  "@5", "@6", "@7", "@8", "@9", "@10", "@11", "CompTimeStr", "CrlfStmnt",
  "@12", "LineStat", "ControlError", "FunScopeId", "Statements", "ExtList",
  "IdentName", "NumValue", "DateValue", "NumAlias", "NilValue", "NilAlias",
  "LiteralValue", "LiteralAlias", "CodeBlockAlias", "Logical",
  "LogicalAlias", "SelfValue", "SelfAlias", "Array", "@13", "ArrayAlias",
  "ArrayAt", "ArrayAtAlias", "Variable", "VarAlias", "MacroVar",
  "MacroVarAlias", "MacroExpr", "MacroExprAlias", "FieldAlias",
  "FieldVarAlias", "AliasId", "AliasVar", "AliasExpr", "VariableAt",
  "VariableAtAlias", "FunIdentCall", "@14", "FunCall", "@15", "@16",
  "FunRef", "FunCallAlias", "ArgList", "Argument", "RefArgument",
  "ExtArgument", "ObjectData", "SendId", "ObjectRef", "ObjectDataAlias",
  "ObjectMethod", "@17", "ObjectMethodAlias", "SimpleExpression", "@18",
  "@19", "@20", "@21", "Expression", "@22", "@23", "ExtExpression",
  "EmptyExpression", "LValue", "LeftExpression", "PostOp", "ExprPostOp",
  "ExprPreOp", "ExprUnary", "ExprAssign", "ExprEqual", "ExprPlusEq",
  "ExprMinusEq", "ExprMultEq", "ExprDivEq", "ExprModEq", "ExprExpEq",
  "ExprOperEq", "ExprMath", "ExprBool", "ExprRelation", "ArrayIndex",
  "IndexList", "ElemList", "CodeBlock", "@24", "BlockExpList", "BlockVars",
  "BlockVarList", "PareExpList1", "PareExpList2", "PareExpList3",
  "PareExpListN", "PareExpList", "PareExpListAlias", "ExpList1",
  "ExpList2", "ExpList3", "ExpList", "IfInline", "IfInlineAlias",
  "VarDefs", "@25", "@26", "@27", "VarList", "ExtVarList", "ExtVarDef",
  "VarDef", "@28", "@29", "@30", "DimList", "DimIndex", "FieldsDef", "@31",
  "FieldList", "MemvarDef", "@32", "MemvarList", "Declaration", "@33",
  "@34", "@35", "DecDataList", "ClassInfo", "DecMethod", "@36", "DecData",
  "@37", "DecList", "DummyArgList", "DummyArgument", "FormalList",
  "OptList", "ExecFlow", "IfEndif", "EmptyStatements", "EmptyStats",
  "IfBegin", "@38", "@39", "IfExpression", "IfElse", "@40", "IfElseIf",
  "@41", "@42", "@43", "@44", "EndIf", "DoCase", "EndCase", "DoCaseStart",
  "@45", "DoCaseBegin", "Cases", "@46", "@47", "@48", "@49", "Otherwise",
  "@50", "@51", "@52", "DoWhile", "@53", "@54", "WhileBegin", "EndWhile",
  "ForNext", "@55", "@56", "@57", "ForAssign", "StepExpr", "ForStatements",
  "ForVar", "ForList", "ForExpr", "ForArgs", "ForEach", "@58", "@59",
  "@60", "Descend", "DoSwitch", "@61", "EndSwitch", "SwitchStart", "@62",
  "SwitchBegin", "SwitchCases", "@63", "@64", "SwitchDefault", "@65",
  "@66", "BeginSeq", "@67", "@68", "@69", "@70", "AlwaysSeq", "Always",
  "RecoverSeq", "RecoverEmpty", "RecoverUsing", "DoName", "DoProc", "@71",
  "@72", "DoArgs", "DoArgList", "DoArgument", "WithObject", "@73", "Crlf", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,    61,    60,    62,    36,    43,    45,    42,
      47,    37,   358,   359,    38,    64,    10,    59,    44,    40,
      41,   123,   125,    58,    93,    91,   124
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   127,   128,   128,   129,   129,   129,   129,   129,   129,
     129,   129,   129,   129,   129,   129,   130,   130,   132,   131,
     133,   131,   134,   131,   135,   131,   136,   136,   136,   136,
     137,   137,   137,   137,   138,   138,   139,   139,   139,   139,
     139,   139,   139,   139,   139,   140,   140,   140,   140,   140,
     140,   140,   140,   140,   141,   141,   142,   142,   142,   142,
     142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
     142,   142,   143,   142,   142,   142,   142,   144,   142,   145,
     146,   142,   147,   148,   142,   142,   142,   142,   142,   149,
     142,   142,   150,   150,   152,   151,   153,   153,   153,   153,
     153,   153,   154,   154,   154,   154,   155,   155,   155,   155,
     156,   156,   157,   157,   158,   158,   158,   158,   158,   158,
     158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
     158,   159,   159,   160,   161,   161,   162,   163,   164,   165,
     166,   167,   167,   168,   169,   170,   172,   171,   173,   174,
     175,   176,   177,   178,   178,   179,   180,   181,   182,   182,
     183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
     183,   183,   183,   184,   184,   184,   185,   185,   185,   185,
     185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
     185,   185,   185,   185,   185,   186,   186,   186,   186,   186,
     186,   187,   187,   187,   187,   187,   187,   187,   187,   187,
     187,   187,   187,   187,   187,   187,   187,   187,   188,   190,
     189,   191,   192,   191,   193,   191,   194,   195,   196,   196,
     197,   197,   198,   198,   198,   198,   198,   199,   199,   200,
     200,   200,   201,   201,   201,   202,   203,   205,   204,   206,
     207,   207,   207,   207,   207,   207,   207,   208,   207,   207,
     207,   207,   207,   207,   207,   207,   207,   209,   207,   207,
     207,   210,   207,   207,   211,   207,   207,   207,   207,   207,
     207,   207,   207,   207,   212,   212,   212,   213,   212,   214,
     212,   212,   215,   215,   216,   216,   217,   217,   217,   217,
     217,   217,   217,   218,   218,   218,   218,   218,   218,   218,
     218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     218,   218,   218,   219,   219,   220,   221,   221,   222,   222,
     222,   223,   223,   223,   223,   223,   223,   223,   223,   223,
     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   231,
     231,   231,   231,   231,   232,   232,   232,   232,   232,   232,
     233,   233,   234,   234,   234,   234,   234,   234,   234,   234,
     234,   235,   236,   236,   236,   237,   237,   239,   238,   240,
     240,   241,   241,   241,   241,   242,   242,   243,   244,   245,
     246,   247,   247,   247,   247,   248,   249,   250,   251,   252,
     252,   253,   253,   253,   253,   254,   256,   255,   257,   255,
     258,   255,   259,   259,   260,   260,   261,   261,   261,   261,
     261,   263,   262,   264,   265,   262,   262,   262,   266,   267,
     267,   267,   269,   268,   270,   270,   270,   272,   271,   273,
     273,   275,   274,   276,   274,   274,   274,   277,   274,   278,
     278,   279,   279,   279,   279,   281,   280,   283,   282,   284,
     284,   284,   284,   285,   285,   286,   287,   287,   287,   287,
     287,   287,   288,   288,   288,   288,   288,   288,   289,   289,
     289,   289,   289,   289,   289,   290,   290,   290,   290,   291,
     291,   292,   292,   294,   295,   293,   296,   296,   296,   296,
     296,   298,   297,   300,   301,   299,   302,   303,   299,   304,
     304,   305,   305,   305,   305,   306,   306,   308,   307,   309,
     309,   311,   312,   310,   313,   314,   310,   316,   317,   315,
     318,   315,   320,   321,   319,   322,   323,   323,   325,   326,
     327,   324,   328,   328,   329,   329,   330,   330,   330,   330,
     331,   331,   332,   332,   333,   333,   334,   334,   336,   337,
     338,   335,   339,   339,   341,   340,   340,   342,   344,   343,
     345,   345,   347,   346,   348,   346,   346,   346,   350,   351,
     349,   353,   354,   355,   356,   352,   357,   357,   358,   359,
     359,   359,   360,   361,   362,   362,   364,   363,   365,   363,
     366,   366,   367,   367,   367,   367,   367,   368,   368,   368,
     368,   368,   370,   369,   369,   371,   371
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     3,     4,     6,     0,     5,
       0,     5,     0,     8,     0,     8,     0,     1,     1,     1,
       0,     1,     1,     3,     0,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     4,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     0,     4,     2,     2,     2,     0,     4,     0,
       0,     5,     0,     0,     5,     1,     1,     1,     3,     0,
       4,     4,     1,     3,     0,     2,     1,     1,     1,     1,
       1,     1,     4,     7,     4,     7,     0,     1,     1,     1,
       1,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     2,     1,     2,
       2,     1,     1,     2,     1,     2,     0,     4,     2,     2,
       2,     1,     2,     1,     1,     2,     2,     2,     2,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     1,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     0,
       5,     1,     0,     5,     0,     5,     2,     2,     1,     3,
       1,     1,     2,     2,     2,     2,     2,     1,     1,     3,
       3,     2,     1,     1,     1,     4,     2,     0,     5,     2,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     1,
       1,     0,     3,     1,     0,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     0,
       3,     1,     1,     1,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     3,     4,     1,     3,     0,     6,     1,
       3,     0,     1,     1,     3,     2,     4,     2,     2,     2,
       2,     1,     1,     1,     1,     2,     2,     3,     3,     3,
       3,     8,     7,     7,     6,     2,     0,     4,     0,     4,
       0,     4,     1,     3,     1,     3,     1,     2,     4,     2,
       3,     0,     3,     0,     0,     6,     2,     3,     2,     2,
       3,     4,     0,     4,     2,     4,     3,     0,     4,     2,
       4,     0,     8,     0,     5,     3,     3,     0,     7,     1,
       3,     1,     2,     1,     2,     0,     6,     0,     3,     0,
       1,     1,     3,     1,     3,     1,     2,     3,     5,     4,
       5,     7,     3,     4,     6,     5,     6,     8,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     3,     4,     1,
       2,     0,     1,     0,     0,     6,     1,     1,     1,     1,
       1,     0,     4,     0,     0,     6,     0,     0,     7,     1,
       1,     3,     3,     2,     4,     1,     1,     0,     3,     1,
       2,     0,     0,     6,     0,     0,     7,     0,     0,     5,
       0,     5,     0,     0,     7,     1,     1,     1,     0,     0,
       0,    12,     1,     1,     0,     2,     2,     3,     2,     3,
       1,     1,     1,     3,     2,     1,     1,     3,     0,     0,
       0,    10,     0,     1,     0,     4,     2,     1,     0,     4,
       1,     2,     0,     5,     0,     6,     1,     2,     0,     0,
       5,     0,     0,     0,     0,    10,     0,     3,     1,     0,
       3,     3,     1,     2,     1,     1,     0,     4,     0,     3,
       0,     2,     1,     2,     1,     2,     3,     1,     1,     1,
       1,     1,     0,     6,     4,     1,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     0,   114,    77,   136,   131,   132,   416,   418,     0,
       0,   138,   141,   142,   122,   121,    28,   118,    79,     0,
       0,   527,   447,   545,   117,     0,   116,   115,   442,   119,
     420,    82,   591,    72,     0,   144,     0,   153,   154,     0,
     120,     0,     0,   129,   387,   608,     0,   130,   578,     0,
     133,     0,   625,   626,     0,   146,     0,     0,     0,     8,
       6,     0,     7,   151,   303,   305,     0,   304,     0,   306,
       0,     0,   308,     0,   309,     0,   310,     0,   311,     0,
     316,     0,   314,     0,   315,     0,     0,     0,   312,   313,
     317,     0,   221,   319,     0,   321,     0,     0,   322,     0,
       0,    94,    94,    94,    94,   358,   359,   360,   361,   362,
     363,    94,   307,   401,   402,   403,   404,   318,     0,     0,
       0,     0,     0,   320,     0,    85,    86,    87,     5,    94,
     488,     0,   489,     0,     0,   490,     0,   491,   493,   494,
       0,   574,   492,    94,    94,     4,     9,     0,    76,     0,
     135,   134,     0,     0,     0,   123,   125,     0,   122,   121,
     118,     0,   127,   124,   117,     0,   128,   126,   129,     0,
       0,     0,   250,   252,   251,   253,   255,   256,   259,   260,
     285,   263,   264,   261,   262,   265,   266,   291,   270,   273,
     284,     0,     0,   278,   279,   280,   276,   277,   281,   282,
     283,   254,   401,   402,   404,   286,     0,   269,   503,    89,
       0,   112,    74,     0,   285,   284,   326,   327,     0,     0,
      75,   151,   303,   305,   304,   306,   308,   309,   310,   311,
     316,   298,   299,   297,   313,   301,   319,   300,   322,     0,
       0,   307,   302,   320,   158,     0,     0,     0,     0,     0,
      71,   604,   605,   606,     0,   453,     0,    34,     0,     0,
      92,     0,   391,   610,   151,   314,   315,   561,   317,   321,
     318,   562,     0,     0,     0,     0,   156,     0,   406,   294,
     242,   243,   244,   241,     1,     0,    14,    12,    13,    11,
      10,     0,     0,   152,   219,     0,     0,   201,     0,     0,
     203,   173,   174,   175,   176,   195,     0,   137,   202,   180,
       0,   139,   204,   181,   183,     0,   143,   206,   182,     0,
     145,   207,   184,     0,   148,   149,   185,     0,   150,   186,
       0,   208,   192,   196,     0,   155,   222,    62,   211,   177,
     197,     0,   157,   224,    63,   212,   178,   198,     0,     0,
     173,   161,     0,   165,     0,   166,   168,     0,   167,     0,
     169,     0,   170,     0,   171,   160,   174,   163,   175,   164,
     193,     0,   200,   162,     0,   172,   194,     0,   209,     0,
      60,   210,     0,   218,   187,     0,   227,    59,   215,   189,
       0,   246,   247,   213,     0,   190,     0,   249,    61,   214,
     191,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,   325,    66,    65,    69,    68,    67,     0,   140,   205,
       0,   405,    64,   217,   179,   199,     0,   397,     0,   398,
       0,   399,     0,   400,     0,   415,    58,   216,   188,    56,
       0,   513,   520,   519,     0,     0,   495,   101,   418,   108,
     118,    99,    97,   110,   100,     0,     0,    98,    96,   526,
     531,   537,   525,   523,     0,     0,     0,     0,   577,     0,
     576,    70,    57,     0,    95,    34,     0,   422,     0,     0,
       0,   328,   330,   329,     0,   226,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    88,    34,    80,   424,   426,   528,    34,
       0,   553,   552,     0,   159,    34,     0,     0,    83,     0,
       0,   610,     0,   451,     0,   455,    45,    40,    37,     0,
      38,    39,    36,    41,    43,    50,    51,    47,     0,    48,
      49,    46,    52,   457,    35,    44,   465,   456,     0,     0,
     392,    34,     0,   393,     0,   609,     0,     0,     0,   622,
       0,   237,     0,   238,   231,   385,   295,   230,     0,    15,
      18,    20,   294,   331,   292,   293,   382,     0,   381,   333,
     332,   334,   336,   337,   338,   339,   344,   342,   294,   343,
     294,   340,   341,   345,   348,   349,   294,   240,   350,   352,
     353,   354,   355,   357,   356,   351,   239,   335,   346,   407,
     408,   409,   410,   347,   511,     0,   496,   516,     0,   497,
       0,     0,   111,     0,     0,   534,   521,     0,   540,   522,
     542,     0,   588,     0,   586,    78,     0,   431,   436,     0,
       0,   417,   419,   294,     0,   258,   288,   268,   272,   275,
     370,   371,   372,   377,   378,   375,   376,   369,   380,   373,
     374,   379,   364,   365,   366,   367,   368,   290,   294,     0,
     407,   504,    90,   113,   427,   429,     0,     0,   449,     0,
     448,   548,   444,     0,     0,   443,   421,     0,   499,     0,
     592,    73,   607,     0,    16,   469,   467,     0,   461,   463,
      42,    53,     0,   469,    93,    91,   395,     0,     0,   612,
     151,   291,   618,   284,   286,   611,   614,     0,   565,   566,
     568,   563,   579,   624,     0,   245,   232,   233,   234,   236,
     226,   235,   294,   147,     0,     0,     0,     0,     0,   228,
     383,     0,     0,     0,     0,     0,     0,     0,   498,     0,
       0,     0,   538,     0,   524,     0,     0,   582,     0,     0,
     575,   587,   439,   432,     0,   437,     0,   438,   423,     0,
       0,     0,   294,   294,     0,     0,   430,   425,    81,    34,
       0,   446,    34,    84,   500,   599,     0,   120,     0,    34,
       0,   470,   471,    34,   462,   464,   454,   467,     0,   459,
       0,   389,     0,   394,    34,   613,   615,   564,     0,   572,
       0,   386,    19,    30,    21,    30,   294,   220,   384,   223,
     225,   248,   512,   514,     0,    30,   102,    30,   104,   532,
       0,     0,     0,   543,     0,   589,   584,   434,   440,     0,
     294,   414,     0,     0,   505,   428,   450,     0,   445,   602,
       0,   593,     0,     0,    17,     0,    34,    34,   476,    34,
       0,     0,   468,     0,     0,    34,     0,   388,   396,   616,
     567,   573,   569,   623,    31,     0,    32,    34,     0,   229,
       0,   517,     0,     0,     0,   539,   535,   541,     0,     0,
       0,     0,     0,   441,     0,   413,   412,   554,   603,   596,
       0,     0,    34,   482,   294,   477,     0,     0,    34,   472,
       0,   460,   458,   466,   390,     0,     0,     0,    54,     0,
     515,     0,     0,     0,   533,     0,   546,   547,   544,   583,
     590,     0,   435,   411,     0,   549,   598,   594,     0,   600,
     601,   294,   483,   475,     0,   473,   452,    34,   479,     0,
      34,   570,    23,    33,    34,    25,   518,   103,   105,   536,
     585,   555,     0,     0,     0,     0,   294,   478,   294,   480,
      34,   485,     0,    55,   550,   595,   597,   484,   474,     0,
     294,   486,     0,   571,     0,   481,     0,   558,   556,   551,
     487,   559,   557
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    57,    58,   451,    60,   744,   746,   745,   747,    61,
     885,   553,   554,   555,   886,   452,   249,   147,   213,   687,
     247,   697,   511,   261,   212,   149,   698,   454,   455,   456,
     210,    63,   172,   173,    66,   174,    68,   175,    70,    71,
     176,    73,   177,    75,   178,   279,    77,   179,    79,   214,
      81,   181,    83,   182,    85,    86,    87,   304,   183,   184,
     185,    91,    92,   582,   186,   598,   600,   187,    94,   748,
     573,   574,   749,   188,   283,    96,    97,   189,   606,    99,
     215,   486,   488,   489,   490,   576,   487,   508,   586,   577,
     239,   192,   411,   193,   194,   195,   196,   104,   105,   106,
     107,   108,   109,   110,   197,   198,   199,   200,   338,   298,
     578,   201,   262,   812,   562,   563,   113,   114,   115,   116,
     205,   118,   119,   120,   121,   122,   207,   124,   125,   152,
     153,   246,   476,   515,   516,   517,   773,   774,   902,   648,
     649,   126,   245,   526,   127,   219,   520,   457,   705,   534,
     712,   808,   707,   259,   713,   709,   803,   800,   954,   955,
     801,   802,   129,   130,   699,   992,   131,   510,   784,   208,
     444,   755,   445,   625,   890,   757,   931,   446,   132,   463,
     133,   218,   134,   464,   633,   894,   763,   935,   465,   634,
     840,   765,   135,   766,   898,   136,   938,   137,   790,   972,
     994,   523,   945,   993,   271,   272,   729,   730,   138,   819,
     925,   982,   882,   139,   469,   470,   140,   273,   141,   643,
     844,   901,   644,   768,   900,   142,   248,   795,   909,   973,
     947,   948,   861,   862,   863,   253,   143,   531,   263,   565,
     725,   726,   144,   734,   458
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -701
static const yytype_int16 yypact[] =
{
    4588,   117,  -701,   334,  -701,    37,    57,   648,   484,   -92,
    7032,  -701,  -701,  -701,  8200,  8200,  -701,   100,   768,  7032,
    7032,  -701,  1195,  -701,   334,  7500,  -701,  -701,   191,  -701,
    1480,  1557,  -701,   334,   123,  -701,   245,  -701,  -701,  8200,
    -701,  8200,   603,   239,  -701,  -701,  7500,  -701,  -701,  7032,
    -701,   161,  -701,  -701,  7149,  -701,  2626,   306,  4712,  -701,
    -701,   505,  -701,     3,    28,    34,  2465,    17,  2626,    19,
    2626,  2626,    30,  2626,    97,  2626,   165,  2626,    32,  2626,
      42,  2465,    20,  2465,    41,  2465,  7617,  2626,    55,    31,
     241,  2626,  -701,    53,  2626,    54,   230,  2626,    73,  2626,
     682,  -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,
    -701,  -701,   167,  -701,  -701,  -701,  -701,   119,  2465,   153,
     178,   183,   302,   140,  2626,  -701,  -701,  -701,  -701,  -701,
    -701,   547,  -701,  4983,   431,  -701,  7032,  -701,  -701,  -701,
    5588,   297,  -701,  -701,  -701,  -701,  -701,  7032,  -701,   117,
    -701,  -701,  8200,  8200,  7032,  -701,  -701,   161,  -701,  -701,
    -701,  7032,  -701,  -701,  -701,   191,  -701,  -701,  -701,  7032,
    7032,  8200,   152,   229,   372,   870,  1333,  7802,  1762,   525,
    7667,  1154,  1639,   359,   943,  1097,  7862,  -701,  7740,  7922,
     571,  7118,   311,  -701,  -701,  -701,  -701,  -701,  -701,  -701,
    -701,  1771,   577,   581,   592,  7982,   315,  1800,  -701,  -701,
     409,  -701,  -701,  4188,  4450,  -701,  -701,  -701,   117,  8200,
    -701,   205,   221,   221,   -12,    -5,    39,    66,   193,   341,
     221,    76,   174,   209,   221,    49,   206,   217,   214,    23,
     274,   235,   190,   259,   354,  8200,  8200,  4188,   117,  7032,
    -701,  -701,  -701,  -701,   417,   328,   117,  4079,   353,   117,
     369,   340,  3232,   419,   345,    99,   185,   209,   461,   224,
     260,  -701,   -20,  7032,  3880,  7032,  -701,  8200,  7118,  3514,
    -701,  -701,  -701,  -701,  -701,   117,  -701,  -701,  -701,  -701,
    -701,  8200,  8200,  -701,  -701,  7032,  3631,  -701,   -82,  7032,
    -701,  -701,  -701,  -701,  -701,  -701,  7032,  -701,  -701,  -701,
    7032,  -701,  -701,  -701,  -701,  7032,  -701,  -701,  -701,  7032,
    -701,  -701,  -701,  7032,  -701,  -701,  -701,  7032,  -701,  -701,
    7032,  -701,  -701,  -701,  7032,  -701,  -701,  -701,  -701,  -701,
    -701,  7032,  -701,  -701,  -701,  -701,  -701,  -701,    37,    57,
     464,  -701,   477,  -701,   481,  -701,  -701,   495,  -701,   501,
    -701,   193,  -701,   341,  -701,  -701,   506,  -701,   520,  -701,
    -701,   539,   550,  -701,   564,  -701,  -701,  7032,  -701,  7032,
    -701,  -701,  7032,  -701,  -701,  7032,  -701,  -701,  -701,  -701,
    7032,  -701,  -701,  -701,  2626,  -701,  7032,  -701,  -701,  -701,
    -701,  -701,  -701,  7032,  7032,  7032,  7032,  7032,  7032,  7032,
    2626,  -701,  -701,  -701,  -701,  -701,  -701,  7032,  -701,  -701,
    7032,  -701,  -701,  -701,  -701,  -701,  7032,  -701,  7032,  -701,
    7032,  -701,  7032,  -701,  7032,  -701,  -701,  -701,  -701,  -701,
     117,  -701,  -701,  -701,   530,   622,  -701,  -701,   542,  -701,
     242,  -701,  -701,  -701,  -701,   638,  5104,  -701,  -701,  -701,
    -701,  -701,  -701,  -701,   515,   463,  3880,  5709,  -701,   683,
    -701,  -701,  -701,  3880,  -701,  3378,   517,  -701,   517,  2208,
     426,  1419,  -701,  -701,   486,  -701,  4079,  4079,  4079,  4079,
    4079,  7032,  7032,  7032,  7032,  7032,  7032,  7032,  7032,  7032,
    7032,  7032,  7032,  7032,  7032,  7032,  7032,  7032,  4079,  3760,
     117,   117,  8200,  -701,  3378,   492,  -701,  -701,  -701,  4079,
     552,  -701,  -701,  7032,  -701,  4079,   357,   552,   492,  5225,
    3880,   419,   543,  -701,  8200,  -701,  -701,  -701,  -701,  8200,
    -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,  8200,  -701,
    -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,   563,   117,
    -701,  4079,   504,   529,  6915,  -701,  7266,  7500,  3880,   634,
     607,  -701,  7500,  -701,  -701,  -701,  7118,  -701,   -73,  -701,
     534,   537,  3514,  7118,  -701,  7118,  -701,  3631,   541,  7118,
    7118,  7118,  7118,  7118,  7118,  7118,  7118,  7118,  3514,  7118,
    3514,  7118,  7118,  7118,  7118,  7118,  3514,  -701,  7118,  7118,
    7118,  7118,  7118,  7118,  7118,  7118,  -701,  7118,  7118,  7118,
    7118,  7118,  7118,  7118,  -701,  7032,  -701,  -701,   530,  -701,
    8200,  8200,  -701,  7032,   117,  -701,  -701,   463,  -701,  -701,
    -701,  7032,  -701,   407,  -701,  -701,  7032,   653,   532,   337,
    8200,  -701,  -701,  7383,  3760,  -701,  -701,  -701,  -701,  -701,
    7235,  7118,  1419,  1419,  1419,  1419,  1419,   617,  1419,  1419,
    1419,  1419,   332,   332,   396,   396,   396,  -701,  7383,   562,
    2983,  -701,  -701,  -701,   675,   532,  4188,   117,  -701,  8200,
    -701,  7118,  -701,  8200,  8200,  -701,  -701,   117,  -701,  4833,
    -701,  -701,  -701,   670,  -701,  2845,   353,  2746,  -701,  -701,
    -701,  -701,  8200,  2845,  -701,  -701,  -701,  7032,  4017,  7383,
     256,   555,  -701,   560,  4318,   587,  -701,  8200,  7118,  -701,
     594,  -701,  -701,  -701,  6798,  -701,   232,    76,   209,    49,
     254,   217,  3514,  -701,   117,   576,   117,   595,   365,  -701,
    -701,  3631,   395,   403,   415,  6072,  3880,  7032,  -701,   362,
     373,  3880,  -701,  7032,  -701,   117,  6193,  7118,   117,  7032,
    -701,  -701,  7118,  -701,   708,  -701,  7032,   600,  -701,   601,
    2983,   609,  7383,  7383,  5346,  7032,  -701,  -701,  -701,  4079,
     684,  -701,  4079,  -701,  -701,   659,   117,  2888,  8200,  4079,
     611,   614,   615,  4079,  -701,  -701,  -701,  -701,   -13,  -701,
     624,  7118,   268,  -701,  4079,  -701,  7383,   486,  7266,   645,
    6556,  -701,  -701,  8113,  -701,  8113,  3514,  -701,  -701,  -701,
    -701,  -701,  -701,  -701,  3880,  8113,  -701,  8113,  -701,  -701,
    5830,  3880,  5830,  -701,   117,  -701,  7118,  -701,  7118,  7032,
    7383,  -701,   625,   627,  -701,  7118,  -701,  7032,  -701,  -701,
    8200,  -701,   117,   117,  -701,  8200,  4079,  8189,  -701,  4079,
    3919,   666,  -701,  8200,   117,  4079,  7032,  -701,  -701,  -701,
    -701,  -701,  -701,  -701,  -701,   629,   632,  4079,   636,  -701,
    5346,  -701,   637,   639,  5467,  -701,  -701,  -701,   213,  5951,
    5951,   117,  7032,  7118,   640,  -701,  -701,  3976,  -701,   689,
    6314,  6314,  8226,  -701,  7032,  -701,   117,  8200,  4079,   615,
    8070,  -701,  -701,  -701,  7118,   117,   117,  8157,  -701,   117,
    -701,  5346,   117,   117,  -701,  5467,  -701,  -701,  -701,  -701,
    -701,  5951,  7118,  -701,  7032,  -701,  -701,  -701,   117,  -701,
    -701,  7032,  -701,  -701,   448,  -701,  -701,  8247,  -701,  8200,
    4079,  -701,  -701,  -701,  4079,  -701,  -701,  -701,  -701,  -701,
    -701,  7118,   117,   741,  6677,   451,  7032,  -701,  7032,  -701,
    8282,  -701,  6435,  -701,  -701,  -701,  -701,  -701,  -701,   468,
    7032,  -701,    16,  -701,  6435,  -701,   509,  8200,  8200,  -701,
    -701,  -701,  -701
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -701,  -701,  -701,    35,   703,  -701,  -701,  -701,  -701,  -701,
    -315,  -466,   104,  -628,  -701,   181,  -701,  -701,  -701,  -701,
    -701,  -701,  -701,  -701,   218,  -701,  -129,  -701,  -701,   623,
    -701,  3325,  1278,  1312,   676,   223,   678,   325,   679,   686,
     391,   690,   503,   693,   606,  -701,   694,   728,   696,   809,
     697,     0,   701,    44,   702,   524,  -701,  2319,  1441,  1633,
    1730,  -701,  -170,  -701,  1842,  -701,  -701,  -556,  -701,  -332,
    -631,  -504,  -276,  1891,  -314,  -701,  -701,  2135,  -701,  -701,
      -8,  -701,  -701,  -701,  -701,  3798,  -701,  -701,  -563,  -519,
    -701,  2233,  -701,   972,  2288,  -701,  2386,  -701,  -701,  -701,
    -701,  -701,  -701,  -701,  2447,  -701,  -701,  -701,  4244,  -701,
    -701,  1053,  -701,  -701,  -701,  -701,   759,   760,  -701,   765,
     146,   705,     8,  -701,  -701,  -701,  1176,   707,  -701,  -701,
    -701,  -701,   641,   549,   103,  -146,  -701,  -701,  -701,   283,
    -701,  -701,  -701,  -701,  -701,  -701,   554,   203,  -701,  -701,
    -701,  -701,  -701,  -524,  -701,  -691,  -701,    85,  -673,  -172,
    -701,   -64,  -701,  -701,    77,  -512,  -701,  -701,  -701,  -701,
     367,  -701,  -701,  -701,  -701,  -701,  -701,  -432,  -701,  -450,
    -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,   343,  -701,
    -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,
    -701,  -701,  -701,  -181,   248,  -701,    -2,  -701,  -701,  -701,
    -701,  -701,  -701,  -701,  -701,   175,  -701,  -701,  -701,  -701,
    -701,  -701,   182,  -701,  -701,  -701,  -701,  -701,  -701,  -701,
    -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,   286,
    -701,  -700,  -701,  -701,  2961
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -622
static const yytype_int16 yytable[] =
{
      82,   485,   190,   575,   453,   679,   477,   477,   721,   647,
     708,   453,   626,   629,   636,   639,   805,   700,   206,   815,
     775,   809,   779,   307,   750,   231,   306,   154,   310,   334,
     311,   566,   521,   997,   251,    59,   587,   295,   293,   315,
     379,   327,   588,   299,    84,   742,   265,   781,   684,   743,
     341,   330,   307,   688,   311,   335,   281,   786,    82,   692,
     722,   998,   385,   390,   377,   316,   302,   328,   302,   232,
     302,   302,   150,   302,   316,   302,   342,   302,   252,   302,
     607,   302,   396,   302,   383,   302,   366,   302,   386,   391,
     266,   302,   151,   286,   302,   716,   616,   302,   567,   302,
     282,   320,    84,   -29,   -29,   873,   319,   485,   397,   874,
     303,   335,   303,   296,   303,   303,   879,   303,   302,   303,
     296,   303,   294,   303,   302,   303,   522,   303,   420,   303,
     368,   303,   320,    82,   335,   303,   -94,   -94,   303,   336,
      82,   303,   296,   303,   296,   296,   117,   -94,   -94,   434,
     679,   852,   853,   296,   421,   296,   296,   -94,   -94,   296,
     343,   295,   303,   721,   296,   480,   296,   296,   303,   -94,
     -94,   242,  -317,   392,   323,   435,   417,    84,   296,   296,
     296,    62,   921,   804,    84,  -303,  -303,   764,   828,   -94,
     -94,   296,   270,    37,    38,   336,   758,   276,   296,  -314,
     324,   296,   418,   128,   117,  -303,  -303,  -303,  -303,   342,
    -303,  -303,   305,   514,  -296,   722,   -94,   -94,   336,   904,
     342,   148,   296,    67,   296,   421,   244,   333,   324,   340,
     936,   347,   372,    52,    53,   -94,   -94,    51,   299,   288,
     293,   386,   220,   832,   296,  -109,  -109,   514,   224,   397,
     382,   250,   391,   937,   843,   254,   -94,   -94,   260,   391,
     721,   289,  -305,  -305,   425,   296,   752,   293,   753,   224,
     418,   426,   854,   427,   754,  -303,   383,   296,   975,   117,
     275,    67,  -305,  -305,  -305,  -305,   117,  -305,  -305,  -221,
     296,   293,   296,   343,   435,   421,   428,  -315,   429,   296,
     337,   430,   344,   431,   343,   989,   284,   380,  -296,   352,
     296,   387,   722,  -318,   468,   296,   398,   996,   296,   412,
     413,   414,   415,   856,   294,    69,   858,   632,   895,   416,
     897,   296,  -312,   868,   296,   422,   392,   872,   632,   296,
    -321,   436,   296,   392,   401,   402,   296,   439,   878,   296,
     225,   294,  -305,   394,   296,  -151,    67,  -151,   -94,   -94,
     296,   471,   472,    67,   403,   404,   405,   406,   377,   407,
     408,   225,  -617,  -617,  -617,   294,   328,  -221,   930,  -221,
     293,   306,   934,    69,   296,   296,   876,   939,   940,   498,
     877,    72,  -312,  -312,   281,   953,  -560,   410,   949,   950,
     913,   915,   740,   916,   165,  -304,  -304,   307,   693,   923,
     281,   354,  -312,  -312,  -312,  -312,   226,  -312,  -312,   966,
     432,   928,   433,   969,   468,  -304,  -304,  -304,  -304,   970,
    -304,  -304,   953,   509,   410,   427,   532,   226,   282,   503,
     504,   505,   506,   507,   769,   642,   952,   533,   459,    72,
     -94,   -94,   958,   498,   282,   776,    82,   953,    69,   953,
     559,   777,   986,  -560,   294,    69,   821,    82,   460,   461,
     462,   953,   556,    52,    53,   694,   558,   357,    52,    53,
     459,   835,  -312,   826,   296,   827,   564,   -27,   -27,    52,
      53,   979,   837,  -125,   981,  -304,   383,   296,   983,   293,
      84,   638,   462,    74,   778,   505,   506,   507,   291,   292,
     888,    84,   307,   826,   991,   829,   311,  -125,  -125,  -125,
     892,   826,   893,   830,    72,    52,    53,   512,   227,    82,
     316,    72,   459,   826,   327,   831,   320,  -125,  -125,  -125,
    -125,   335,  -125,  -125,   654,  -107,  -107,   442,   443,   227,
     889,  -125,   635,   461,   462,   342,   723,   485,  -311,  -311,
     328,    74,   440,   441,   442,   443,   976,   265,   977,   976,
     794,   987,   737,    84,   418,  -125,  -125,  -125,  -311,  -311,
    -311,  -311,   714,  -311,  -311,   421,   976,  -125,   995,   359,
     655,   656,   657,   658,   659,  -125,  -125,  -125,  -125,   435,
    -125,  -125,   117,  -125,   536,   294,    76,  -125,     2,  -125,
     686,   266,   677,   117,   155,   156,   266,   545,   546,   547,
     548,   549,   550,   551,   552,   158,   159,   976,   160,  1000,
     717,   228,   162,    52,    53,   650,    74,   440,   627,   442,
     443,   630,   631,    74,   163,  -125,   164,   718,  -311,    26,
      27,   733,   228,   -22,    29,   166,   -24,  -123,   703,    52,
      53,  -125,  -433,   167,    76,  -125,   751,  -125,    52,    53,
     689,  -619,  -619,  -619,   498,   117,  -620,  -620,  -620,    67,
     782,  -123,  -123,  -123,   785,    40,   514,  -506,  -506,   796,
      67,   794,   361,  -508,  -508,   823,   168,  -509,  -509,    82,
      47,  -123,  -123,  -123,  -123,   816,  -123,  -123,  -510,  -510,
     724,   723,   818,   270,   825,   401,   402,   847,   270,   850,
     641,   642,   859,   860,   257,   849,   294,   735,    78,   851,
     857,   869,   870,   871,    82,   403,   404,   405,   406,    76,
     407,   408,   881,    84,   875,   905,    76,   906,   920,   926,
     927,  -123,    67,   229,   946,    82,   929,   932,   985,   933,
     943,   287,   351,   467,   353,   355,    82,  -123,   524,   202,
     203,  -123,   356,  -123,   229,   204,   358,  -127,    84,   360,
     362,    69,   364,   365,    82,   409,    78,   367,   369,   787,
     224,   373,    69,   375,   478,   224,   528,   685,   810,    84,
     527,  -127,  -127,  -127,   988,   410,   919,   637,   723,    80,
      84,   820,   628,   999,   363,   731,   880,   702,   770,   180,
      82,  -127,  -127,  -127,  -127,   771,  -127,  -127,    84,     0,
       0,     0,     0,     0,   230,     0,     0,     0,     0,     0,
      82,     0,    82,     0,     0,   117,     0,    72,     0,     0,
       0,     0,     0,     0,    69,   230,     0,     0,    72,     0,
       0,    78,     0,     0,    84,   724,     0,    80,    78,     0,
       0,  -127,     0,     0,     0,     0,     0,     0,     0,   310,
     117,     0,     0,     0,    84,     0,    84,  -127,     0,     0,
      82,  -127,   225,  -127,    82,     0,     0,   225,     0,    82,
      82,   117,     0,  -306,  -306,   311,     0,     0,     0,     0,
      82,    82,   117,     0,     0,     0,     0,     0,     0,     0,
      72,     0,    67,  -306,  -306,  -306,  -306,     0,  -306,  -306,
     117,    82,     0,     0,    84,    82,     0,     0,    84,     0,
       0,    82,    80,    84,    84,     0,     0,     0,     0,    80,
       0,     0,   379,     0,    84,    84,     0,    67,   226,    74,
       0,     0,   724,   226,     0,     0,   117,     0,     0,     0,
      74,     0,   101,     0,    82,    84,  -313,  -313,    67,    84,
       0,     0,    82,     0,     0,    84,   117,     0,   117,    67,
       0,     0,     0,  -306,    82,   296,  -313,  -313,  -313,  -313,
       0,  -313,  -313,     0,     0,     0,     0,    67,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    84,     0,
       0,     0,     0,     0,    69,     0,    84,     0,     0,     0,
     101,     0,    74,     0,     0,     0,   117,     0,    84,     0,
     117,     0,     0,    67,     0,   117,   117,     0,     0,     0,
       0,     0,     0,   112,     0,     0,   117,   117,     0,    69,
       0,     0,    76,    67,     0,    67,  -313,     0,   296,     0,
     227,     0,     0,    76,     0,   227,     0,   117,   241,     0,
      69,   117,     0,     0,     0,     0,     0,   117,     0,     0,
      72,    69,     0,     0,     0,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,   101,   382,     0,     0,    69,
       0,   112,   101,    67,     0,     0,     0,    67,     0,     0,
     117,     0,    67,    67,     0,    72,     0,     0,   117,     0,
    -317,  -317,   383,    67,    67,    76,     0,     0,     0,   371,
     117,     0,     0,     0,     0,    69,    72,     0,     0,     0,
    -317,  -317,  -317,  -317,    67,  -317,  -317,    72,    67,     0,
       0,     0,     0,   334,    67,    69,     0,    69,     0,     0,
       0,     0,     0,   228,     0,    72,   123,     0,   228,     0,
       0,     0,     0,     0,    78,     0,   112,  -314,  -314,   335,
       0,     0,     0,   112,     0,    78,     0,    67,     0,     0,
       0,   243,    74,     0,  -124,    67,     0,  -314,  -314,  -314,
    -314,    72,  -314,  -314,     0,    69,     0,    67,     0,    69,
    -317,     0,   243,     0,    69,    69,     0,     0,  -124,  -124,
    -124,    72,     0,    72,   123,    69,    69,    74,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -124,  -124,
    -124,  -124,     0,  -124,  -124,     0,    69,    78,    74,     0,
      69,     0,   374,     0,     0,    80,    69,     0,     0,    74,
       0,     0,     0,   336,     0,     0,    80,  -314,    64,   296,
       0,    72,     0,     0,     0,    72,     0,    74,     0,     0,
      72,    72,     0,     0,     0,   229,     0,     0,  -124,    69,
     229,    72,    72,   222,     0,    76,     0,    69,     0,   123,
       0,     0,    65,     0,  -124,     0,   123,     0,  -124,    69,
    -124,     0,    72,    74,   222,     0,    72,     0,     0,     0,
       0,     0,    72,     0,     0,     0,    64,   223,    80,     0,
      76,     0,   315,    74,     0,    74,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   223,     0,
       0,    76,     0,     0,     0,    72,  -308,  -308,   316,     0,
      65,     0,    76,    72,     0,     0,   230,     0,     0,     0,
       0,   230,     0,     0,     0,    72,  -308,  -308,  -308,  -308,
      76,  -308,  -308,    74,     0,     0,     0,    74,     0,     0,
       0,     0,    74,    74,     0,     0,     0,     0,     0,     0,
       0,    64,     0,    74,    74,     0,     0,     0,    64,     0,
       0,     0,     0,     0,     0,     0,    76,    78,   101,     0,
       0,     0,     0,     0,    74,     0,     0,     0,    74,   101,
       0,    88,     0,     0,    74,    65,    76,     0,    76,   493,
     494,   495,    65,     0,     0,     0,  -308,     0,   296,     0,
       0,     0,    78,     0,     0,     0,   233,   496,   497,     0,
       0,     0,     0,     0,     0,     0,   498,    74,     0,     0,
       0,     0,     0,    78,     0,    74,     0,   267,     0,  -128,
       0,     0,     0,     0,    78,     0,    76,    74,     0,    88,
      76,   101,     0,     0,     0,    76,    76,     0,    80,   112,
       0,     0,    78,  -128,  -128,  -128,    76,    76,     0,     0,
     112,     0,   499,   500,   501,   502,   503,   504,   505,   506,
     507,     0,     0,  -128,  -128,  -128,  -128,    76,  -128,  -128,
       0,    76,     0,    80,     0,     0,     0,    76,    78,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    80,     0,  -126,     0,    78,     0,
      78,     0,     0,     0,    88,    80,     0,     0,     0,     0,
      76,    88,   112,  -128,     0,     0,     0,     0,    76,     0,
    -126,  -126,  -126,    80,     0,     0,     0,     0,     0,  -128,
      76,     0,     0,  -128,     0,  -128,     0,     0,     0,     0,
    -126,  -126,  -126,  -126,     0,  -126,  -126,     0,    78,     0,
     241,     0,    78,     0,     0,   241,     0,    78,    78,    80,
       0,     0,   123,    89,     0,     0,     0,     0,    78,    78,
       0,     0,     0,   123,     0,     0,     0,     0,   341,    80,
       0,    80,     0,     0,     0,     0,     0,     0,   234,    78,
    -126,     0,     0,    78,     0,     0,     0,     0,     0,    78,
       0,   101,  -315,  -315,   342,     0,  -126,     0,     0,   234,
    -126,     0,  -126,     0,     0,     0,     0,     0,     0,     0,
       0,    89,  -315,  -315,  -315,  -315,     0,  -315,  -315,    80,
       0,     0,    78,    80,     0,   123,   101,     0,    80,    80,
      78,     0,     0,     0,     0,     0,     0,     0,     0,    80,
      80,     0,    78,     0,     0,     0,     0,   101,     0,     0,
      90,     0,     0,     0,    64,     0,     0,     0,   101,     0,
      80,     0,     0,   243,    80,    64,     0,     0,   243,     0,
      80,     0,   112,     0,     0,   235,   101,     0,   343,     0,
       0,     0,  -315,     0,   296,     0,    89,     0,    65,     0,
       0,   323,     0,    89,     0,     0,   268,     0,     0,    65,
     417,     0,     0,    80,     0,     0,     0,   112,    90,     0,
       0,    80,   101,     0,     0,  -310,  -310,   324,     0,     0,
       0,     0,     0,    80,  -307,  -307,   418,    64,   112,   434,
       0,     0,   101,     0,   101,  -310,  -310,  -310,  -310,   112,
    -310,  -310,     0,     0,  -307,  -307,  -307,  -307,     0,  -307,
    -307,     0,     0,  -320,  -320,   435,     0,   112,     0,     0,
       0,    65,    93,     0,     0,   222,     0,     0,     0,     0,
     222,     0,     0,  -320,  -320,  -320,  -320,     0,  -320,  -320,
       0,     0,   101,    90,     0,     0,   101,   236,     0,     0,
      90,   101,   101,   112,     0,   123,     0,     0,     0,   223,
       0,     0,   101,   101,   223,  -310,     0,   296,   236,     0,
       0,    95,     0,   112,  -307,   112,   296,    88,     0,     0,
      93,     0,     0,   101,     0,     0,     0,   101,    88,     0,
     123,     0,     0,   101,     0,     0,   237,     0,     0,     0,
       0,     0,     0,  -320,     0,   296,     0,     0,     0,     0,
       0,   123,     0,     0,     0,     0,     0,   269,     0,     0,
       0,     0,   123,   112,     0,     0,   101,   112,     0,    95,
       0,     0,   112,   112,   101,     0,     0,     0,     0,     0,
     123,     0,     0,   112,   112,     0,   101,     0,     0,     0,
      88,     0,     0,     0,     0,    93,     0,    64,     0,     0,
       0,     0,    93,     0,   112,     0,     0,     0,   112,     0,
       0,     0,     0,     0,   112,     0,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   267,     0,
       0,    65,    64,   738,     0,     0,   123,     0,   123,     0,
       0,     0,     0,     0,    95,     0,     0,   112,     0,     0,
       0,    95,     0,    64,     0,   112,     0,     0,     0,     0,
       0,     0,     0,     0,    64,     0,    65,   112,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    64,     0,     0,     0,   123,    65,     0,     0,
     123,     0,     0,     0,     0,   123,   123,     0,    65,     0,
       0,     0,     0,     0,     0,     0,   123,   123,     0,    89,
       0,     0,     0,     0,     0,     0,    65,     0,    64,     0,
      89,     0,     0,     0,     0,     0,     0,   123,     0,     0,
       0,   123,     0,     0,     0,     0,     0,   123,    64,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,     0,     0,    98,     0,     0,     0,     0,
      88,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,     0,    65,     0,    65,     0,     0,     0,   123,     0,
     238,     0,    89,     0,     0,     0,     0,     0,    64,     0,
     123,     0,    64,     0,     0,    88,     0,    64,    64,     0,
       0,   238,     0,     0,     0,     0,    90,     0,    64,    64,
       0,     0,     0,    98,     0,     0,    88,    90,     0,     0,
     234,     0,    65,     0,     0,   234,    65,    88,     0,    64,
       0,    65,    65,    64,     0,     0,     0,     0,     0,    64,
       0,     0,    65,    65,     0,    88,     0,     0,     0,     0,
       0,     0,     0,   100,   491,   492,     0,     0,   493,   494,
     495,     0,     0,    65,     0,     0,     0,    65,     0,     0,
       0,     0,    64,    65,     0,     0,   496,   497,   240,    90,
      64,    88,     0,     0,     0,   498,     0,     0,    98,     0,
       0,     0,    64,     0,     0,    98,     0,     0,     0,   240,
       0,    88,     0,    88,     0,     0,    65,     0,   102,     0,
       0,   100,     0,     0,    65,     0,     0,   268,    93,     0,
       0,     0,   739,     0,     0,     0,    65,     0,     0,    93,
       0,   499,   500,   501,   502,   503,   504,   505,   506,   507,
       0,     0,     0,     0,     0,     0,   653,     0,     0,     0,
       0,    88,    89,     0,     0,    88,     0,     0,     0,     0,
      88,    88,     0,     0,     0,     0,   102,    95,     0,     0,
       0,    88,    88,     0,     0,     0,     0,     0,    95,     0,
       0,     0,     0,     0,     0,     0,   100,    89,     0,     0,
       0,    93,    88,   100,     0,     0,    88,     0,     0,     0,
       0,     0,    88,     0,     0,     0,   103,   309,    89,   313,
     314,     0,   318,     0,   322,     0,   326,     0,   329,    89,
     332,     0,   339,     0,   346,   370,   376,     0,     0,   236,
     384,     0,     0,   389,   236,    88,   395,    89,   400,     0,
      95,   102,     0,    88,     0,     0,     0,     0,   102,    90,
       0,     0,     0,     0,     0,    88,     0,   424,     0,     0,
       0,     0,     0,   438,   103,     0,     0,   111,     0,     0,
       0,     0,     0,    89,     0,     0,     0,     0,   269,     0,
       0,     0,     0,   741,    90,     0,     0,     0,     0,     0,
       2,     0,     0,    89,     0,    89,   155,   156,     0,     0,
       0,     0,     0,     0,     0,    90,     0,   158,   159,     0,
     160,     0,     0,     0,   162,     0,    90,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   163,     0,   164,     0,
       0,    26,    27,     0,    90,     0,    29,   166,     0,   103,
       0,     0,     0,    89,     0,   167,   103,    89,     0,     0,
       0,     0,    89,    89,     0,    37,    38,     0,     0,     0,
       0,    93,     0,    89,    89,     0,     0,    40,     0,     0,
      90,     0,     0,     0,     0,     0,     0,     0,   168,     0,
       0,     0,    47,     0,    89,     0,     0,     0,    89,     0,
      90,     0,    90,     0,    89,     0,    93,     0,     0,    51,
     111,     0,     0,     0,   275,     0,     0,   111,     0,     0,
      95,    98,     0,     0,     0,     0,     0,    93,     0,     0,
       0,     0,    98,     0,     0,     0,     0,    89,    93,     0,
       0,     0,     0,     0,     0,    89,     0,     0,     0,     0,
      90,     0,     0,     0,    90,    95,    93,    89,     0,    90,
      90,     2,     0,     0,     0,     0,     0,   155,   156,     0,
      90,    90,     0,     0,     0,     0,    95,     0,   158,   159,
       0,   160,     0,     0,     0,   162,     0,    95,     0,     0,
       0,    90,    93,     0,    98,    90,     0,   163,     0,   164,
       0,    90,    26,    27,     0,    95,     0,    29,   166,     0,
       0,     0,    93,     0,    93,     0,   167,     0,     0,   100,
       0,     0,     0,     0,     0,     0,    37,    38,     0,     0,
     100,     0,   238,     0,    90,     0,     0,   238,    40,     0,
       0,    95,    90,     0,     0,     0,     0,     0,     0,   168,
       0,     0,     0,    47,    90,     0,     0,     0,     0,     0,
       0,    95,    93,    95,     0,     0,    93,     0,     0,     0,
      51,    93,    93,     0,   102,     0,     0,     0,     0,     0,
       0,     2,    93,    93,     0,   102,     0,   155,   156,     0,
       0,     0,   100,     0,     0,     0,     0,     0,   158,   159,
       0,   160,     0,    93,     0,   162,     0,    93,     0,     0,
       0,    95,     0,    93,     0,    95,     0,   163,     0,   164,
      95,    95,    26,    27,     0,     0,     0,    29,   166,     0,
     240,    95,    95,     0,     0,   240,   167,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    93,   102,     0,     0,
       0,     0,    95,     0,    93,     0,    95,     0,    40,     0,
       0,     0,    95,     0,    98,     0,    93,     0,     0,   168,
       0,     0,   103,    47,     0,     0,     0,     0,     0,     0,
       2,     0,     0,   103,     0,     0,   155,   156,     0,     0,
       0,     0,    52,    53,     0,    95,     0,   158,   159,    98,
     160,     0,     0,    95,   162,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    95,   163,     0,   164,     0,
      98,    26,    27,     2,     0,     0,    29,   166,     0,   155,
     156,    98,     0,   111,     0,   167,     0,     0,     0,     0,
     158,   159,     0,   160,   111,   103,     0,   162,     0,    98,
       0,     0,     0,     0,     0,     0,     0,   797,     0,   163,
       0,   164,   100,     0,    26,    27,     0,     0,   168,    29,
     166,     0,    47,     0,     0,     0,     0,     0,   167,     0,
       0,     0,     0,     0,     0,    98,     0,     0,     0,     0,
     798,   145,   146,     0,     0,     0,     0,   100,     0,     0,
      40,     0,     0,     0,     0,    98,   111,    98,     0,     0,
       0,   168,     0,     0,     0,    47,     0,   102,   100,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   100,
       0,     0,     0,   865,     0,     0,     0,     0,     0,   491,
     492,     0,     0,   493,   494,   495,     0,   100,     0,   290,
       0,     0,   102,     0,     0,    98,     0,     0,     0,    98,
       0,   496,   497,     0,    98,    98,     0,     0,     0,     0,
     498,     0,     0,   102,     0,    98,    98,     0,     0,     0,
       0,     0,     0,   100,   102,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    98,     0,     0,     0,
      98,     0,   102,   100,     0,   100,    98,     0,     0,     0,
       0,     0,     0,     0,     0,   103,   499,   500,   501,   502,
     503,   504,   505,   506,   507,     0,     0,     0,     0,     0,
       0,   783,     0,     0,     0,     0,     0,     0,   102,    98,
     474,     0,     0,     0,     0,     0,     0,    98,     0,     0,
     103,     0,     0,   100,     0,     0,     0,   100,   102,    98,
     102,     0,   100,   100,     0,     0,     0,     0,     0,     0,
       0,   103,     0,   100,   100,     0,   111,     0,     0,     0,
       0,     0,   103,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   100,     0,     0,     0,   100,     0,
     103,   513,     0,     0,   100,     0,     0,     0,   102,   518,
       0,   111,   102,     0,     0,     0,     0,   102,   102,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   102,   102,
       0,     0,   111,     0,     0,     0,   103,   100,     0,   529,
       0,     0,     0,   111,     0,   100,     0,   535,     0,   102,
     557,     0,     0,   102,     0,     0,   103,   100,   103,   102,
       0,   111,     0,     0,     0,   569,     0,     2,     0,     0,
       0,     0,     0,   155,   156,     0,   579,     0,     0,     0,
       0,     0,     0,     0,   158,   159,     0,   160,     0,     0,
       0,   162,   102,     0,     0,     0,     0,   111,     0,     0,
     102,     0,     0,   163,     0,   164,   103,     0,    26,    27,
     103,     0,   102,    29,   166,   103,   103,   111,     0,   111,
       0,     0,   167,     0,     0,     0,   103,   103,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,   103,     0,     0,
       0,   103,     0,     0,     0,   168,     0,   103,     0,    47,
       0,     0,     0,   560,     0,     0,     0,   111,     0,   209,
     211,   111,     0,     0,     0,     0,   111,   111,     0,     0,
     221,     0,     0,     0,     0,     0,     0,   111,   111,     0,
     103,     0,     0,     0,   255,     0,   256,   258,   103,     0,
       0,   264,     0,     0,     0,     0,     0,     0,   111,     0,
     103,   280,   111,     0,     0,     0,     0,     0,   111,     0,
       0,   301,     0,   301,     0,   301,   301,     0,   301,     0,
     301,   624,   301,     0,   301,     0,   301,     0,   301,     0,
     301,   350,   301,     0,     0,     0,   301,     0,     0,   301,
       0,   111,   301,     0,   301,     0,     0,   640,     0,   111,
       0,     0,     0,     0,   645,     0,     0,   651,     0,   652,
       0,   111,     0,   301,     0,     0,     0,     0,     0,   301,
     536,   537,   538,   539,   540,   541,   542,   543,   544,     0,
       0,     0,     0,   545,   546,   547,   548,   549,   550,   551,
     552,   681,   682,     0,     0,     0,     0,   475,   475,     0,
       0,   690,     0,     0,     0,     0,     0,   695,   696,     0,
       0,   701,     0,   704,     0,     0,   484,     0,     0,     0,
       0,     0,     0,   646,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     715,     4,     5,     0,     6,   155,   156,     9,   157,   732,
       0,     0,     0,    11,    12,    13,   158,   159,   475,   160,
       0,     0,   161,   162,   519,     0,     0,    19,    20,     0,
       0,     0,     0,     0,     0,   163,     0,   164,     0,     0,
      26,    27,     0,     0,   165,    29,   166,     0,     0,     0,
     525,   519,   475,     0,   167,     0,     0,     0,     0,     0,
       0,     0,    35,     0,    37,    38,     0,   561,     0,     0,
       0,     0,     0,     0,     0,   762,    40,     0,     0,     0,
       0,     0,   570,     0,     0,     0,     0,   168,    44,     0,
       0,    47,     0,     0,    50,   571,   580,   581,     0,     0,
       0,   169,   170,     0,     0,     0,     0,     0,    51,   572,
       0,     0,     0,    54,     0,    55,     2,    56,     4,     5,
       0,     6,   155,   156,     9,   157,     0,     0,   788,     0,
      11,    12,    13,   158,   159,     0,   160,     0,   793,   161,
     162,     0,     0,     0,    19,    20,     0,     0,   806,     0,
       0,     0,   163,     0,   164,     0,     0,    26,    27,     0,
       0,   165,    29,   166,     0,     0,     0,     0,     0,     0,
       0,   167,     0,     0,     0,     0,     0,     0,     0,    35,
       0,    37,    38,     0,     0,   822,     0,   824,     0,     0,
       0,     0,     0,    40,     0,     0,     0,   833,     0,   280,
     836,   838,   839,     0,   168,    44,   842,     0,    47,   845,
       0,    50,   584,     0,     0,   280,     0,     0,   169,   170,
       0,     0,     0,     0,     0,    51,   171,     0,     0,     0,
      54,     0,    55,     0,    56,     0,     0,   864,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     4,     5,     0,
       6,   155,   156,     9,   157,     0,     0,     0,     0,    11,
      12,    13,   158,   159,     0,   160,     0,     0,   161,   162,
       0,     0,     0,    19,    20,   891,     0,     0,     0,     0,
       0,   163,   896,   164,     0,   899,    26,    27,   191,     0,
     165,    29,   166,     0,     0,     0,     0,   216,   217,     0,
     167,     0,     0,   910,   911,     0,     0,     0,    35,     0,
      37,    38,     0,     0,     0,   922,     0,   683,     0,     0,
       0,     0,    40,     0,     0,     0,     0,   274,     0,     0,
       0,     0,   278,   168,    44,     0,     0,    47,     0,   706,
      50,     0,   941,     0,   710,     0,     0,   169,   170,     0,
       0,     0,     0,   711,    51,   572,     0,   956,   678,    54,
       0,    55,     0,    56,     0,     0,   961,   962,     0,   720,
     965,     0,   264,   967,   968,     0,     0,   736,     0,     0,
       0,     0,     0,     0,     0,     0,   491,   492,     0,   974,
     493,   494,   495,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,   496,   497,
     155,   156,     0,   984,   466,     0,     0,   498,     0,     0,
       0,   158,   159,     0,   160,   473,     0,     0,   162,     0,
       0,     0,   479,     0,     0,   759,   760,     0,     0,   481,
     163,     0,   164,     0,     0,    26,    27,   482,   483,     0,
      29,   166,     0,     0,     0,   475,     0,     0,     0,   167,
       0,     0,     0,   499,   500,   501,   502,   503,   504,   505,
     506,   507,     0,     0,     0,     0,    52,    53,     0,     0,
       0,   797,   491,   492,     0,     0,   493,   494,   495,     0,
       0,   475,   168,     0,   789,     0,    47,     0,   791,   792,
       0,     0,     2,   944,   496,   497,     0,     0,   155,   156,
     799,     0,   706,   498,   917,     0,     0,   807,   799,   158,
     159,     0,   160,   814,   720,     0,   162,   530,     0,     0,
       0,     0,   817,     0,     0,     0,     0,     0,   163,     0,
     164,     0,     0,    26,    27,     0,     0,     0,    29,   166,
       0,   568,     0,   278,     0,     0,     0,   167,     0,   499,
     500,   501,   502,   503,   504,   505,   506,   507,     0,     0,
       0,     0,     0,   583,   585,     0,     0,   589,     0,    40,
       0,     0,     0,     0,   590,     0,     0,     0,   591,     0,
     168,     0,     0,   592,    47,     0,     0,   593,   813,     0,
       0,   594,   866,   867,     0,   595,     0,     0,   596,     0,
       0,     0,   597,     0,     0,     0,     0,     0,     0,   599,
       0,   720,     0,     0,     0,     0,     0,     0,   887,     0,
     887,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     887,     0,   887,     0,   545,   546,   547,   548,   549,   550,
     551,   552,     0,     0,     0,   601,     0,   602,     0,     0,
     603,     0,     0,   604,     0,   908,     0,     0,   605,     0,
     912,     0,     0,     2,   608,   918,     0,     0,   807,   155,
     156,   609,   610,   611,   612,   613,   614,   615,     0,     0,
     158,   159,     0,   160,     0,   617,     0,   162,   618,     0,
       0,     0,     0,     0,   619,     0,   620,     0,   621,   163,
     622,   164,   623,     0,    26,    27,     0,     0,     0,    29,
     166,     0,   957,     0,     0,   960,     0,     0,   167,     0,
       0,     0,   964,     0,     0,     0,     0,     0,    37,    38,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   168,     0,     0,   980,    47,     0,     0,     0,   660,
     661,   662,   663,   664,   665,   666,   667,   668,   669,   670,
     671,   672,   673,   674,   675,   676,     0,   680,   297,   300,
       0,   308,     0,   312,     0,     0,   317,     0,   321,     0,
     325,   691,  1001,  1002,   331,     0,     0,   420,   345,     0,
       0,     0,   378,   381,     0,     0,     0,   388,     0,   393,
       0,     0,   399,     0,     0,     0,     0,     0,     0,     0,
       0,  -318,  -318,   421,     0,     0,   419,     0,     0,     0,
       0,   423,   191,     0,   728,     0,     0,   437,     0,     0,
       0,  -318,  -318,  -318,  -318,     0,  -318,  -318,     0,     0,
       0,     0,     0,     0,     0,   585,     0,     0,     0,     0,
    -289,  -289,  -289,  -289,  -289,  -289,  -289,  -289,  -289,     0,
       0,     0,     0,  -289,  -289,  -289,  -289,  -289,  -289,  -289,
    -289,     0,     0,     0,     0,     0,   297,   300,   308,   312,
     317,   321,   325,   756,   331,     0,   345,   378,   381,     0,
     388,   761,   393,   399,  -621,  -621,  -621,     0,     0,   767,
       0,  -318,     0,   296,   772,   419,     0,     0,     0,   423,
       0,   437,   780,     0,     0,     0,     0,     0,   331,   330,
       0,     0,     0,     0,     0,     0,   297,   300,   308,   312,
     317,   321,   325,     0,   331,     0,   345,   378,   381,     0,
     388,   393,   399,  -316,  -316,   419,   423,   437,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -316,  -316,  -316,  -316,     0,  -316,  -316,
     345,   378,     0,   393,   423,   811,     0,   191,     0,     0,
       0,     0,  -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,
    -287,     0,     0,     0,     0,  -287,  -287,  -287,  -287,  -287,
    -287,  -287,  -287,     0,     0,     0,     0,     0,     0,   585,
       0,     0,     0,     0,     0,   834,     0,     0,     0,     0,
       0,   841,     0,     0,     0,     0,     0,   846,     0,     0,
       0,     0,     0,  -316,   848,   296,     0,     0,     0,     0,
       0,     0,     0,   855,     0,     0,     0,     0,    -3,     1,
       0,   -26,   -26,     2,     3,     4,     5,     0,     6,     7,
       8,     9,    10,     0,     0,   325,     0,    11,    12,    13,
      14,    15,    16,    17,   191,     0,   728,    18,     0,     0,
       0,    19,    20,     0,    21,     0,     0,     0,     0,    22,
      23,    24,    25,     0,    26,    27,     0,     0,    28,    29,
      30,     0,     0,     0,     0,     0,     0,   903,    31,    32,
      33,     0,     0,     0,    34,   907,    35,    36,    37,    38,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    39,
      40,    41,    42,     0,   924,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     942,     0,    51,     0,    52,    53,     0,    54,     0,    55,
       0,    56,    -2,   285,     0,   -26,   -26,     2,     3,     4,
       5,     0,     6,     7,     8,     9,    10,     0,     0,     0,
       0,    11,    12,    13,    14,    15,    16,    17,     0,     0,
       0,    18,   971,     0,     0,    19,    20,     0,    21,     0,
       0,     0,     0,    22,    23,    24,    25,     0,    26,    27,
       0,     0,    28,    29,    30,     0,     0,     0,     0,     0,
       0,     0,    31,    32,    33,     0,     0,     0,    34,     0,
      35,    36,    37,    38,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    39,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,    49,    50,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    51,     0,    52,    53,
       0,    54,     0,    55,   447,    56,  -106,  -106,     2,     3,
       4,     5,     0,     6,     7,   448,     9,    10,  -502,  -502,
    -502,  -502,    11,    12,    13,    14,    15,   449,   450,     0,
       0,     0,    18,     0,     0,     0,    19,    20,     0,    21,
    -502,  -502,  -502,  -502,    22,    23,    24,    25,  -502,    26,
      27,     0,     0,    28,    29,    30,     0,     0,     0,     0,
       0,     0,     0,    31,    32,    33,  -502,  -502,  -502,    34,
       0,    35,    36,    37,    38,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    39,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    51,     0,    52,
      53,     0,    54,     0,    55,     0,    56,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   423,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   378,     0,   447,   393,  -106,  -106,     2,     3,
       4,     5,     0,     6,     7,   448,     9,    10,     0,     0,
    -529,     0,    11,    12,    13,    14,    15,   449,   450,     0,
       0,     0,    18,     0,     0,     0,    19,    20,     0,    21,
    -529,  -529,  -529,     0,    22,    23,    24,    25,     0,    26,
      27,     0,     0,    28,    29,    30,     0,     0,     0,     0,
       0,     0,     0,    31,    32,    33,     0,     0,     0,    34,
       0,    35,    36,    37,    38,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    39,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    51,     0,    52,
      53,     0,    54,     0,    55,   447,    56,  -106,  -106,     2,
       3,     4,     5,     0,     6,     7,   448,     9,    10,     0,
       0,  -530,     0,    11,    12,    13,    14,    15,   449,   450,
       0,     0,     0,    18,     0,     0,     0,    19,    20,     0,
      21,  -530,  -530,  -530,     0,    22,    23,    24,    25,     0,
      26,    27,     0,     0,    28,    29,    30,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,     0,     0,     0,
      34,     0,    35,    36,    37,    38,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    39,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    51,     0,
      52,    53,     0,    54,     0,    55,   447,    56,  -106,  -106,
       2,     3,     4,     5,     0,     6,     7,   448,     9,    10,
       0,     0,  -501,     0,    11,    12,    13,    14,    15,   449,
     450,     0,     0,     0,    18,     0,     0,     0,    19,    20,
       0,    21,     0,     0,     0,     0,    22,    23,    24,    25,
       0,    26,    27,     0,     0,    28,    29,    30,     0,     0,
       0,     0,     0,     0,     0,    31,    32,    33,  -501,  -501,
    -501,    34,     0,    35,    36,    37,    38,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    39,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,    49,    50,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    51,
       0,    52,    53,     0,    54,     0,    55,   447,    56,  -106,
    -106,     2,     3,     4,     5,     0,     6,     7,   448,     9,
      10,  -501,  -501,  -501,  -501,    11,    12,    13,    14,    15,
     449,   450,     0,     0,     0,    18,     0,     0,     0,    19,
      20,     0,    21,     0,     0,     0,     0,    22,    23,    24,
      25,     0,    26,    27,     0,     0,    28,    29,    30,     0,
       0,     0,     0,     0,     0,     0,    31,    32,    33,     0,
       0,     0,    34,     0,    35,    36,    37,    38,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    39,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,    49,    50,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      51,     0,    52,    53,     0,    54,     0,    55,   447,    56,
    -106,  -106,     2,     3,     4,     5,     0,     6,     7,   448,
       9,    10,     0,     0,  -501,     0,    11,    12,    13,    14,
      15,   449,   450,     0,     0,     0,    18,     0,     0,     0,
      19,    20,     0,    21,  -501,  -501,  -501,     0,    22,    23,
      24,    25,     0,    26,    27,     0,     0,    28,    29,    30,
       0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
       0,     0,     0,    34,     0,    35,    36,    37,    38,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    39,    40,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    51,     0,    52,    53,     0,    54,     0,    55,   447,
      56,  -106,  -106,     2,     3,     4,     5,     0,     6,     7,
     448,     9,    10,     0,     0,  -580,     0,    11,    12,    13,
      14,    15,   449,   450,     0,     0,     0,    18,     0,     0,
       0,    19,    20,     0,    21,  -580,  -580,     0,     0,    22,
      23,    24,    25,     0,    26,    27,     0,     0,    28,    29,
      30,     0,     0,     0,     0,     0,     0,     0,    31,    32,
      33,     0,     0,     0,    34,     0,    35,    36,    37,    38,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    39,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    51,     0,    52,    53,     0,    54,     0,    55,
     447,    56,  -106,  -106,     2,     3,     4,     5,     0,     6,
       7,   448,     9,    10,     0,     0,  -581,     0,    11,    12,
      13,    14,    15,   449,   450,     0,     0,     0,    18,     0,
       0,     0,    19,    20,     0,    21,  -581,  -581,     0,     0,
      22,    23,    24,    25,     0,    26,    27,     0,     0,    28,
      29,    30,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,     0,     0,     0,    34,     0,    35,    36,    37,
      38,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      39,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    51,     0,    52,    53,     0,    54,     0,
      55,   447,    56,  -106,  -106,     2,     3,     4,     5,     0,
       6,     7,   448,     9,    10,     0,     0,  -501,     0,    11,
      12,    13,    14,    15,   449,   450,     0,     0,     0,    18,
       0,     0,     0,    19,    20,     0,    21,     0,  -501,  -501,
       0,    22,    23,    24,    25,     0,    26,    27,     0,     0,
      28,    29,    30,     0,     0,     0,     0,     0,     0,     0,
      31,    32,    33,     0,     0,     0,    34,     0,    35,    36,
      37,    38,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    39,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    51,     0,    52,    53,     0,    54,
       0,    55,   447,    56,  -106,  -106,     2,     3,     4,     5,
       0,     6,     7,   448,     9,    10,     0,     0,  -501,     0,
      11,    12,    13,    14,    15,   449,   450,     0,     0,     0,
      18,     0,     0,     0,    19,    20,     0,    21,  -501,  -501,
       0,     0,    22,    23,    24,    25,     0,    26,    27,     0,
       0,    28,    29,    30,     0,     0,     0,     0,     0,     0,
       0,    31,    32,    33,     0,     0,     0,    34,     0,    35,
      36,    37,    38,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    39,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    51,     0,    52,    53,     0,
      54,     0,    55,   447,    56,  -106,  -106,     2,     3,     4,
       5,     0,     6,     7,   448,     9,    10,     0,     0,  -501,
    -501,    11,    12,    13,    14,    15,   449,   450,     0,     0,
       0,    18,     0,     0,     0,    19,    20,     0,    21,     0,
       0,     0,     0,    22,    23,    24,    25,     0,    26,    27,
       0,     0,    28,    29,    30,     0,     0,     0,     0,     0,
       0,     0,    31,    32,    33,     0,     0,     0,    34,     0,
      35,    36,    37,    38,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    39,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,    49,    50,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    51,     0,    52,    53,
       0,    54,     0,    55,   447,    56,  -106,  -106,     2,     3,
       4,     5,     0,     6,     7,   448,     9,    10,     0,     0,
    -501,     0,    11,    12,    13,    14,    15,   449,   450,     0,
       0,     0,    18,     0,     0,     0,    19,    20,     0,    21,
       0,     0,     0,  -501,    22,    23,    24,    25,     0,    26,
      27,     0,     0,    28,    29,    30,     0,     0,     0,     0,
       0,     0,     0,    31,    32,    33,     0,     0,     0,    34,
       0,    35,    36,    37,    38,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    39,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    51,     0,    52,
      53,     0,    54,     0,    55,   447,    56,  -106,  -106,     2,
       3,     4,     5,     0,     6,     7,   448,     9,    10,     0,
       0,  -501,     0,    11,    12,    13,    14,    15,   449,   450,
       0,     0,     0,    18,     0,     0,     0,    19,    20,     0,
      21,     0,     0,     0,     0,    22,    23,    24,    25,     0,
      26,    27,     0,     0,    28,    29,    30,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,     0,     0,  -501,
      34,     0,    35,    36,    37,    38,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    39,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    51,     0,
      52,    53,     0,    54,     0,    55,   447,    56,  -106,  -106,
       2,     3,     4,     5,     0,     6,     7,   448,     9,    10,
       0,     0,  -501,     0,    11,    12,    13,    14,    15,   449,
     450,     0,     0,     0,    18,     0,     0,     0,    19,    20,
       0,    21,     0,     0,     0,     0,    22,    23,    24,    25,
    -501,    26,    27,     0,     0,    28,    29,    30,     0,     0,
       0,     0,     0,     0,     0,    31,    32,    33,     0,     0,
       0,    34,     0,    35,    36,    37,    38,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    39,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,    49,    50,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    51,
       0,    52,    53,     0,    54,     0,    55,   447,    56,  -106,
    -106,     2,     3,     4,     5,     0,     6,     7,   448,     9,
      10,     0,     0,   883,     0,    11,    12,    13,    14,    15,
     449,   450,     0,     0,     0,    18,     0,     0,     0,    19,
      20,     0,    21,     0,     0,     0,     0,    22,    23,    24,
      25,     0,    26,    27,     0,     0,    28,    29,    30,     0,
       0,     0,     0,     0,     0,     0,    31,    32,    33,     0,
       0,     0,    34,     0,    35,    36,    37,    38,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    39,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,    49,    50,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      51,     0,    52,    53,     0,    54,     0,    55,   447,    56,
    -106,  -106,     2,     3,     4,     5,     0,     6,     7,   448,
       9,    10,     0,     0,  -501,     0,    11,    12,    13,    14,
      15,   449,   450,     0,     0,     0,    18,     0,     0,     0,
      19,    20,     0,    21,     0,     0,     0,     0,    22,    23,
      24,    25,     0,    26,    27,     0,     0,    28,    29,    30,
       0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
       0,     0,     0,    34,     0,    35,    36,    37,    38,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    39,    40,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    51,     0,    52,    53,     0,    54,     0,    55,   447,
      56,  -106,  -106,     2,     3,     4,     5,     0,     6,     7,
     448,     9,    10,     0,     0,     0,     0,    11,    12,    13,
      14,    15,   449,   450,     0,     0,     0,    18,     0,     0,
       0,    19,    20,     0,    21,     0,     0,     0,     0,    22,
      23,    24,    25,     0,    26,    27,     0,     0,    28,    29,
      30,     0,     0,     0,     0,     0,     0,     0,    31,    32,
      33,     0,     0,     0,    34,     0,    35,    36,    37,    38,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    39,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    51,     0,    52,    53,     0,    54,     0,    55,
       2,    56,     4,     5,     0,     6,   155,   156,     9,   157,
       0,     0,     0,     0,    11,    12,    13,   158,   159,     0,
     160,     0,     0,   161,   162,     0,     0,     0,    19,    20,
       0,     0,     0,     0,     0,     0,   163,     0,   164,     0,
       0,    26,    27,     0,     0,   165,    29,   166,     0,     0,
       0,     0,     0,     0,     0,   167,     0,     0,     0,     0,
       0,     0,     0,    35,     0,    37,    38,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   168,    44,
       0,     0,    47,     0,     0,    50,     0,     0,     0,     0,
       0,     0,   169,   170,     0,     0,     0,     0,     0,    51,
     572,     0,     0,   719,    54,     0,    55,     2,    56,     4,
       5,     0,     6,   155,   156,     9,   157,     0,     0,     0,
       0,    11,    12,    13,   158,   159,     0,   160,     0,     0,
     161,   162,     0,     0,     0,    19,    20,     0,     0,     0,
       0,     0,     0,   163,     0,   164,     0,     0,    26,    27,
       0,     0,   165,    29,   166,     0,     0,     0,     0,     0,
       0,     0,   167,     0,     0,     0,     0,     0,     0,     0,
      35,     0,    37,    38,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   168,    44,     0,     0,    47,
       0,     0,    50,     0,     0,     0,     0,     0,     0,   169,
     170,     0,     0,     0,   491,   492,    51,   171,   493,   494,
     495,    54,     0,    55,     2,    56,     4,     5,     0,     6,
     155,   156,     9,   157,     0,     0,   496,   497,    11,    12,
      13,   158,   159,     0,   160,   498,     0,   161,   162,     0,
       0,     0,    19,    20,     0,     0,     0,     0,     0,     0,
     163,     0,   164,     0,     0,    26,    27,     0,     0,   165,
      29,   166,     0,     0,     0,     0,     0,     0,     0,   167,
       0,     0,     0,     0,     0,     0,     0,    35,     0,    37,
      38,   499,   500,   501,   502,   503,   504,   505,   506,   507,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   168,    44,     0,     0,    47,     0,     0,    50,
       0,     0,     0,     0,     0,     0,   169,   170,     0,     0,
       0,   491,     0,    51,   277,   493,   494,   495,    54,     0,
      55,     2,    56,     4,     5,     0,     6,   155,   156,     9,
     157,     0,     0,   496,   497,    11,    12,    13,   158,   159,
       0,   160,   498,     0,   161,   162,     0,     0,     0,    19,
      20,     0,     0,     0,     0,     0,     0,   163,     0,   164,
       0,     0,    26,    27,     0,     0,   165,    29,   166,     0,
       0,     0,     0,     0,     0,     0,   167,     0,     0,     0,
       0,     0,     0,     0,    35,     0,    37,    38,   499,   500,
     501,   502,   503,   504,   505,   506,   507,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   168,
      44,     0,     0,    47,     0,     0,    50,     0,     0,     0,
       0,     0,     0,   169,   170,     0,     0,     0,     0,     0,
      51,   727,     0,     0,     0,    54,     0,    55,     2,    56,
       4,     5,     0,     6,   155,   156,     9,   157,     0,     0,
       0,     0,    11,    12,    13,   158,   159,     0,   160,     0,
       0,   161,   162,     0,     0,     0,    19,    20,     0,     0,
       0,     0,     0,     0,   163,     0,   164,     0,     0,    26,
      27,     0,     0,   165,    29,   166,     0,     0,     0,     0,
       0,     0,     0,   167,     0,     0,     0,     0,     0,     0,
       0,    35,     0,    37,    38,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   168,    44,     0,     0,
      47,     0,     0,    50,     0,     0,     0,     0,     0,     0,
     169,   170,     0,     0,     0,     0,     0,    51,   572,     0,
       0,     0,    54,     0,    55,     2,    56,     4,     5,     0,
       6,   155,   156,     9,   157,     0,     0,     0,     0,    11,
      12,    13,   158,   159,     0,   160,     0,     0,     0,   162,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   163,     0,   164,     0,     0,    26,    27,     0,     0,
     165,    29,   166,     0,     0,     0,     0,     0,     0,     0,
     167,     0,     0,     0,     0,     0,     0,     0,    35,     0,
      37,    38,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   168,    44,     0,     0,    47,     0,     0,
      50,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    51,     0,     0,     0,     0,    54,
       0,    55,     2,    56,     4,   348,     0,   349,   155,   156,
       9,   157,     0,     0,     0,     0,    11,    12,    13,   158,
     159,     0,   160,     0,     0,     0,   162,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   163,     0,
     164,     0,     0,    26,    27,     0,     0,     0,    29,   166,
       0,     0,     0,     0,     0,     0,   330,   167,     0,     0,
       0,     0,     0,     0,     0,    35,     0,    37,    38,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
    -316,  -316,     0,     0,     0,     0,     0,     0,     0,     0,
     168,    44,     0,     0,    47,     0,     0,     0,     0,     0,
    -316,  -316,  -316,  -316,     0,  -316,  -316,     0,     0,     0,
       0,    51,     0,     0,     0,     0,   275,     0,    55,  -287,
    -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,     0,   390,
       0,     0,  -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -321,  -321,   391,     0,     0,     0,     0,
       0,     0,     0,  -507,  -507,     0,     0,     0,     0,     0,
    -316,     0,   296,  -321,  -321,  -321,  -321,     0,  -321,  -321,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   319,  -271,  -271,  -271,  -271,  -271,  -271,  -271,  -271,
    -271,     0,     0,     0,     0,  -271,  -271,  -271,  -271,  -271,
    -271,  -271,  -271,     0,     0,  -309,  -309,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -309,  -309,  -309,  -309,   392,
    -309,  -309,     0,  -321,     0,   296,     0,     0,     0,     0,
       0,   385,     0,     0,  -257,  -257,  -257,  -257,  -257,  -257,
    -257,  -257,  -257,     0,     0,     0,     0,  -257,  -257,  -257,
    -257,  -257,  -257,  -257,  -257,  -319,  -319,   386,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -319,  -319,  -319,  -319,     0,
    -319,  -319,     0,     0,     0,  -309,     0,   296,     0,     0,
       0,   396,     0,     0,  -267,  -267,  -267,  -267,  -267,  -267,
    -267,  -267,  -267,     0,     0,     0,     0,  -267,  -267,  -267,
    -267,  -267,  -267,  -267,  -267,  -322,  -322,   397,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -322,  -322,  -322,  -322,     0,
    -322,  -322,     0,     0,     0,  -319,     0,   296,     0,     0,
       0,   420,     0,     0,  -274,  -274,  -274,  -274,  -274,  -274,
    -274,  -274,  -274,     0,     0,     0,     0,  -274,  -274,  -274,
    -274,  -274,  -274,  -274,  -274,  -318,  -318,   421,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -318,  -318,  -318,  -318,     0,
    -318,  -318,     0,     0,     0,  -322,     0,   296,     0,     0,
       0,     0,     0,     0,  -289,  -289,  -289,  -289,  -289,  -289,
    -289,  -289,  -289,     0,     0,     0,     0,  -289,  -289,  -289,
    -289,  -289,  -289,  -289,  -289,     2,     0,     0,     0,     0,
       0,   155,   156,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   158,   159,     0,   160,     0,     0,     0,   162,
       0,     0,     0,     0,     0,  -318,     0,   296,     0,     0,
       0,   163,     0,   164,     0,     0,    26,    27,     2,     0,
       0,    29,   166,     0,   155,   156,     0,     0,     0,     0,
     167,     0,     0,     0,     0,   158,   159,     0,   160,     0,
       0,     0,   162,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,   163,     0,   164,     0,     0,    26,
      27,     0,     2,   168,    29,   166,     0,    47,   155,   156,
       0,     0,     0,   167,     0,     0,     0,     0,     0,   158,
     159,     0,   160,     0,     0,   959,   162,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,   163,     0,
     164,     0,     0,    26,    27,     2,   168,     0,    29,   166,
      47,   155,   156,     0,   884,     0,     0,   167,     0,     0,
       0,     0,   158,   159,     0,   160,     0,     0,     0,   162,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,   163,     0,   164,     0,     0,    26,    27,     0,     0,
     168,    29,   166,     0,    47,     0,     0,     0,   963,     0,
     167,   536,   537,   538,   539,   540,   541,   542,   543,   544,
       0,     0,     0,     0,   545,   546,   547,   548,   549,   550,
     551,   552,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   168,     0,     0,     0,    47,   536,   537,
     538,   539,   540,   541,   542,   543,   544,     0,   914,     0,
       0,   545,   546,   547,   548,   549,   550,   551,   552,   536,
     537,   538,   539,   540,   541,   542,   543,   544,     0,     0,
       0,     0,   545,   546,   547,   548,   549,   550,   551,   552,
       0,     0,     0,     0,     0,   951,     0,     0,     0,     0,
       0,     0,     0,     0,   536,   537,   538,   539,   540,   541,
     542,   543,   544,     0,     0,     0,   978,   545,   546,   547,
     548,   549,   550,   551,   552,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   990
};

static const yytype_int16 yycheck[] =
{
       0,   171,    10,   279,   133,   509,   152,   153,   564,   475,
     534,   140,   444,   445,   464,   465,   707,   529,    10,   719,
     648,   712,   653,    35,   587,    25,     9,   119,     9,     9,
      35,    51,     9,    17,    34,     0,   118,     9,    35,     9,
       9,     9,   124,     9,     0,   118,    46,   678,   514,   122,
       9,     9,    35,   519,    35,    35,    56,   685,    58,   525,
     564,    45,     9,     9,     9,    35,    66,    35,    68,    25,
      70,    71,    35,    73,    35,    75,    35,    77,    34,    79,
     394,    81,     9,    83,    35,    85,    86,    87,    35,    35,
      46,    91,    35,    58,    94,   561,   410,    97,   118,    99,
      56,    35,    58,     3,     4,   118,     9,   277,    35,   122,
      66,    35,    68,   125,    70,    71,   816,    73,   118,    75,
     125,    77,   119,    79,   124,    81,   103,    83,     9,    85,
      86,    87,    35,   133,    35,    91,   116,   117,    94,   119,
     140,    97,   125,    99,   125,   125,     0,   116,   117,     9,
     654,   782,   783,   125,    35,   125,   125,   116,   117,   125,
     119,     9,   118,   719,   125,   157,   125,   125,   124,   116,
     117,    25,   123,   119,     9,    35,     9,   133,   125,   125,
     125,     0,   873,   707,   140,    33,    34,   637,   751,   116,
     117,   125,    46,    70,    71,   119,   628,    51,   125,   123,
      35,   125,    35,     0,    58,    53,    54,    55,    56,    35,
      58,    59,    66,   213,     9,   719,   116,   117,   119,   850,
      35,     3,   125,     0,   125,    35,    35,    81,    35,    83,
      17,    85,    86,   116,   117,   116,   117,   114,     9,    58,
      35,    35,    24,   755,   125,     3,     4,   247,    25,    35,
       9,    33,    35,    40,   766,    10,   116,   117,    19,    35,
     816,    58,    33,    34,   118,   125,   598,    35,   600,    46,
      35,   118,   784,   120,   606,   123,    35,   125,   951,   133,
     119,    58,    53,    54,    55,    56,   140,    58,    59,    35,
     125,    35,   125,   119,    35,    35,   118,   123,   120,   125,
      82,   118,    84,   120,   119,   978,     0,    89,   103,    86,
     125,    93,   816,   123,    17,   125,    98,   990,   125,   101,
     102,   103,   104,   789,   119,     0,   792,   456,   840,   111,
     842,   125,   123,   799,   125,   117,   119,   803,   467,   125,
     123,   123,   125,   119,    33,    34,   125,   129,   814,   125,
      25,   119,   123,   123,   125,   123,   133,   125,   116,   117,
     125,   143,   144,   140,    53,    54,    55,    56,     9,    58,
      59,    46,   116,   117,   118,   119,    35,   123,   890,   125,
      35,     9,   894,    58,   125,   125,   118,   899,   900,    57,
     122,     0,    33,    34,   394,   914,    51,   123,   910,   911,
     866,   867,   572,   869,    50,    33,    34,    35,    51,   875,
     410,    86,    53,    54,    55,    56,    25,    58,    59,   931,
     118,   887,   120,   935,    17,    53,    54,    55,    56,   941,
      58,    59,   951,   118,   123,   120,    19,    46,   394,   107,
     108,   109,   110,   111,    37,    38,   912,   119,    17,    58,
     116,   117,   918,    57,   410,   118,   456,   976,   133,   978,
     120,   124,   974,   118,   119,   140,   742,   467,    37,    38,
      39,   990,   119,   116,   117,   118,   107,    86,   116,   117,
      17,   119,   123,   118,   125,   120,    67,     3,     4,   116,
     117,   957,   119,     9,   960,   123,    35,   125,   964,    35,
     456,    38,    39,     0,   650,   109,   110,   111,     3,     4,
     825,   467,    35,   118,   980,   120,    35,    33,    34,    35,
     835,   118,   837,   120,   133,   116,   117,   118,    25,   529,
      35,   140,    17,   118,     9,   120,    35,    53,    54,    55,
      56,    35,    58,    59,   118,     3,     4,    17,    18,    46,
     826,     9,    37,    38,    39,    35,   564,   727,    33,    34,
      35,    58,    15,    16,    17,    18,   118,   567,   120,   118,
     699,   120,   572,   529,    35,    33,    34,    35,    53,    54,
      55,    56,    19,    58,    59,    35,   118,   103,   120,    86,
     486,   487,   488,   489,   490,    53,    54,    55,    56,    35,
      58,    59,   456,   119,    72,   119,     0,   123,     5,   125,
     118,   567,   508,   467,    11,    12,   572,    85,    86,    87,
      88,    89,    90,    91,    92,    22,    23,   118,    25,   120,
     126,    25,    29,   116,   117,   118,   133,    15,    16,    17,
      18,     3,     4,   140,    41,   103,    43,   118,   123,    46,
      47,    17,    46,   119,    51,    52,   119,     9,   115,   116,
     117,   119,     9,    60,    58,   123,   125,   125,   116,   117,
     118,   116,   117,   118,    57,   529,   116,   117,   118,   456,
     118,    33,    34,    35,     9,    82,   686,   116,   117,    19,
     467,   820,    86,   116,   117,   119,    93,   116,   117,   699,
      97,    53,    54,    55,    56,   118,    58,    59,   116,   117,
     564,   719,   118,   567,   119,    33,    34,     9,   572,   118,
      37,    38,    63,    64,   121,   125,   119,   120,     0,   120,
      46,   120,   118,   118,   734,    53,    54,    55,    56,   133,
      58,    59,    97,   699,   120,   120,   140,   120,    82,   120,
     118,   103,   529,    25,    65,   755,   120,   120,    17,   120,
     120,    58,    86,   140,    86,    86,   766,   119,   244,    10,
      10,   123,    86,   125,    46,    10,    86,     9,   734,    86,
      86,   456,    86,    86,   784,   103,    58,    86,    86,   686,
     567,    86,   467,    86,   153,   572,   247,   514,   713,   755,
     246,    33,    34,    35,   976,   123,   870,   464,   816,     0,
     766,   734,   445,   994,    86,   567,   818,   531,   643,    10,
     820,    53,    54,    55,    56,   643,    58,    59,   784,    -1,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
     840,    -1,   842,    -1,    -1,   699,    -1,   456,    -1,    -1,
      -1,    -1,    -1,    -1,   529,    46,    -1,    -1,   467,    -1,
      -1,   133,    -1,    -1,   820,   719,    -1,    58,   140,    -1,
      -1,   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,
     734,    -1,    -1,    -1,   840,    -1,   842,   119,    -1,    -1,
     890,   123,   567,   125,   894,    -1,    -1,   572,    -1,   899,
     900,   755,    -1,    33,    34,    35,    -1,    -1,    -1,    -1,
     910,   911,   766,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     529,    -1,   699,    53,    54,    55,    56,    -1,    58,    59,
     784,   931,    -1,    -1,   890,   935,    -1,    -1,   894,    -1,
      -1,   941,   133,   899,   900,    -1,    -1,    -1,    -1,   140,
      -1,    -1,     9,    -1,   910,   911,    -1,   734,   567,   456,
      -1,    -1,   816,   572,    -1,    -1,   820,    -1,    -1,    -1,
     467,    -1,     0,    -1,   974,   931,    33,    34,   755,   935,
      -1,    -1,   982,    -1,    -1,   941,   840,    -1,   842,   766,
      -1,    -1,    -1,   123,   994,   125,    53,    54,    55,    56,
      -1,    58,    59,    -1,    -1,    -1,    -1,   784,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   974,    -1,
      -1,    -1,    -1,    -1,   699,    -1,   982,    -1,    -1,    -1,
      58,    -1,   529,    -1,    -1,    -1,   890,    -1,   994,    -1,
     894,    -1,    -1,   820,    -1,   899,   900,    -1,    -1,    -1,
      -1,    -1,    -1,     0,    -1,    -1,   910,   911,    -1,   734,
      -1,    -1,   456,   840,    -1,   842,   123,    -1,   125,    -1,
     567,    -1,    -1,   467,    -1,   572,    -1,   931,    25,    -1,
     755,   935,    -1,    -1,    -1,    -1,    -1,   941,    -1,    -1,
     699,   766,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,   133,     9,    -1,    -1,   784,
      -1,    58,   140,   890,    -1,    -1,    -1,   894,    -1,    -1,
     974,    -1,   899,   900,    -1,   734,    -1,    -1,   982,    -1,
      33,    34,    35,   910,   911,   529,    -1,    -1,    -1,    86,
     994,    -1,    -1,    -1,    -1,   820,   755,    -1,    -1,    -1,
      53,    54,    55,    56,   931,    58,    59,   766,   935,    -1,
      -1,    -1,    -1,     9,   941,   840,    -1,   842,    -1,    -1,
      -1,    -1,    -1,   567,    -1,   784,     0,    -1,   572,    -1,
      -1,    -1,    -1,    -1,   456,    -1,   133,    33,    34,    35,
      -1,    -1,    -1,   140,    -1,   467,    -1,   974,    -1,    -1,
      -1,    25,   699,    -1,     9,   982,    -1,    53,    54,    55,
      56,   820,    58,    59,    -1,   890,    -1,   994,    -1,   894,
     123,    -1,    46,    -1,   899,   900,    -1,    -1,    33,    34,
      35,   840,    -1,   842,    58,   910,   911,   734,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    53,    54,
      55,    56,    -1,    58,    59,    -1,   931,   529,   755,    -1,
     935,    -1,    86,    -1,    -1,   456,   941,    -1,    -1,   766,
      -1,    -1,    -1,   119,    -1,    -1,   467,   123,     0,   125,
      -1,   890,    -1,    -1,    -1,   894,    -1,   784,    -1,    -1,
     899,   900,    -1,    -1,    -1,   567,    -1,    -1,   103,   974,
     572,   910,   911,    25,    -1,   699,    -1,   982,    -1,   133,
      -1,    -1,     0,    -1,   119,    -1,   140,    -1,   123,   994,
     125,    -1,   931,   820,    46,    -1,   935,    -1,    -1,    -1,
      -1,    -1,   941,    -1,    -1,    -1,    58,    25,   529,    -1,
     734,    -1,     9,   840,    -1,   842,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,   755,    -1,    -1,    -1,   974,    33,    34,    35,    -1,
      58,    -1,   766,   982,    -1,    -1,   567,    -1,    -1,    -1,
      -1,   572,    -1,    -1,    -1,   994,    53,    54,    55,    56,
     784,    58,    59,   890,    -1,    -1,    -1,   894,    -1,    -1,
      -1,    -1,   899,   900,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,    -1,   910,   911,    -1,    -1,    -1,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   820,   699,   456,    -1,
      -1,    -1,    -1,    -1,   931,    -1,    -1,    -1,   935,   467,
      -1,     0,    -1,    -1,   941,   133,   840,    -1,   842,    30,
      31,    32,   140,    -1,    -1,    -1,   123,    -1,   125,    -1,
      -1,    -1,   734,    -1,    -1,    -1,    25,    48,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    57,   974,    -1,    -1,
      -1,    -1,    -1,   755,    -1,   982,    -1,    46,    -1,     9,
      -1,    -1,    -1,    -1,   766,    -1,   890,   994,    -1,    58,
     894,   529,    -1,    -1,    -1,   899,   900,    -1,   699,   456,
      -1,    -1,   784,    33,    34,    35,   910,   911,    -1,    -1,
     467,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    53,    54,    55,    56,   931,    58,    59,
      -1,   935,    -1,   734,    -1,    -1,    -1,   941,   820,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   755,    -1,     9,    -1,   840,    -1,
     842,    -1,    -1,    -1,   133,   766,    -1,    -1,    -1,    -1,
     974,   140,   529,   103,    -1,    -1,    -1,    -1,   982,    -1,
      33,    34,    35,   784,    -1,    -1,    -1,    -1,    -1,   119,
     994,    -1,    -1,   123,    -1,   125,    -1,    -1,    -1,    -1,
      53,    54,    55,    56,    -1,    58,    59,    -1,   890,    -1,
     567,    -1,   894,    -1,    -1,   572,    -1,   899,   900,   820,
      -1,    -1,   456,     0,    -1,    -1,    -1,    -1,   910,   911,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,     9,   840,
      -1,   842,    -1,    -1,    -1,    -1,    -1,    -1,    25,   931,
     103,    -1,    -1,   935,    -1,    -1,    -1,    -1,    -1,   941,
      -1,   699,    33,    34,    35,    -1,   119,    -1,    -1,    46,
     123,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    58,    53,    54,    55,    56,    -1,    58,    59,   890,
      -1,    -1,   974,   894,    -1,   529,   734,    -1,   899,   900,
     982,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   910,
     911,    -1,   994,    -1,    -1,    -1,    -1,   755,    -1,    -1,
       0,    -1,    -1,    -1,   456,    -1,    -1,    -1,   766,    -1,
     931,    -1,    -1,   567,   935,   467,    -1,    -1,   572,    -1,
     941,    -1,   699,    -1,    -1,    25,   784,    -1,   119,    -1,
      -1,    -1,   123,    -1,   125,    -1,   133,    -1,   456,    -1,
      -1,     9,    -1,   140,    -1,    -1,    46,    -1,    -1,   467,
       9,    -1,    -1,   974,    -1,    -1,    -1,   734,    58,    -1,
      -1,   982,   820,    -1,    -1,    33,    34,    35,    -1,    -1,
      -1,    -1,    -1,   994,    33,    34,    35,   529,   755,     9,
      -1,    -1,   840,    -1,   842,    53,    54,    55,    56,   766,
      58,    59,    -1,    -1,    53,    54,    55,    56,    -1,    58,
      59,    -1,    -1,    33,    34,    35,    -1,   784,    -1,    -1,
      -1,   529,     0,    -1,    -1,   567,    -1,    -1,    -1,    -1,
     572,    -1,    -1,    53,    54,    55,    56,    -1,    58,    59,
      -1,    -1,   890,   133,    -1,    -1,   894,    25,    -1,    -1,
     140,   899,   900,   820,    -1,   699,    -1,    -1,    -1,   567,
      -1,    -1,   910,   911,   572,   123,    -1,   125,    46,    -1,
      -1,     0,    -1,   840,   123,   842,   125,   456,    -1,    -1,
      58,    -1,    -1,   931,    -1,    -1,    -1,   935,   467,    -1,
     734,    -1,    -1,   941,    -1,    -1,    25,    -1,    -1,    -1,
      -1,    -1,    -1,   123,    -1,   125,    -1,    -1,    -1,    -1,
      -1,   755,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,   766,   890,    -1,    -1,   974,   894,    -1,    58,
      -1,    -1,   899,   900,   982,    -1,    -1,    -1,    -1,    -1,
     784,    -1,    -1,   910,   911,    -1,   994,    -1,    -1,    -1,
     529,    -1,    -1,    -1,    -1,   133,    -1,   699,    -1,    -1,
      -1,    -1,   140,    -1,   931,    -1,    -1,    -1,   935,    -1,
      -1,    -1,    -1,    -1,   941,    -1,   820,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   699,   734,   572,    -1,    -1,   840,    -1,   842,    -1,
      -1,    -1,    -1,    -1,   133,    -1,    -1,   974,    -1,    -1,
      -1,   140,    -1,   755,    -1,   982,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   766,    -1,   734,   994,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   784,    -1,    -1,    -1,   890,   755,    -1,    -1,
     894,    -1,    -1,    -1,    -1,   899,   900,    -1,   766,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   910,   911,    -1,   456,
      -1,    -1,    -1,    -1,    -1,    -1,   784,    -1,   820,    -1,
     467,    -1,    -1,    -1,    -1,    -1,    -1,   931,    -1,    -1,
      -1,   935,    -1,    -1,    -1,    -1,    -1,   941,   840,    -1,
     842,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   820,    -1,    -1,     0,    -1,    -1,    -1,    -1,
     699,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     974,    -1,   840,    -1,   842,    -1,    -1,    -1,   982,    -1,
      25,    -1,   529,    -1,    -1,    -1,    -1,    -1,   890,    -1,
     994,    -1,   894,    -1,    -1,   734,    -1,   899,   900,    -1,
      -1,    46,    -1,    -1,    -1,    -1,   456,    -1,   910,   911,
      -1,    -1,    -1,    58,    -1,    -1,   755,   467,    -1,    -1,
     567,    -1,   890,    -1,    -1,   572,   894,   766,    -1,   931,
      -1,   899,   900,   935,    -1,    -1,    -1,    -1,    -1,   941,
      -1,    -1,   910,   911,    -1,   784,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,    26,    27,    -1,    -1,    30,    31,
      32,    -1,    -1,   931,    -1,    -1,    -1,   935,    -1,    -1,
      -1,    -1,   974,   941,    -1,    -1,    48,    49,    25,   529,
     982,   820,    -1,    -1,    -1,    57,    -1,    -1,   133,    -1,
      -1,    -1,   994,    -1,    -1,   140,    -1,    -1,    -1,    46,
      -1,   840,    -1,   842,    -1,    -1,   974,    -1,     0,    -1,
      -1,    58,    -1,    -1,   982,    -1,    -1,   567,   456,    -1,
      -1,    -1,   572,    -1,    -1,    -1,   994,    -1,    -1,   467,
      -1,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   890,   699,    -1,    -1,   894,    -1,    -1,    -1,    -1,
     899,   900,    -1,    -1,    -1,    -1,    58,   456,    -1,    -1,
      -1,   910,   911,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,   734,    -1,    -1,
      -1,   529,   931,   140,    -1,    -1,   935,    -1,    -1,    -1,
      -1,    -1,   941,    -1,    -1,    -1,     0,    68,   755,    70,
      71,    -1,    73,    -1,    75,    -1,    77,    -1,    79,   766,
      81,    -1,    83,    -1,    85,    86,    87,    -1,    -1,   567,
      91,    -1,    -1,    94,   572,   974,    97,   784,    99,    -1,
     529,   133,    -1,   982,    -1,    -1,    -1,    -1,   140,   699,
      -1,    -1,    -1,    -1,    -1,   994,    -1,   118,    -1,    -1,
      -1,    -1,    -1,   124,    58,    -1,    -1,     0,    -1,    -1,
      -1,    -1,    -1,   820,    -1,    -1,    -1,    -1,   567,    -1,
      -1,    -1,    -1,   572,   734,    -1,    -1,    -1,    -1,    -1,
       5,    -1,    -1,   840,    -1,   842,    11,    12,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   755,    -1,    22,    23,    -1,
      25,    -1,    -1,    -1,    29,    -1,   766,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    41,    -1,    43,    -1,
      -1,    46,    47,    -1,   784,    -1,    51,    52,    -1,   133,
      -1,    -1,    -1,   890,    -1,    60,   140,   894,    -1,    -1,
      -1,    -1,   899,   900,    -1,    70,    71,    -1,    -1,    -1,
      -1,   699,    -1,   910,   911,    -1,    -1,    82,    -1,    -1,
     820,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    -1,    97,    -1,   931,    -1,    -1,    -1,   935,    -1,
     840,    -1,   842,    -1,   941,    -1,   734,    -1,    -1,   114,
     133,    -1,    -1,    -1,   119,    -1,    -1,   140,    -1,    -1,
     699,   456,    -1,    -1,    -1,    -1,    -1,   755,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,   974,   766,    -1,
      -1,    -1,    -1,    -1,    -1,   982,    -1,    -1,    -1,    -1,
     890,    -1,    -1,    -1,   894,   734,   784,   994,    -1,   899,
     900,     5,    -1,    -1,    -1,    -1,    -1,    11,    12,    -1,
     910,   911,    -1,    -1,    -1,    -1,   755,    -1,    22,    23,
      -1,    25,    -1,    -1,    -1,    29,    -1,   766,    -1,    -1,
      -1,   931,   820,    -1,   529,   935,    -1,    41,    -1,    43,
      -1,   941,    46,    47,    -1,   784,    -1,    51,    52,    -1,
      -1,    -1,   840,    -1,   842,    -1,    60,    -1,    -1,   456,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    -1,    -1,
     467,    -1,   567,    -1,   974,    -1,    -1,   572,    82,    -1,
      -1,   820,   982,    -1,    -1,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    -1,    97,   994,    -1,    -1,    -1,    -1,    -1,
      -1,   840,   890,   842,    -1,    -1,   894,    -1,    -1,    -1,
     114,   899,   900,    -1,   456,    -1,    -1,    -1,    -1,    -1,
      -1,     5,   910,   911,    -1,   467,    -1,    11,    12,    -1,
      -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,    22,    23,
      -1,    25,    -1,   931,    -1,    29,    -1,   935,    -1,    -1,
      -1,   890,    -1,   941,    -1,   894,    -1,    41,    -1,    43,
     899,   900,    46,    47,    -1,    -1,    -1,    51,    52,    -1,
     567,   910,   911,    -1,    -1,   572,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   974,   529,    -1,    -1,
      -1,    -1,   931,    -1,   982,    -1,   935,    -1,    82,    -1,
      -1,    -1,   941,    -1,   699,    -1,   994,    -1,    -1,    93,
      -1,    -1,   456,    97,    -1,    -1,    -1,    -1,    -1,    -1,
       5,    -1,    -1,   467,    -1,    -1,    11,    12,    -1,    -1,
      -1,    -1,   116,   117,    -1,   974,    -1,    22,    23,   734,
      25,    -1,    -1,   982,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   994,    41,    -1,    43,    -1,
     755,    46,    47,     5,    -1,    -1,    51,    52,    -1,    11,
      12,   766,    -1,   456,    -1,    60,    -1,    -1,    -1,    -1,
      22,    23,    -1,    25,   467,   529,    -1,    29,    -1,   784,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    41,
      -1,    43,   699,    -1,    46,    47,    -1,    -1,    93,    51,
      52,    -1,    97,    -1,    -1,    -1,    -1,    -1,    60,    -1,
      -1,    -1,    -1,    -1,    -1,   820,    -1,    -1,    -1,    -1,
     115,     0,     1,    -1,    -1,    -1,    -1,   734,    -1,    -1,
      82,    -1,    -1,    -1,    -1,   840,   529,   842,    -1,    -1,
      -1,    93,    -1,    -1,    -1,    97,    -1,   699,   755,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   766,
      -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    26,
      27,    -1,    -1,    30,    31,    32,    -1,   784,    -1,    58,
      -1,    -1,   734,    -1,    -1,   890,    -1,    -1,    -1,   894,
      -1,    48,    49,    -1,   899,   900,    -1,    -1,    -1,    -1,
      57,    -1,    -1,   755,    -1,   910,   911,    -1,    -1,    -1,
      -1,    -1,    -1,   820,   766,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   931,    -1,    -1,    -1,
     935,    -1,   784,   840,    -1,   842,   941,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   699,   103,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,   820,   974,
     149,    -1,    -1,    -1,    -1,    -1,    -1,   982,    -1,    -1,
     734,    -1,    -1,   890,    -1,    -1,    -1,   894,   840,   994,
     842,    -1,   899,   900,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   755,    -1,   910,   911,    -1,   699,    -1,    -1,    -1,
      -1,    -1,   766,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   931,    -1,    -1,    -1,   935,    -1,
     784,   210,    -1,    -1,   941,    -1,    -1,    -1,   890,   218,
      -1,   734,   894,    -1,    -1,    -1,    -1,   899,   900,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   910,   911,
      -1,    -1,   755,    -1,    -1,    -1,   820,   974,    -1,   248,
      -1,    -1,    -1,   766,    -1,   982,    -1,   256,    -1,   931,
     259,    -1,    -1,   935,    -1,    -1,   840,   994,   842,   941,
      -1,   784,    -1,    -1,    -1,   274,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    11,    12,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    -1,    25,    -1,    -1,
      -1,    29,   974,    -1,    -1,    -1,    -1,   820,    -1,    -1,
     982,    -1,    -1,    41,    -1,    43,   890,    -1,    46,    47,
     894,    -1,   994,    51,    52,   899,   900,   840,    -1,   842,
      -1,    -1,    60,    -1,    -1,    -1,   910,   911,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    -1,   931,    -1,    -1,
      -1,   935,    -1,    -1,    -1,    93,    -1,   941,    -1,    97,
      -1,    -1,    -1,   101,    -1,    -1,    -1,   890,    -1,    14,
      15,   894,    -1,    -1,    -1,    -1,   899,   900,    -1,    -1,
      25,    -1,    -1,    -1,    -1,    -1,    -1,   910,   911,    -1,
     974,    -1,    -1,    -1,    39,    -1,    41,    42,   982,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,   931,    -1,
     994,    56,   935,    -1,    -1,    -1,    -1,    -1,   941,    -1,
      -1,    66,    -1,    68,    -1,    70,    71,    -1,    73,    -1,
      75,   440,    77,    -1,    79,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    91,    -1,    -1,    94,
      -1,   974,    97,    -1,    99,    -1,    -1,   466,    -1,   982,
      -1,    -1,    -1,    -1,   473,    -1,    -1,   476,    -1,   478,
      -1,   994,    -1,   118,    -1,    -1,    -1,    -1,    -1,   124,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,   510,   511,    -1,    -1,    -1,    -1,   152,   153,    -1,
      -1,   520,    -1,    -1,    -1,    -1,    -1,   526,   527,    -1,
      -1,   530,    -1,   532,    -1,    -1,   171,    -1,    -1,    -1,
      -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
     559,     7,     8,    -1,    10,    11,    12,    13,    14,   568,
      -1,    -1,    -1,    19,    20,    21,    22,    23,   213,    25,
      -1,    -1,    28,    29,   219,    -1,    -1,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    41,    -1,    43,    -1,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
     245,   246,   247,    -1,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    70,    71,    -1,   262,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   634,    82,    -1,    -1,    -1,
      -1,    -1,   277,    -1,    -1,    -1,    -1,    93,    94,    -1,
      -1,    97,    -1,    -1,   100,   101,   291,   292,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,    -1,   114,   115,
      -1,    -1,    -1,   119,    -1,   121,     5,   123,     7,     8,
      -1,    10,    11,    12,    13,    14,    -1,    -1,   687,    -1,
      19,    20,    21,    22,    23,    -1,    25,    -1,   697,    28,
      29,    -1,    -1,    -1,    33,    34,    -1,    -1,   707,    -1,
      -1,    -1,    41,    -1,    43,    -1,    -1,    46,    47,    -1,
      -1,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,    70,    71,    -1,    -1,   744,    -1,   746,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    -1,    -1,   756,    -1,   394,
     759,   760,   761,    -1,    93,    94,   765,    -1,    97,   768,
      -1,   100,   101,    -1,    -1,   410,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,
     119,    -1,   121,    -1,   123,    -1,    -1,   796,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    -1,    25,    -1,    -1,    28,    29,
      -1,    -1,    -1,    33,    34,   834,    -1,    -1,    -1,    -1,
      -1,    41,   841,    43,    -1,   844,    46,    47,    10,    -1,
      50,    51,    52,    -1,    -1,    -1,    -1,    19,    20,    -1,
      60,    -1,    -1,   862,   863,    -1,    -1,    -1,    68,    -1,
      70,    71,    -1,    -1,    -1,   874,    -1,   512,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    49,    -1,    -1,
      -1,    -1,    54,    93,    94,    -1,    -1,    97,    -1,   534,
     100,    -1,   901,    -1,   539,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   548,   114,   115,    -1,   916,   118,   119,
      -1,   121,    -1,   123,    -1,    -1,   925,   926,    -1,   564,
     929,    -1,   567,   932,   933,    -1,    -1,   572,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    26,    27,    -1,   948,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,    48,    49,
      11,    12,    -1,   972,   136,    -1,    -1,    57,    -1,    -1,
      -1,    22,    23,    -1,    25,   147,    -1,    -1,    29,    -1,
      -1,    -1,   154,    -1,    -1,   630,   631,    -1,    -1,   161,
      41,    -1,    43,    -1,    -1,    46,    47,   169,   170,    -1,
      51,    52,    -1,    -1,    -1,   650,    -1,    -1,    -1,    60,
      -1,    -1,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,
      -1,    82,    26,    27,    -1,    -1,    30,    31,    32,    -1,
      -1,   686,    93,    -1,   689,    -1,    97,    -1,   693,   694,
      -1,    -1,     5,    47,    48,    49,    -1,    -1,    11,    12,
     705,    -1,   707,    57,   115,    -1,    -1,   712,   713,    22,
      23,    -1,    25,   718,   719,    -1,    29,   249,    -1,    -1,
      -1,    -1,   727,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      43,    -1,    -1,    46,    47,    -1,    -1,    -1,    51,    52,
      -1,   273,    -1,   275,    -1,    -1,    -1,    60,    -1,   103,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,   295,   296,    -1,    -1,   299,    -1,    82,
      -1,    -1,    -1,    -1,   306,    -1,    -1,    -1,   310,    -1,
      93,    -1,    -1,   315,    97,    -1,    -1,   319,   101,    -1,
      -1,   323,   797,   798,    -1,   327,    -1,    -1,   330,    -1,
      -1,    -1,   334,    -1,    -1,    -1,    -1,    -1,    -1,   341,
      -1,   816,    -1,    -1,    -1,    -1,    -1,    -1,   823,    -1,
     825,    72,    73,    74,    75,    76,    77,    78,    79,    80,
     835,    -1,   837,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    -1,    -1,   377,    -1,   379,    -1,    -1,
     382,    -1,    -1,   385,    -1,   860,    -1,    -1,   390,    -1,
     865,    -1,    -1,     5,   396,   870,    -1,    -1,   873,    11,
      12,   403,   404,   405,   406,   407,   408,   409,    -1,    -1,
      22,    23,    -1,    25,    -1,   417,    -1,    29,   420,    -1,
      -1,    -1,    -1,    -1,   426,    -1,   428,    -1,   430,    41,
     432,    43,   434,    -1,    46,    47,    -1,    -1,    -1,    51,
      52,    -1,   917,    -1,    -1,   920,    -1,    -1,    60,    -1,
      -1,    -1,   927,    -1,    -1,    -1,    -1,    -1,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    93,    -1,    -1,   959,    97,    -1,    -1,    -1,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,    -1,   509,    64,    65,
      -1,    67,    -1,    69,    -1,    -1,    72,    -1,    74,    -1,
      76,   523,   997,   998,    80,    -1,    -1,     9,    84,    -1,
      -1,    -1,    88,    89,    -1,    -1,    -1,    93,    -1,    95,
      -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    34,    35,    -1,    -1,   112,    -1,    -1,    -1,
      -1,   117,   564,    -1,   566,    -1,    -1,   123,    -1,    -1,
      -1,    53,    54,    55,    56,    -1,    58,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   587,    -1,    -1,    -1,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      -1,    -1,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    -1,    -1,    -1,    -1,   172,   173,   174,   175,
     176,   177,   178,   625,   180,    -1,   182,   183,   184,    -1,
     186,   633,   188,   189,   116,   117,   118,    -1,    -1,   641,
      -1,   123,    -1,   125,   646,   201,    -1,    -1,    -1,   205,
      -1,   207,   654,    -1,    -1,    -1,    -1,    -1,   214,     9,
      -1,    -1,    -1,    -1,    -1,    -1,   222,   223,   224,   225,
     226,   227,   228,    -1,   230,    -1,   232,   233,   234,    -1,
     236,   237,   238,    33,    34,   241,   242,   243,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    54,    55,    56,    -1,    58,    59,
     266,   267,    -1,   269,   270,   717,    -1,   719,    -1,    -1,
      -1,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,   751,
      -1,    -1,    -1,    -1,    -1,   757,    -1,    -1,    -1,    -1,
      -1,   763,    -1,    -1,    -1,    -1,    -1,   769,    -1,    -1,
      -1,    -1,    -1,   123,   776,   125,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   785,    -1,    -1,    -1,    -1,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    -1,    -1,   361,    -1,    19,    20,    21,
      22,    23,    24,    25,   816,    -1,   818,    29,    -1,    -1,
      -1,    33,    34,    -1,    36,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    -1,    46,    47,    -1,    -1,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,   849,    60,    61,
      62,    -1,    -1,    -1,    66,   857,    68,    69,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      82,    83,    84,    -1,   876,    -1,    -1,    -1,    -1,    -1,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     902,    -1,   114,    -1,   116,   117,    -1,   119,    -1,   121,
      -1,   123,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,    -1,    10,    11,    12,    13,    14,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,   944,    -1,    -1,    33,    34,    -1,    36,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    -1,    46,    47,
      -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    61,    62,    -1,    -1,    -1,    66,    -1,
      68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    82,    83,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,   117,
      -1,   119,    -1,   121,     1,   123,     3,     4,     5,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
      -1,    68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,
     117,    -1,   119,    -1,   121,    -1,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   724,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   738,    -1,     1,   741,     3,     4,     5,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    -1,    -1,
      17,    -1,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,    36,
      37,    38,    39,    -1,    41,    42,    43,    44,    -1,    46,
      47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    61,    62,    -1,    -1,    -1,    66,
      -1,    68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,
     117,    -1,   119,    -1,   121,     1,   123,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    37,    38,    39,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    -1,
      66,    -1,    68,    69,    70,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,
     116,   117,    -1,   119,    -1,   121,     1,   123,     3,     4,
       5,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      -1,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,
      -1,    36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      -1,    46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    64,
      65,    66,    -1,    68,    69,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,    84,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
      -1,   116,   117,    -1,   119,    -1,   121,     1,   123,     3,
       4,     5,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,
      34,    -1,    36,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    -1,    46,    47,    -1,    -1,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    -1,
      -1,    -1,    66,    -1,    68,    69,    70,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     114,    -1,   116,   117,    -1,   119,    -1,   121,     1,   123,
       3,     4,     5,     6,     7,     8,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    17,    -1,    19,    20,    21,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      33,    34,    -1,    36,    37,    38,    39,    -1,    41,    42,
      43,    44,    -1,    46,    47,    -1,    -1,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,
      -1,    -1,    -1,    66,    -1,    68,    69,    70,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,
      83,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   114,    -1,   116,   117,    -1,   119,    -1,   121,     1,
     123,     3,     4,     5,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    -1,    -1,    17,    -1,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,
      -1,    33,    34,    -1,    36,    37,    38,    -1,    -1,    41,
      42,    43,    44,    -1,    46,    47,    -1,    -1,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
      62,    -1,    -1,    -1,    66,    -1,    68,    69,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      82,    83,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   114,    -1,   116,   117,    -1,   119,    -1,   121,
       1,   123,     3,     4,     5,     6,     7,     8,    -1,    10,
      11,    12,    13,    14,    -1,    -1,    17,    -1,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    -1,
      -1,    -1,    33,    34,    -1,    36,    37,    38,    -1,    -1,
      41,    42,    43,    44,    -1,    46,    47,    -1,    -1,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      61,    62,    -1,    -1,    -1,    66,    -1,    68,    69,    70,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    82,    83,    84,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   114,    -1,   116,   117,    -1,   119,    -1,
     121,     1,   123,     3,     4,     5,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    17,    -1,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    33,    34,    -1,    36,    -1,    38,    39,
      -1,    41,    42,    43,    44,    -1,    46,    47,    -1,    -1,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    61,    62,    -1,    -1,    -1,    66,    -1,    68,    69,
      70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    82,    83,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    93,    94,    95,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   114,    -1,   116,   117,    -1,   119,
      -1,   121,     1,   123,     3,     4,     5,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    -1,    -1,    17,    -1,
      19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    -1,    -1,    -1,    33,    34,    -1,    36,    37,    38,
      -1,    -1,    41,    42,    43,    44,    -1,    46,    47,    -1,
      -1,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    61,    62,    -1,    -1,    -1,    66,    -1,    68,
      69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    82,    83,    84,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   114,    -1,   116,   117,    -1,
     119,    -1,   121,     1,   123,     3,     4,     5,     6,     7,
       8,    -1,    10,    11,    12,    13,    14,    -1,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    -1,    -1,    -1,    33,    34,    -1,    36,    -1,
      -1,    -1,    -1,    41,    42,    43,    44,    -1,    46,    47,
      -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    61,    62,    -1,    -1,    -1,    66,    -1,
      68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    82,    83,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,   117,
      -1,   119,    -1,   121,     1,   123,     3,     4,     5,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    -1,    -1,
      17,    -1,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,    36,
      -1,    -1,    -1,    40,    41,    42,    43,    44,    -1,    46,
      47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    61,    62,    -1,    -1,    -1,    66,
      -1,    68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,   116,
     117,    -1,   119,    -1,   121,     1,   123,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,    -1,
      36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,    -1,
      46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    69,    70,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    82,    83,    84,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,
     116,   117,    -1,   119,    -1,   121,     1,   123,     3,     4,
       5,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      -1,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,    34,
      -1,    36,    -1,    -1,    -1,    -1,    41,    42,    43,    44,
      45,    46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    61,    62,    -1,    -1,
      -1,    66,    -1,    68,    69,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,    84,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
      95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
      -1,   116,   117,    -1,   119,    -1,   121,     1,   123,     3,
       4,     5,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    -1,    -1,    17,    -1,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,    33,
      34,    -1,    36,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    -1,    46,    47,    -1,    -1,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    -1,
      -1,    -1,    66,    -1,    68,    69,    70,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     114,    -1,   116,   117,    -1,   119,    -1,   121,     1,   123,
       3,     4,     5,     6,     7,     8,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    17,    -1,    19,    20,    21,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      33,    34,    -1,    36,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    -1,    46,    47,    -1,    -1,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,
      -1,    -1,    -1,    66,    -1,    68,    69,    70,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,
      83,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   114,    -1,   116,   117,    -1,   119,    -1,   121,     1,
     123,     3,     4,     5,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    -1,    -1,
      -1,    33,    34,    -1,    36,    -1,    -1,    -1,    -1,    41,
      42,    43,    44,    -1,    46,    47,    -1,    -1,    50,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
      62,    -1,    -1,    -1,    66,    -1,    68,    69,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      82,    83,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    93,    94,    95,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   114,    -1,   116,   117,    -1,   119,    -1,   121,
       5,   123,     7,     8,    -1,    10,    11,    12,    13,    14,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    -1,
      25,    -1,    -1,    28,    29,    -1,    -1,    -1,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,    -1,
      -1,    46,    47,    -1,    -1,    50,    51,    52,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    70,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
      -1,    -1,    97,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,    -1,   114,
     115,    -1,    -1,   118,   119,    -1,   121,     5,   123,     7,
       8,    -1,    10,    11,    12,    13,    14,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    -1,    25,    -1,    -1,
      28,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    41,    -1,    43,    -1,    -1,    46,    47,
      -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      68,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1,    97,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    26,    27,   114,   115,    30,    31,
      32,   119,    -1,   121,     5,   123,     7,     8,    -1,    10,
      11,    12,    13,    14,    -1,    -1,    48,    49,    19,    20,
      21,    22,    23,    -1,    25,    57,    -1,    28,    29,    -1,
      -1,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      41,    -1,    43,    -1,    -1,    46,    47,    -1,    -1,    50,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,    70,
      71,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    93,    94,    -1,    -1,    97,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,    26,    -1,   114,   115,    30,    31,    32,   119,    -1,
     121,     5,   123,     7,     8,    -1,    10,    11,    12,    13,
      14,    -1,    -1,    48,    49,    19,    20,    21,    22,    23,
      -1,    25,    57,    -1,    28,    29,    -1,    -1,    -1,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,
      -1,    -1,    46,    47,    -1,    -1,    50,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    70,    71,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
      94,    -1,    -1,    97,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,    -1,
     114,   115,    -1,    -1,    -1,   119,    -1,   121,     5,   123,
       7,     8,    -1,    10,    11,    12,    13,    14,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    -1,    25,    -1,
      -1,    28,    29,    -1,    -1,    -1,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    41,    -1,    43,    -1,    -1,    46,
      47,    -1,    -1,    50,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    68,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1,
      97,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,    -1,   114,   115,    -1,
      -1,    -1,   119,    -1,   121,     5,   123,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    -1,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    43,    -1,    -1,    46,    47,    -1,    -1,
      50,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    93,    94,    -1,    -1,    97,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,   119,
      -1,   121,     5,   123,     7,     8,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    -1,    25,    -1,    -1,    -1,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
      43,    -1,    -1,    46,    47,    -1,    -1,    -1,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,     9,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    70,    71,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      93,    94,    -1,    -1,    97,    -1,    -1,    -1,    -1,    -1,
      53,    54,    55,    56,    -1,    58,    59,    -1,    -1,    -1,
      -1,   114,    -1,    -1,    -1,    -1,   119,    -1,   121,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,     9,
      -1,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    33,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   116,   117,    -1,    -1,    -1,    -1,    -1,
     123,    -1,   125,    53,    54,    55,    56,    -1,    58,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     9,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    -1,    -1,    -1,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    -1,    33,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    54,    55,    56,   119,
      58,    59,    -1,   123,    -1,   125,    -1,    -1,    -1,    -1,
      -1,     9,    -1,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    33,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    54,    55,    56,    -1,
      58,    59,    -1,    -1,    -1,   123,    -1,   125,    -1,    -1,
      -1,     9,    -1,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    33,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    54,    55,    56,    -1,
      58,    59,    -1,    -1,    -1,   123,    -1,   125,    -1,    -1,
      -1,     9,    -1,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,    33,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    54,    55,    56,    -1,
      58,    59,    -1,    -1,    -1,   123,    -1,   125,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
      88,    89,    90,    91,    92,     5,    -1,    -1,    -1,    -1,
      -1,    11,    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    -1,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,   123,    -1,   125,    -1,    -1,
      -1,    41,    -1,    43,    -1,    -1,    46,    47,     5,    -1,
      -1,    51,    52,    -1,    11,    12,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    22,    23,    -1,    25,    -1,
      -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    41,    -1,    43,    -1,    -1,    46,
      47,    -1,     5,    93,    51,    52,    -1,    97,    11,    12,
      -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    22,
      23,    -1,    25,    -1,    -1,   115,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    41,    -1,
      43,    -1,    -1,    46,    47,     5,    93,    -1,    51,    52,
      97,    11,    12,    -1,   101,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    22,    23,    -1,    25,    -1,    -1,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    41,    -1,    43,    -1,    -1,    46,    47,    -1,    -1,
      93,    51,    52,    -1,    97,    -1,    -1,    -1,   101,    -1,
      60,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    -1,    -1,    -1,    85,    86,    87,    88,    89,    90,
      91,    92,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    93,    -1,    -1,    -1,    97,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,   119,    -1,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    -1,    -1,   119,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   119
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     1,     5,     6,     7,     8,    10,    11,    12,    13,
      14,    19,    20,    21,    22,    23,    24,    25,    29,    33,
      34,    36,    41,    42,    43,    44,    46,    47,    50,    51,
      52,    60,    61,    62,    66,    68,    69,    70,    71,    81,
      82,    83,    84,    93,    94,    95,    96,    97,    98,    99,
     100,   114,   116,   117,   119,   121,   123,   128,   129,   130,
     131,   136,   142,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   185,   186,
     187,   188,   189,   191,   195,   200,   202,   203,   204,   206,
     218,   220,   221,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   238,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   268,   271,   274,   289,
     290,   293,   305,   307,   309,   319,   322,   324,   335,   340,
     343,   345,   352,   363,   369,   371,   371,   144,   151,   152,
      35,    35,   256,   257,   119,    11,    12,    14,    22,    23,
      25,    28,    29,    41,    43,    50,    52,    60,    93,   107,
     108,   115,   159,   160,   162,   164,   167,   169,   171,   174,
     176,   178,   180,   185,   186,   187,   191,   194,   200,   204,
     207,   212,   218,   220,   221,   222,   223,   231,   232,   233,
     234,   238,   243,   244,   246,   247,   249,   253,   296,   158,
     157,   158,   151,   145,   176,   207,   212,   212,   308,   272,
     151,   158,   159,   160,   162,   164,   167,   169,   171,   174,
     176,   178,   180,   185,   186,   187,   191,   200,   204,   217,
     218,   238,   247,   253,    35,   269,   258,   147,   353,   143,
     151,   178,   180,   362,    10,   158,   158,   121,   158,   280,
      19,   150,   239,   365,   158,   178,   180,   185,   187,   200,
     247,   331,   332,   344,   212,   119,   247,   115,   212,   172,
     158,   178,   180,   201,     0,     1,   130,   131,   142,   274,
     371,     3,     4,    35,   119,     9,   125,   235,   236,     9,
     235,   158,   178,   180,   184,   247,     9,    35,   235,   184,
       9,    35,   235,   184,   184,     9,    35,   235,   184,     9,
      35,   235,   184,     9,    35,   235,   184,     9,    35,   184,
       9,   235,   184,   247,     9,    35,   119,   151,   235,   184,
     247,     9,    35,   119,   151,   235,   184,   247,     8,    10,
     158,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   173,   174,   175,   177,   178,   179,   180,   181,
     184,   238,   247,   248,   253,   254,   184,     9,   235,     9,
     151,   235,     9,    35,   184,     9,    35,   151,   235,   184,
       9,    35,   119,   235,   123,   184,     9,    35,   151,   235,
     184,    33,    34,    53,    54,    55,    56,    58,    59,   103,
     123,   219,   151,   151,   151,   151,   151,     9,    35,   235,
       9,    35,   151,   235,   184,   247,   118,   120,   118,   120,
     118,   120,   118,   120,     9,    35,   151,   235,   184,   151,
      15,    16,    17,    18,   297,   299,   304,     1,    12,    24,
      25,   130,   142,   153,   154,   155,   156,   274,   371,    17,
      37,    38,    39,   306,   310,   315,   212,   156,    17,   341,
     342,   151,   151,   212,   371,   158,   259,   262,   259,   212,
     249,   212,   212,   212,   158,   189,   208,   213,   209,   210,
     211,    26,    27,    30,    31,    32,    48,    49,    57,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   214,   118,
     294,   149,   118,   371,   178,   260,   261,   262,   371,   158,
     273,     9,   103,   328,   182,   158,   270,   273,   260,   371,
     212,   364,    19,   119,   276,   371,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    85,    86,    87,    88,    89,
      90,    91,    92,   138,   139,   140,   119,   371,   107,   120,
     101,   158,   241,   242,    67,   366,    51,   118,   212,   371,
     158,   101,   115,   197,   198,   199,   212,   216,   237,   371,
     158,   158,   190,   212,   101,   212,   215,   118,   124,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   192,   212,
     193,   212,   212,   212,   212,   212,   205,   201,   212,   212,
     212,   212,   212,   212,   212,   212,   201,   212,   212,   212,
     212,   212,   212,   212,   371,   300,   304,    16,   297,   304,
       3,     4,   153,   311,   316,    37,   306,   315,    38,   306,
     371,    37,    38,   346,   349,   371,   125,   138,   266,   267,
     118,   371,   371,   118,   118,   139,   139,   139,   139,   139,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   139,   118,   198,
     212,   371,   371,   158,   138,   266,   118,   146,   138,   118,
     371,   212,   138,    51,   118,   371,   371,   148,   153,   291,
     292,   371,   366,   115,   371,   275,   158,   279,   280,   282,
     158,   158,   277,   281,    19,   371,   138,   126,   118,   118,
     158,   194,   198,   207,   247,   367,   368,   115,   212,   333,
     334,   331,   371,    17,   370,   120,   158,   178,   185,   187,
     189,   200,   118,   122,   132,   134,   133,   135,   196,   199,
     215,   125,   196,   196,   196,   298,   212,   302,   304,   158,
     158,   212,   371,   313,   306,   318,   320,   212,   350,    37,
     342,   349,   212,   263,   264,   140,   118,   124,   262,   197,
     212,   197,   118,   118,   295,     9,   140,   261,   371,   158,
     325,   158,   158,   371,   153,   354,    19,    82,   115,   158,
     284,   287,   288,   283,   280,   282,   371,   158,   278,   282,
     284,   212,   240,   101,   158,   368,   118,   158,   118,   336,
     291,   199,   371,   119,   371,   119,   118,   120,   215,   120,
     120,   120,   292,   371,   212,   119,   371,   119,   371,   371,
     317,   212,   371,   292,   347,   371,   212,     9,   212,   125,
     118,   120,   197,   197,   292,   212,   138,    46,   138,    63,
      64,   359,   360,   361,   371,   115,   158,   158,   138,   120,
     118,   118,   138,   118,   122,   120,   118,   122,   138,   368,
     333,    97,   339,    17,   101,   137,   141,   158,   137,   199,
     301,   371,   137,   137,   312,   292,   371,   292,   321,   371,
     351,   348,   265,   212,   197,   120,   120,   212,   158,   355,
     371,   371,   158,   138,   119,   138,   138,   115,   158,   288,
      82,   282,   371,   138,   212,   337,   120,   118,   138,   120,
     292,   303,   120,   120,   292,   314,    17,    40,   323,   292,
     292,   371,   212,   120,    47,   329,    65,   357,   358,   292,
     292,   119,   138,   216,   285,   286,   371,   158,   138,   115,
     158,   371,   371,   101,   158,   371,   292,   371,   371,   292,
     292,   212,   326,   356,   371,   285,   118,   120,   119,   138,
     158,   138,   338,   138,   371,    17,   292,   120,   286,   285,
     119,   138,   292,   330,   327,   120,   285,    17,    45,   330,
     120,   158,   158
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (pComp, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, pComp)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, pComp); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, HB_COMP_PTR pComp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, pComp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    HB_COMP_PTR pComp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (pComp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, HB_COMP_PTR pComp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, pComp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    HB_COMP_PTR pComp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, pComp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, HB_COMP_PTR pComp)
#else
static void
yy_reduce_print (yyvsp, yyrule, pComp)
    YYSTYPE *yyvsp;
    int yyrule;
    HB_COMP_PTR pComp;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , pComp);
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, pComp); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, HB_COMP_PTR pComp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, pComp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    HB_COMP_PTR pComp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (pComp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 19: /* "LITERAL" */
#line 261 "harbour.y"
	{ if( (yyvaluep->valChar).dealloc ) hb_xfree( (yyvaluep->valChar).string ); };
#line 3892 "harboury.c"
	break;
      case 94: /* "CBSTART" */
#line 260 "harbour.y"
	{ if( (yyvaluep->asCodeblock).string )  hb_xfree( (yyvaluep->asCodeblock).string ); };
#line 3897 "harboury.c"
	break;

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (HB_COMP_PTR pComp);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (HB_COMP_PTR pComp)
#else
int
yyparse (pComp)
    HB_COMP_PTR pComp;
#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 9:
#line 274 "harbour.y"
    { yyclearin; yyerrok; ;}
    break;

  case 15:
#line 280 "harbour.y"
    { yyclearin; yyerrok; ;}
    break;

  case 16:
#line 284 "harbour.y"
    { HB_COMP_PARAM->currModule = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[(3) - (4)].valChar).string, (yyvsp[(3) - (4)].valChar).dealloc ? HB_IDENT_FREE : HB_IDENT_STATIC );
                    HB_COMP_PARAM->currLine = (yyvsp[(2) - (4)].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = FALSE;
                    if( (yyvsp[(3) - (4)].valChar).dealloc ) { hb_xfree( (yyvsp[(3) - (4)].valChar).string ); (yyvsp[(3) - (4)].valChar).dealloc = FALSE; } ;}
    break;

  case 17:
#line 289 "harbour.y"
    { HB_COMP_PARAM->currModule = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[(5) - (6)].valChar).string, (yyvsp[(5) - (6)].valChar).dealloc ? HB_IDENT_FREE : HB_IDENT_STATIC );
                    HB_COMP_PARAM->currLine = (yyvsp[(2) - (6)].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = FALSE;
                    if( (yyvsp[(3) - (6)].valChar).dealloc ) { hb_xfree( (yyvsp[(3) - (6)].valChar).string ); (yyvsp[(3) - (6)].valChar).dealloc = FALSE; }
                    if( (yyvsp[(5) - (6)].valChar).dealloc ) { hb_xfree( (yyvsp[(5) - (6)].valChar).string ); (yyvsp[(5) - (6)].valChar).dealloc = FALSE; } ;}
    break;

  case 18:
#line 296 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), 0 ); ;}
    break;

  case 20:
#line 297 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), FUN_PROCEDURE ); ;}
    break;

  case 22:
#line 298 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), 0 ); HB_COMP_PARAM->iVarScope = VS_PARAMETER; ;}
    break;

  case 24:
#line 299 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), FUN_PROCEDURE ); HB_COMP_PARAM->iVarScope = VS_PARAMETER;;}
    break;

  case 26:
#line 302 "harbour.y"
    { (yyval.iNumber) = HB_FS_PUBLIC; ;}
    break;

  case 27:
#line 303 "harbour.y"
    { (yyval.iNumber) = HB_FS_STATIC; ;}
    break;

  case 28:
#line 304 "harbour.y"
    { (yyval.iNumber) = HB_FS_INIT; ;}
    break;

  case 29:
#line 305 "harbour.y"
    { (yyval.iNumber) = HB_FS_EXIT; ;}
    break;

  case 30:
#line 308 "harbour.y"
    { (yyval.iNumber) = 0; ;}
    break;

  case 31:
#line 309 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->fVParams = TRUE; (yyval.iNumber) = 0; ;}
    break;

  case 33:
#line 311 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->fVParams = TRUE; (yyval.iNumber) = (yyvsp[(1) - (3)].iNumber); ;}
    break;

  case 34:
#line 314 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 36:
#line 318 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'N'; ;}
    break;

  case 37:
#line 319 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'C'; ;}
    break;

  case 38:
#line 320 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'D'; ;}
    break;

  case 39:
#line 321 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'L'; ;}
    break;

  case 40:
#line 322 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'B'; ;}
    break;

  case 41:
#line 323 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'O'; ;}
    break;

  case 42:
#line 324 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'S'; HB_COMP_PARAM->szFromClass = (yyvsp[(2) - (2)].string); ;}
    break;

  case 43:
#line 325 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 45:
#line 329 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'A'; ;}
    break;

  case 46:
#line 330 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'n'; ;}
    break;

  case 47:
#line 331 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'c'; ;}
    break;

  case 48:
#line 332 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'd'; ;}
    break;

  case 49:
#line 333 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'l'; ;}
    break;

  case 50:
#line 334 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'a'; ;}
    break;

  case 51:
#line 335 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'b'; ;}
    break;

  case 52:
#line 336 "harbour.y"
    { HB_COMP_PARAM->cVarType = 'o'; ;}
    break;

  case 53:
#line 337 "harbour.y"
    { HB_COMP_PARAM->cVarType = 's'; HB_COMP_PARAM->szFromClass = (yyvsp[(2) - (2)].string); ;}
    break;

  case 54:
#line 340 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType ); (yyval.iNumber) = 1; ;}
    break;

  case 55:
#line 341 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType ); (yyval.iNumber)++; ;}
    break;

  case 58:
#line 351 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 59:
#line 352 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 60:
#line 353 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 61:
#line 354 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 62:
#line 355 "harbour.y"
    { if( HB_COMP_ISSUPPORTED( HB_COMPFLAG_XBASE ) )
                                         hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                                      else
                                         hb_compExprDelete( hb_compErrorSyntax( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ), HB_COMP_PARAM );
                                       HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                                    ;}
    break;

  case 63:
#line 361 "harbour.y"
    { if( HB_COMP_ISSUPPORTED( HB_COMPFLAG_XBASE ) )
                                         hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                                      else
                                         hb_compExprDelete( hb_compErrorSyntax( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ), HB_COMP_PARAM );
                                       HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                                    ;}
    break;

  case 64:
#line 367 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 65:
#line 368 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 66:
#line 369 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 67:
#line 370 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 68:
#line 371 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 69:
#line 372 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 70:
#line 373 "harbour.y"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 71:
#line 374 "harbour.y"
    { hb_compGenBreak( HB_COMP_PARAM ); hb_compGenPCode2( HB_P_DOSHORT, 0, HB_COMP_PARAM );
                                      HB_COMP_PARAM->functions.pLast->bFlags |= FUN_BREAK_CODE; ;}
    break;

  case 72:
#line 376 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 73:
#line 377 "harbour.y"
    {
                                       hb_compGenBreak( HB_COMP_PARAM ); hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                                       hb_compGenPCode2( HB_P_DOSHORT, 1, HB_COMP_PARAM );
                                       HB_COMP_PARAM->functions.pLast->bFlags |= FUN_BREAK_CODE;
                                    ;}
    break;

  case 74:
#line 382 "harbour.y"
    { hb_compLoopExit( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags |= FUN_BREAK_CODE; ;}
    break;

  case 75:
#line 383 "harbour.y"
    { hb_compLoopLoop( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->bFlags |= FUN_BREAK_CODE; ;}
    break;

  case 76:
#line 384 "harbour.y"
    {
                        if( HB_COMP_PARAM->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        hb_compGenPCode1( HB_P_ENDPROC, HB_COMP_PARAM );
                        if( (HB_COMP_PARAM->functions.pLast->bFlags & FUN_PROCEDURE) == 0 )
                        { /* return from a function without a return value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_NO_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->bFlags |= FUN_WITH_RETURN | FUN_BREAK_CODE;
                     ;}
    break;

  case 77:
#line 396 "harbour.y"
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 78:
#line 398 "harbour.y"
    {
                        HB_COMP_PARAM->cCastType = HB_COMP_PARAM->cVarType;
                        HB_COMP_PARAM->cVarType = ' ';

                        if( HB_COMP_PARAM->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );   /* TODO: check if return value agree with declared value */
                        hb_compGenPCode2( HB_P_RETVALUE, HB_P_ENDPROC, HB_COMP_PARAM );
                        if( HB_COMP_PARAM->functions.pLast->bFlags & FUN_PROCEDURE )
                        { /* procedure returns a value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_PROC_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->bFlags |= FUN_WITH_RETURN | FUN_BREAK_CODE;
                     ;}
    break;

  case 79:
#line 414 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = VS_PUBLIC; ;}
    break;

  case 80:
#line 416 "harbour.y"
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPUBLIC" ); 
                        HB_COMP_PARAM->cVarType = ' ';  HB_COMP_PARAM->iVarScope = VS_NONE; 
                        HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                     ;}
    break;

  case 82:
#line 420 "harbour.y"
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = VS_PRIVATE; ;}
    break;

  case 83:
#line 422 "harbour.y"
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPRIVATE" ); 
                        HB_COMP_PARAM->cVarType = ' '; HB_COMP_PARAM->iVarScope = VS_NONE; 
                        HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                     ;}
    break;

  case 89:
#line 430 "harbour.y"
    {
                  if( HB_COMP_PARAM->szAnnounce == NULL )
                  {
                     /* check for reserved name
                     * NOTE: Clipper doesn't check for it
                     */
                     char * szFunction = hb_compReservedName( (yyvsp[(2) - (2)].string) );
                     if( szFunction )
                        hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FUNC_RESERVED, szFunction, (yyvsp[(2) - (2)].string) );
                     HB_COMP_PARAM->szAnnounce = (yyvsp[(2) - (2)].string);
                  }
                  else
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_DUPL_ANNOUNCE, (yyvsp[(2) - (2)].string), NULL );
               ;}
    break;

  case 91:
#line 444 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN; ;}
    break;

  case 92:
#line 447 "harbour.y"
    {
               if( (yyvsp[(1) - (1)].valChar).dealloc )
               {
                  (yyvsp[(1) - (1)].valChar).string = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[(1) - (1)].valChar).string, HB_IDENT_FREE );
                  (yyvsp[(1) - (1)].valChar).dealloc = FALSE;
               }
               hb_compAutoOpenAdd( HB_COMP_PARAM, (yyvsp[(1) - (1)].valChar).string );
            ;}
    break;

  case 93:
#line 455 "harbour.y"
    {
               {
                  char szFileName[ _POSIX_PATH_MAX + 1 ];
                  hb_strncat( hb_strncpy( szFileName, (yyvsp[(1) - (3)].valChar).string, _POSIX_PATH_MAX ), (yyvsp[(3) - (3)].valChar).string, _POSIX_PATH_MAX );
                  hb_compAutoOpenAdd( HB_COMP_PARAM, hb_compIdentifierNew( HB_COMP_PARAM, szFileName, HB_IDENT_COPY ) );
                  if( (yyvsp[(1) - (3)].valChar).dealloc )
                     hb_xfree( (yyvsp[(1) - (3)].valChar).string );
                  if( (yyvsp[(3) - (3)].valChar).dealloc )
                     hb_xfree( (yyvsp[(3) - (3)].valChar).string );
               }
            ;}
    break;

  case 94:
#line 468 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 96:
#line 471 "harbour.y"
    { (yyval.lNumber) = 0; ;}
    break;

  case 97:
#line 472 "harbour.y"
    { (yyval.lNumber) = 1; ;}
    break;

  case 98:
#line 473 "harbour.y"
    { (yyval.lNumber) = 1; ;}
    break;

  case 99:
#line 474 "harbour.y"
    { (yyval.lNumber) = 1; ;}
    break;

  case 100:
#line 475 "harbour.y"
    { (yyval.lNumber) = 0; hb_compCheckUnclosedStru( HB_COMP_PARAM ); ;}
    break;

  case 101:
#line 476 "harbour.y"
    { if( HB_COMP_PARAM->ilastLineErr && HB_COMP_PARAM->ilastLineErr == HB_COMP_PARAM->currLine )
                             {
                                 yyclearin; 
                             }
                             else
                             {
                                 yyerrok;
                                 HB_COMP_PARAM->ilastLineErr = HB_COMP_PARAM->currLine;
                             }
                           ;}
    break;

  case 110:
#line 500 "harbour.y"
    { (yyval.lNumber) = (yyvsp[(1) - (1)].lNumber); ;}
    break;

  case 111:
#line 501 "harbour.y"
    { (yyval.lNumber) += (yyvsp[(2) - (2)].lNumber); ;}
    break;

  case 112:
#line 504 "harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 113:
#line 505 "harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string) ); ;}
    break;

  case 115:
#line 509 "harbour.y"
    { (yyval.string) = "STEP"; ;}
    break;

  case 116:
#line 510 "harbour.y"
    { (yyval.string) = "TO"; ;}
    break;

  case 117:
#line 511 "harbour.y"
    { (yyval.string) = "LOOP"; ;}
    break;

  case 118:
#line 512 "harbour.y"
    { (yyval.string) = "EXIT"; ;}
    break;

  case 119:
#line 513 "harbour.y"
    { (yyval.string) = "IN"; ;}
    break;

  case 120:
#line 514 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 121:
#line 515 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 122:
#line 516 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 123:
#line 517 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 124:
#line 518 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 125:
#line 519 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 126:
#line 520 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 127:
#line 521 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 128:
#line 522 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 129:
#line 523 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 130:
#line 524 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 131:
#line 529 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewDouble( (yyvsp[(1) - (1)].valDouble).dNumber, (yyvsp[(1) - (1)].valDouble).bWidth, (yyvsp[(1) - (1)].valDouble).bDec, HB_COMP_PARAM ); ;}
    break;

  case 132:
#line 530 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (1)].valLong).lNumber, HB_COMP_PARAM ); ;}
    break;

  case 133:
#line 533 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewDate( (yyvsp[(1) - (1)].valLong).lNumber, HB_COMP_PARAM );
                                    if( (yyvsp[(1) - (1)].valLong).lNumber == 0 )
                                    {
                                       hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INVALID_DATE, HB_COMP_PARAM->pLex->lasttok, NULL );
                                    }
                                 ;}
    break;

  case 134:
#line 541 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (2)].valLong).lNumber, HB_COMP_PARAM ); ;}
    break;

  case 135:
#line 542 "harbour.y"
    { (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, hb_compExprNewDouble( (yyvsp[(1) - (2)].valDouble).dNumber, (yyvsp[(1) - (2)].valDouble).bWidth, (yyvsp[(1) - (2)].valDouble).bDec, HB_COMP_PARAM ) ); ;}
    break;

  case 136:
#line 547 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewNil( HB_COMP_PARAM ); ;}
    break;

  case 138:
#line 555 "harbour.y"
    {
                                 (yyval.asExpr) = hb_compExprNewString( (yyvsp[(1) - (1)].valChar).string, (yyvsp[(1) - (1)].valChar).length, (yyvsp[(1) - (1)].valChar).dealloc, HB_COMP_PARAM );
                                 (yyvsp[(1) - (1)].valChar).dealloc = FALSE;
                              ;}
    break;

  case 141:
#line 571 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLogical( TRUE, HB_COMP_PARAM ); ;}
    break;

  case 142:
#line 572 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLogical( FALSE, HB_COMP_PARAM ); ;}
    break;

  case 144:
#line 580 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewSelf( HB_COMP_PARAM ); ;}
    break;

  case 146:
#line 588 "harbour.y"
    {(yyval.bTrue)=HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_ARRAY;;}
    break;

  case 147:
#line 588 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArray( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->iPassByRef=(yyvsp[(2) - (4)].bTrue); ;}
    break;

  case 149:
#line 596 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 151:
#line 604 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 152:
#line 607 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAlias( (yyvsp[(1) - (2)].string), HB_COMP_PARAM ); ;}
    break;

  case 153:
#line 612 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, '&', (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 154:
#line 613 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, 0, (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 156:
#line 621 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( (yyvsp[(2) - (2)].asExpr), 0, NULL, HB_COMP_PARAM ); ;}
    break;

  case 158:
#line 631 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAlias( "FIELD", HB_COMP_PARAM ); ;}
    break;

  case 159:
#line 632 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(3) - (3)].asExpr); ;}
    break;

  case 160:
#line 637 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 161:
#line 638 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 162:
#line 639 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 163:
#line 640 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 164:
#line 641 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 165:
#line 642 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 166:
#line 643 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 167:
#line 644 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 168:
#line 645 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 169:
#line 646 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 170:
#line 647 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 171:
#line 648 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 172:
#line 649 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 173:
#line 652 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 176:
#line 657 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 177:
#line 658 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 178:
#line 659 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 179:
#line 660 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 180:
#line 661 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 181:
#line 662 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 182:
#line 663 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 183:
#line 664 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 184:
#line 665 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 185:
#line 666 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 186:
#line 667 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 187:
#line 668 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 188:
#line 669 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 189:
#line 670 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 190:
#line 671 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 191:
#line 672 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 192:
#line 673 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 193:
#line 674 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 194:
#line 675 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 195:
#line 684 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 196:
#line 685 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 197:
#line 686 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 198:
#line 687 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 199:
#line 688 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 200:
#line 689 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 201:
#line 694 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 202:
#line 695 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 203:
#line 696 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 204:
#line 697 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 205:
#line 698 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 206:
#line 699 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 207:
#line 700 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 208:
#line 701 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 209:
#line 702 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 210:
#line 703 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 211:
#line 704 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 212:
#line 705 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 213:
#line 706 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 214:
#line 707 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 215:
#line 708 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 216:
#line 709 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 217:
#line 710 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 219:
#line 716 "harbour.y"
    { (yyval.bTrue) = HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL;;}
    break;

  case 220:
#line 716 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( (yyvsp[(1) - (5)].string), HB_COMP_PARAM ), (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->iPassByRef = (yyvsp[(3) - (5)].bTrue); ;}
    break;

  case 222:
#line 720 "harbour.y"
    { (yyval.bTrue) = HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL;;}
    break;

  case 223:
#line 720 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(1) - (5)].asExpr), (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->iPassByRef = (yyvsp[(3) - (5)].bTrue); ;}
    break;

  case 224:
#line 721 "harbour.y"
    { (yyval.bTrue) = HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL;;}
    break;

  case 225:
#line 721 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(1) - (5)].asExpr), (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->iPassByRef = (yyvsp[(3) - (5)].bTrue); ;}
    break;

  case 226:
#line 725 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 228:
#line 731 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 229:
#line 732 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 232:
#line 739 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewVarRef( (yyvsp[(2) - (2)].string), HB_COMP_PARAM ) ); ;}
    break;

  case 233:
#line 740 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); ;}
    break;

  case 234:
#line 741 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); ;}
    break;

  case 235:
#line 742 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); ;}
    break;

  case 236:
#line 743 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr)->value.asList.reference = TRUE; ;}
    break;

  case 237:
#line 746 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); ;}
    break;

  case 239:
#line 752 "harbour.y"
    { (yyval.asExpr) = ((yyvsp[(3) - (3)].asMessage).bMacro ? hb_compExprNewSend( (yyvsp[(1) - (3)].asExpr), NULL, (yyvsp[(3) - (3)].asMessage).value.macro, HB_COMP_PARAM ) : hb_compExprNewSend( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asMessage).value.string, NULL, HB_COMP_PARAM )); ;}
    break;

  case 240:
#line 753 "harbour.y"
    { (yyval.asExpr) = ((yyvsp[(3) - (3)].asMessage).bMacro ? hb_compExprNewSend( (yyvsp[(1) - (3)].asExpr), NULL, (yyvsp[(3) - (3)].asMessage).value.macro, HB_COMP_PARAM ) : hb_compExprNewSend( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asMessage).value.string, NULL, HB_COMP_PARAM )); ;}
    break;

  case 241:
#line 754 "harbour.y"
    {  if( HB_COMP_PARAM->wWithObjectCnt == 0 )
                                                hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_WITHOBJECT, NULL, NULL );
                                             (yyval.asExpr) = ((yyvsp[(2) - (2)].asMessage).bMacro ? hb_compExprNewSend( NULL, NULL, (yyvsp[(2) - (2)].asMessage).value.macro, HB_COMP_PARAM ) : hb_compExprNewSend( NULL, (yyvsp[(2) - (2)].asMessage).value.string, NULL, HB_COMP_PARAM ));
                                          ;}
    break;

  case 242:
#line 760 "harbour.y"
    { (yyval.asMessage).value.string = (yyvsp[(1) - (1)].string); (yyval.asMessage).bMacro=FALSE; ;}
    break;

  case 243:
#line 761 "harbour.y"
    { (yyval.asMessage).value.macro  = (yyvsp[(1) - (1)].asExpr); (yyval.asMessage).bMacro=TRUE;  ;}
    break;

  case 244:
#line 762 "harbour.y"
    { (yyval.asMessage).value.macro  = (yyvsp[(1) - (1)].asExpr); (yyval.asMessage).bMacro=TRUE;  ;}
    break;

  case 245:
#line 765 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(3) - (4)].string), HB_COMP_PARAM ); ;}
    break;

  case 247:
#line 773 "harbour.y"
    {(yyval.bTrue)=HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL;;}
    break;

  case 248:
#line 773 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMethodCall( (yyvsp[(1) - (5)].asExpr), (yyvsp[(4) - (5)].asExpr) ); HB_COMP_PARAM->iPassByRef=(yyvsp[(3) - (5)].bTrue); ;}
    break;

  case 257:
#line 792 "harbour.y"
    {HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 258:
#line 792 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 267:
#line 801 "harbour.y"
    {HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 268:
#line 801 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 271:
#line 804 "harbour.y"
    {HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 272:
#line 804 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 274:
#line 806 "harbour.y"
    {HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 275:
#line 806 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 287:
#line 820 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 288:
#line 820 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 289:
#line 821 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 290:
#line 821 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 292:
#line 825 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); ;}
    break;

  case 294:
#line 829 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewEmpty( HB_COMP_PARAM ); ;}
    break;

  case 296:
#line 833 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 302:
#line 839 "harbour.y"
    { (yyval.asExpr) = hb_compExprListStrip( (yyvsp[(1) - (1)].asExpr), NULL ); ;}
    break;

  case 323:
#line 871 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPostInc( (yyvsp[(0) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 324:
#line 872 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPostDec( (yyvsp[(0) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 325:
#line 875 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 326:
#line 878 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPreInc( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 327:
#line 879 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPreDec( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 328:
#line 882 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewNot( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 329:
#line 883 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewNegate( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 330:
#line 884 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 331:
#line 887 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 332:
#line 888 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 333:
#line 889 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 334:
#line 890 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 335:
#line 891 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 336:
#line 892 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 337:
#line 893 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 338:
#line 894 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 339:
#line 895 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 340:
#line 896 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 341:
#line 897 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 342:
#line 898 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 343:
#line 899 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 344:
#line 900 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->cCastType = HB_COMP_PARAM->cVarType; HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 345:
#line 901 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->cCastType = HB_COMP_PARAM->cVarType; HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 346:
#line 902 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 347:
#line 903 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 348:
#line 904 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 349:
#line 905 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); HB_COMP_PARAM->cCastType = HB_COMP_PARAM->cVarType; HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 350:
#line 906 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 351:
#line 909 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 352:
#line 912 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 353:
#line 915 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 354:
#line 918 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 355:
#line 921 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 356:
#line 924 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 357:
#line 927 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 364:
#line 938 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlus( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 365:
#line 939 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinus( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 366:
#line 940 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMult( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 367:
#line 941 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDiv( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 368:
#line 942 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMod( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 369:
#line 943 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPower( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 370:
#line 946 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewAnd( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 371:
#line 947 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewOr( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 372:
#line 950 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEQ( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 373:
#line 951 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLT( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 374:
#line 952 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGT( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 375:
#line 953 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 376:
#line 954 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 377:
#line 955 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 378:
#line 956 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 379:
#line 957 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewIN( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 380:
#line 958 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEqual( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 382:
#line 967 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(0) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 383:
#line 968 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 384:
#line 969 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(1) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 385:
#line 972 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 386:
#line 973 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 387:
#line 976 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewCodeBlock( (yyvsp[(1) - (1)].asCodeblock).string, (yyvsp[(1) - (1)].asCodeblock).length, (yyvsp[(1) - (1)].asCodeblock).flags, HB_COMP_PARAM ); (yyvsp[(1) - (1)].asCodeblock).string = NULL; ;}
    break;

  case 388:
#line 977 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (6)].asExpr); ;}
    break;

  case 389:
#line 982 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-2) - (1)].asExpr), (yyvsp[(1) - (1)].asExpr) ); ;}
    break;

  case 390:
#line 983 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-2) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 391:
#line 988 "harbour.y"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 392:
#line 989 "harbour.y"
    { (yyval.asExpr) = NULL; (yyvsp[(0) - (1)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; ;}
    break;

  case 393:
#line 990 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr);   ;}
    break;

  case 394:
#line 991 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr);   (yyvsp[(0) - (3)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; ;}
    break;

  case 395:
#line 994 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (2)].asExpr), (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType, HB_COMP_PARAM ); HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 396:
#line 995 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (4)].asExpr), (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType, HB_COMP_PARAM ); HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 406:
#line 1032 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 407:
#line 1035 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 408:
#line 1038 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 409:
#line 1041 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 410:
#line 1042 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 411:
#line 1046 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(3) - (8)].asExpr), HB_COMP_PARAM ), (yyvsp[(5) - (8)].asExpr) ), (yyvsp[(7) - (8)].asExpr) ) ); ;}
    break;

  case 412:
#line 1048 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(2) - (7)].asExpr), HB_COMP_PARAM ), (yyvsp[(4) - (7)].asExpr) ), (yyvsp[(6) - (7)].asExpr) ) ); ;}
    break;

  case 413:
#line 1050 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(2) - (7)].asExpr), HB_COMP_PARAM ), (yyvsp[(4) - (7)].asExpr) ), (yyvsp[(6) - (7)].asExpr) ) ); ;}
    break;

  case 414:
#line 1052 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(2) - (6)].asExpr), HB_COMP_PARAM ), hb_compExprNewEmpty( HB_COMP_PARAM ) ), (yyvsp[(5) - (6)].asExpr) ) ); ;}
    break;

  case 416:
#line 1058 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_LOCAL; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 417:
#line 1059 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 418:
#line 1060 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_STATIC; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 419:
#line 1061 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 420:
#line 1062 "harbour.y"
    { if( HB_COMP_PARAM->functions.pLast->bFlags & FUN_USES_LOCAL_PARAMS )
                             hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_PARAMETERS_NOT_ALLOWED, NULL, NULL );
                          else
                             HB_COMP_PARAM->functions.pLast->wParamNum=0; HB_COMP_PARAM->iVarScope = ( VS_PRIVATE | VS_PARAMETER ); ;}
    break;

  case 421:
#line 1066 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_NONE; ;}
    break;

  case 422:
#line 1069 "harbour.y"
    { (yyval.iNumber) = 1; ;}
    break;

  case 423:
#line 1070 "harbour.y"
    { (yyval.iNumber)++; ;}
    break;

  case 424:
#line 1073 "harbour.y"
    { (yyval.iNumber) = 1; ;}
    break;

  case 425:
#line 1074 "harbour.y"
    { (yyval.iNumber)++; ;}
    break;

  case 427:
#line 1084 "harbour.y"
    { hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), FALSE ); ;}
    break;

  case 428:
#line 1086 "harbour.y"
    { hb_compExprDelete( hb_compExprGenPush( (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                 hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (4)].asExpr), HB_COMP_PARAM ), TRUE );
               ;}
    break;

  case 429:
#line 1090 "harbour.y"
    {
                  USHORT uCount = (USHORT) hb_compExprListLen( (yyvsp[(2) - (2)].asExpr) );
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
                  hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), TRUE );
               ;}
    break;

  case 430:
#line 1097 "harbour.y"
    {
                  USHORT uCount = (USHORT) hb_compExprListLen( (yyvsp[(2) - (3)].asExpr) );
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
                  hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), TRUE );
               ;}
    break;

  case 431:
#line 1105 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 432:
#line 1106 "harbour.y"
    {
                  if( HB_COMP_PARAM->iVarScope == VS_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     hb_compStaticDefEnd( HB_COMP_PARAM );
                     hb_compGenStaticName( (yyvsp[(1) - (3)].string), HB_COMP_PARAM );
                  }
                  else if( HB_COMP_PARAM->iVarScope == VS_PUBLIC || HB_COMP_PARAM->iVarScope == VS_PRIVATE )
                  {
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[(1) - (3)].string), NULL, HB_COMP_PARAM ), FALSE );
                  }
               ;}
    break;

  case 433:
#line 1119 "harbour.y"
    { (yyval.iNumber) = HB_COMP_PARAM->iVarScope;
                                hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType );
                              ;}
    break;

  case 434:
#line 1122 "harbour.y"
    {HB_COMP_PARAM->cVarType = ' ';;}
    break;

  case 435:
#line 1123 "harbour.y"
    {
                  HB_COMP_PARAM->cCastType = HB_COMP_PARAM->cVarType;
                  HB_COMP_PARAM->cVarType = ' ';

                  HB_COMP_PARAM->iVarScope = (yyvsp[(3) - (6)].iNumber);
                  if( HB_COMP_PARAM->iVarScope == VS_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     hb_compExprDelete( hb_compExprGenStatement( hb_compExprAssignStatic( hb_compExprNewVar( (yyvsp[(1) - (6)].string), HB_COMP_PARAM ), (yyvsp[(6) - (6)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ), HB_COMP_PARAM );
                     hb_compStaticDefEnd( HB_COMP_PARAM );
                     hb_compGenStaticName( (yyvsp[(1) - (6)].string), HB_COMP_PARAM );
                  }
                  else if( HB_COMP_PARAM->iVarScope == VS_PUBLIC || HB_COMP_PARAM->iVarScope == VS_PRIVATE )
                  {
                     hb_compExprDelete( hb_compExprGenPush( (yyvsp[(6) - (6)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[(1) - (6)].string), NULL, HB_COMP_PARAM ), TRUE );
                  }
                  else
                  {
                     hb_compExprDelete( hb_compExprGenStatement( hb_compExprAssign( hb_compExprNewVar( (yyvsp[(1) - (6)].string), HB_COMP_PARAM ), (yyvsp[(6) - (6)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ), HB_COMP_PARAM );
                  }
                  HB_COMP_PARAM->iVarScope = (yyvsp[(3) - (6)].iNumber);
               ;}
    break;

  case 436:
#line 1147 "harbour.y"
    { hb_compVariableDim( (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 437:
#line 1148 "harbour.y"
    { hb_compVariableDim( (yyvsp[(1) - (3)].string), (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 439:
#line 1157 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 440:
#line 1158 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 441:
#line 1159 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr) ); ;}
    break;

  case 442:
#line 1163 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_FIELD; ;}
    break;

  case 443:
#line 1163 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 444:
#line 1166 "harbour.y"
    { (yyval.iNumber)=hb_compFieldsCount( HB_COMP_PARAM ); hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 445:
#line 1167 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 446:
#line 1168 "harbour.y"
    { hb_compFieldSetAlias( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), (yyvsp[(1) - (3)].iNumber) ); ;}
    break;

  case 447:
#line 1171 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_MEMVAR; ;}
    break;

  case 448:
#line 1171 "harbour.y"
    { HB_COMP_PARAM->cVarType = ' '; ;}
    break;

  case 449:
#line 1174 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 450:
#line 1175 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 451:
#line 1178 "harbour.y"
    { hb_compDeclaredAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string) ); HB_COMP_PARAM->szDeclaredFun = (yyvsp[(2) - (3)].string); ;}
    break;

  case 452:
#line 1179 "harbour.y"
    {
               if( HB_COMP_PARAM->pLastDeclared )
               {
                 HB_COMP_PARAM->pLastDeclared->cType = HB_COMP_PARAM->cVarType;

                 if ( toupper( HB_COMP_PARAM->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastDeclared->pClass = hb_compClassFind( HB_COMP_PARAM, HB_COMP_PARAM->szFromClass );
                   if( ! HB_COMP_PARAM->pLastDeclared->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, HB_COMP_PARAM->szFromClass, HB_COMP_PARAM->pLastDeclared->szName );
                     HB_COMP_PARAM->pLastDeclared->cType = ( isupper(  ( int ) HB_COMP_PARAM->cVarType ) ? 'O' : 'o' );
                   }

                   /* Resetting */
                   HB_COMP_PARAM->szFromClass = NULL;
                 }
               }
               HB_COMP_PARAM->szDeclaredFun = NULL;
               HB_COMP_PARAM->cVarType = ' ';
               HB_COMP_PARAM->iVarScope = VS_NONE;
             ;}
    break;

  case 453:
#line 1201 "harbour.y"
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].string) ); ;}
    break;

  case 454:
#line 1201 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_NONE; ;}
    break;

  case 455:
#line 1202 "harbour.y"
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string) ); HB_COMP_PARAM->iVarScope = VS_NONE; ;}
    break;

  case 456:
#line 1203 "harbour.y"
    { HB_COMP_PARAM->iVarScope = VS_NONE; ;}
    break;

  case 457:
#line 1204 "harbour.y"
    { HB_COMP_PARAM->cDataListType = HB_COMP_PARAM->cVarType; ;}
    break;

  case 458:
#line 1204 "harbour.y"
    { HB_COMP_PARAM->cDataListType = 0; HB_COMP_PARAM->iVarScope = VS_NONE; ;}
    break;

  case 465:
#line 1217 "harbour.y"
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[(1) - (2)].string) ); ;}
    break;

  case 466:
#line 1218 "harbour.y"
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                 HB_COMP_PARAM->pLastMethod->cType = HB_COMP_PARAM->cVarType;
                 if ( toupper( HB_COMP_PARAM->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastMethod->pClass = hb_compClassFind( HB_COMP_PARAM, HB_COMP_PARAM->szFromClass );
                   if( ! HB_COMP_PARAM->pLastMethod->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, HB_COMP_PARAM->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                     HB_COMP_PARAM->pLastMethod->cType = ( isupper(  ( int ) HB_COMP_PARAM->cVarType ) ? 'O' : 'o' );
                   }

                   HB_COMP_PARAM->szFromClass = NULL;
                 }
               }
               HB_COMP_PARAM->pLastMethod = NULL;
               HB_COMP_PARAM->cVarType = ' ';
             ;}
    break;

  case 467:
#line 1239 "harbour.y"
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 468:
#line 1240 "harbour.y"
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                  PCOMCLASS pClass;
                  char szSetData[ HB_SYMBOL_NAME_LEN + 1 ];
                  int iLen;

                  /* List Type overrides if exists. */
                  if( HB_COMP_PARAM->cDataListType ) HB_COMP_PARAM->cVarType = HB_COMP_PARAM->cDataListType;

                  HB_COMP_PARAM->pLastMethod->cType = HB_COMP_PARAM->cVarType;
                  if ( toupper( HB_COMP_PARAM->cVarType ) == 'S' )
                  {
                     pClass = hb_compClassFind( HB_COMP_PARAM, HB_COMP_PARAM->szFromClass );
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                     if( ! HB_COMP_PARAM->pLastMethod->pClass )
                     {
                        hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, HB_COMP_PARAM->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                        HB_COMP_PARAM->pLastMethod->cType = ( isupper(  ( int ) HB_COMP_PARAM->cVarType ) ? 'O' :'o' );
                     }
                  }
                  else
                     pClass = NULL;

                  iLen = strlen( (yyvsp[(1) - (3)].string) );
                  if( iLen >= HB_SYMBOL_NAME_LEN )
                     iLen = HB_SYMBOL_NAME_LEN - 1;
                  szSetData[ 0 ] = '_';
                  memcpy( szSetData + 1, (yyvsp[(1) - (3)].string), iLen );
                  szSetData[ iLen + 1 ] = '\0';

                  HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass,
                     hb_compIdentifierNew( HB_COMP_PARAM, szSetData, HB_IDENT_COPY ) );
                  HB_COMP_PARAM->pLastMethod->cType = HB_COMP_PARAM->cVarType;
                  HB_COMP_PARAM->pLastMethod->iParamCount = 1;

                  /* TOFIX: these allocations causes memory leaks */
                  HB_COMP_PARAM->pLastMethod->cParamTypes = ( BYTE * ) hb_xgrab( 1 );
                  HB_COMP_PARAM->pLastMethod->pParamClasses = ( PCOMCLASS * ) hb_xgrab( sizeof( COMCLASS ) );

                  HB_COMP_PARAM->pLastMethod->cParamTypes[0] = HB_COMP_PARAM->cVarType;
                  HB_COMP_PARAM->pLastMethod->pParamClasses[0] = pClass;

                  if ( toupper( HB_COMP_PARAM->cVarType ) == 'S' )
                  {
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                     HB_COMP_PARAM->szFromClass = NULL;
                  }
               }

               HB_COMP_PARAM->pLastMethod = NULL;
               HB_COMP_PARAM->cVarType = ' ';
             ;}
    break;

  case 475:
#line 1305 "harbour.y"
    { hb_compExprDelete( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 476:
#line 1308 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 477:
#line 1309 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_BYREF ); ;}
    break;

  case 478:
#line 1310 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (5)].string), 'F' ); ;}
    break;

  case 479:
#line 1311 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType ); ;}
    break;

  case 480:
#line 1312 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (5)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_BYREF ); ;}
    break;

  case 481:
#line 1313 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (7)].string), 'F' ); ;}
    break;

  case 482:
#line 1316 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL ); ;}
    break;

  case 483:
#line 1317 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 484:
#line 1318 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (6)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 485:
#line 1319 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (5)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL ); ;}
    break;

  case 486:
#line 1320 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(5) - (6)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 487:
#line 1321 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(5) - (8)].string), HB_COMP_PARAM->cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 495:
#line 1333 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (2)].iNumber), HB_COMP_PARAM ); ;}
    break;

  case 496:
#line 1334 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (3)].iNumber), HB_COMP_PARAM ); ;}
    break;

  case 497:
#line 1335 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (3)].iNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (3)].pVoid) ); ;}
    break;

  case 498:
#line 1336 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (4)].iNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (4)].pVoid) ); ;}
    break;

  case 499:
#line 1339 "harbour.y"
    { (yyval.lNumber) = (yyvsp[(1) - (1)].lNumber); ;}
    break;

  case 500:
#line 1340 "harbour.y"
    { (yyval.lNumber) += (yyvsp[(2) - (2)].lNumber); ;}
    break;

  case 501:
#line 1343 "harbour.y"
    { (yyval.lNumber) = 0; ;}
    break;

  case 502:
#line 1344 "harbour.y"
    { (yyval.lNumber) = (yyvsp[(1) - (1)].lNumber); ;}
    break;

  case 503:
#line 1348 "harbour.y"
    { ++HB_COMP_PARAM->wIfCounter; hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 504:
#line 1350 "harbour.y"
    { hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ); (yyval.iNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM ); ;}
    break;

  case 505:
#line 1352 "harbour.y"
    { (yyval.iNumber) = hb_compGenJump( 0, HB_COMP_PARAM ); hb_compGenJumpHere( (yyvsp[(5) - (6)].iNumber), HB_COMP_PARAM ); ;}
    break;

  case 511:
#line 1362 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 513:
#line 1366 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 514:
#line 1368 "harbour.y"
    { hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
                ;}
    break;

  case 515:
#line 1372 "harbour.y"
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(5) - (6)].iNumber), HB_COMP_PARAM );
                ;}
    break;

  case 516:
#line 1376 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 517:
#line 1378 "harbour.y"
    { hb_compExprDelete( hb_compExprGenPush( (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
                ;}
    break;

  case 518:
#line 1382 "harbour.y"
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[(1) - (7)].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(6) - (7)].iNumber), HB_COMP_PARAM );
                ;}
    break;

  case 519:
#line 1387 "harbour.y"
    { if( HB_COMP_PARAM->wIfCounter )
                           --HB_COMP_PARAM->wIfCounter; 
                        HB_COMP_PARAM->functions.pLast->bFlags &= ~ ( /*FUN_WITH_RETURN |*/ FUN_BREAK_CODE ); ;}
    break;

  case 520:
#line 1390 "harbour.y"
    { if( HB_COMP_PARAM->wIfCounter )
                           --HB_COMP_PARAM->wIfCounter; 
                        HB_COMP_PARAM->functions.pLast->bFlags &= ~ ( /*FUN_WITH_RETURN |*/ FUN_BREAK_CODE ); ;}
    break;

  case 521:
#line 1397 "harbour.y"
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (3)].pVoid) ); ;}
    break;

  case 524:
#line 1409 "harbour.y"
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (4)].pVoid) ); ;}
    break;

  case 525:
#line 1413 "harbour.y"
    { if( HB_COMP_PARAM->wCaseCounter )
                    --HB_COMP_PARAM->wCaseCounter;
                 HB_COMP_PARAM->functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );
               ;}
    break;

  case 526:
#line 1418 "harbour.y"
    { if( HB_COMP_PARAM->wCaseCounter )
                  --HB_COMP_PARAM->wCaseCounter;
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );
               ;}
    break;

  case 527:
#line 1424 "harbour.y"
    { ++HB_COMP_PARAM->wCaseCounter; hb_compLinePushIfDebugger( HB_COMP_PARAM );;}
    break;

  case 530:
#line 1428 "harbour.y"
    {
                        if( (yyvsp[(2) - (2)].lNumber) > 0 )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                        }
                     ;}
    break;

  case 531:
#line 1436 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 532:
#line 1437 "harbour.y"
    {
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               ;}
    break;

  case 533:
#line 1442 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(5) - (6)].iNumber), HB_COMP_PARAM );
               ;}
    break;

  case 534:
#line 1448 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); ;}
    break;

  case 535:
#line 1449 "harbour.y"
    {
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               ;}
    break;

  case 536:
#line 1454 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[(1) - (7)].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(6) - (7)].iNumber), HB_COMP_PARAM );
               ;}
    break;

  case 537:
#line 1461 "harbour.y"
    {hb_compLinePushIfDebugger( HB_COMP_PARAM ); ;}
    break;

  case 538:
#line 1461 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 540:
#line 1463 "harbour.y"
    { hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL ); ;}
    break;

  case 542:
#line 1468 "harbour.y"
    {
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  (yyval.lNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               ;}
    break;

  case 543:
#line 1473 "harbour.y"
    {
                  hb_compLoopHere( HB_COMP_PARAM );
                  hb_compGenJump( (yyvsp[(1) - (5)].lNumber) - HB_COMP_PARAM->functions.pLast->lPCodePos, HB_COMP_PARAM );
               ;}
    break;

  case 544:
#line 1478 "harbour.y"
    {
                  hb_compGenJumpHere( (yyvsp[(4) - (7)].lNumber), HB_COMP_PARAM ); 
                  if( HB_COMP_PARAM->wWhileCounter )
                     --HB_COMP_PARAM->wWhileCounter;
                  hb_compLoopEnd( HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                ;}
    break;

  case 545:
#line 1487 "harbour.y"
    { (yyval.lNumber) = HB_COMP_PARAM->functions.pLast->lPCodePos; hb_compLinePushIfInside( HB_COMP_PARAM ); ++HB_COMP_PARAM->wWhileCounter; hb_compLoopStart( HB_COMP_PARAM ); ;}
    break;

  case 546:
#line 1490 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 547:
#line 1491 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 548:
#line 1495 "harbour.y"
    {
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  (yyvsp[(1) - (4)].lNumber) = HB_COMP_PARAM->currLine;
                  hb_compDebugStart();
                  ++HB_COMP_PARAM->wForCounter;              /* 5 */
                  (yyval.asExpr) = hb_compExprGenStatement( hb_compExprAssign( (yyvsp[(2) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  if( hb_compExprAsSymbol((yyvsp[(2) - (4)].asExpr)) )
                  {
                     hb_compForStart( HB_COMP_PARAM, hb_compExprAsSymbol((yyvsp[(2) - (4)].asExpr)), FALSE );
                  }
               ;}
    break;

  case 549:
#line 1507 "harbour.y"
    {
                  hb_compLoopStart( HB_COMP_PARAM );
                  (yyval.lNumber) = hb_compGenJump( 0, HB_COMP_PARAM );  /* 9 */
               ;}
    break;

  case 550:
#line 1512 "harbour.y"
    {
                  (yyval.lNumber) = HB_COMP_PARAM->functions.pLast->lPCodePos;  /* 11 */
               ;}
    break;

  case 551:
#line 1516 "harbour.y"
    {
                  short iStep, iLocal;

                  HB_COMP_PARAM->currLine = (yyvsp[(1) - (12)].lNumber);
                  hb_compLinePush( HB_COMP_PARAM );
                  hb_compLoopHere( HB_COMP_PARAM );

                  if( (yyvsp[(8) - (12)].asExpr) )
                  {
                     if( hb_compExprIsInteger((yyvsp[(8) - (12)].asExpr)) )
                        iStep = hb_compExprAsInteger((yyvsp[(8) - (12)].asExpr));
                     else
                        iStep = 0;
                  }
                  else
                  {
                     iStep = 1;
                  }

                  if( iStep && ( iLocal = hb_compLocalGetPos( HB_COMP_PARAM, hb_compExprAsSymbol((yyvsp[(2) - (12)].asExpr)) ) ) > 0 )
                  {
                     BYTE buffer[ 5 ];
                     buffer[ 0 ] = HB_P_LOCALADDINT;
                     buffer[ 1 ] = HB_LOBYTE( iLocal );
                     buffer[ 2 ] = HB_HIBYTE( iLocal );
                     buffer[ 3 ] = HB_LOBYTE( iStep );
                     buffer[ 4 ] = HB_HIBYTE( iStep );
                     hb_compGenPCodeN( buffer, 5, HB_COMP_PARAM );
                  }
                  else if( (yyvsp[(8) - (12)].asExpr) )
                  {
                     hb_compExprClear( hb_compExprGenStatement( hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(2) - (12)].asExpr), HB_COMP_PARAM ), (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ), HB_COMP_PARAM );
                  }
                  else
                  {
                     hb_compExprClear( hb_compExprGenStatement( hb_compExprNewPreInc( (yyvsp[(2) - (12)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ), HB_COMP_PARAM );
                  }

                  hb_compGenJumpHere( (yyvsp[(9) - (12)].lNumber), HB_COMP_PARAM );

                  hb_compExprGenPush( (yyvsp[(2) - (12)].asExpr), HB_COMP_PARAM );              /* counter */
                  hb_compExprGenPush( (yyvsp[(7) - (12)].asExpr), HB_COMP_PARAM );              /* end */
                  if( (yyvsp[(8) - (12)].asExpr) )
                  {
                     hb_compExprGenPush( (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM );   /* step */
                     hb_compGenPCode1( HB_P_FORTEST, HB_COMP_PARAM );
                  }
                  else
                     hb_compGenPCode1( HB_P_GREATER, HB_COMP_PARAM );

                  hb_compGenJumpFalse( (yyvsp[(11) - (12)].lNumber) - HB_COMP_PARAM->functions.pLast->lPCodePos, HB_COMP_PARAM );
                  hb_compLoopEnd( HB_COMP_PARAM );
                  if( hb_compExprAsSymbol((yyvsp[(2) - (12)].asExpr)) )
                  {
                     hb_compForEnd( HB_COMP_PARAM, hb_compExprAsSymbol((yyvsp[(2) - (12)].asExpr)) );
                  }
                  hb_compExprDelete( (yyvsp[(7) - (12)].asExpr), HB_COMP_PARAM );
                  hb_compExprDelete( (yyvsp[(5) - (12)].asExpr), HB_COMP_PARAM ); /* deletes $5, $2, $4 */
                  if( (yyvsp[(8) - (12)].asExpr) )
                     hb_compExprDelete( (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
               ;}
    break;

  case 554:
#line 1584 "harbour.y"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 555:
#line 1585 "harbour.y"
    { (yyval.asExpr) = hb_compExprReduce( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 556:
#line 1588 "harbour.y"
    { hb_compLinePush( HB_COMP_PARAM );
                                                      if( HB_COMP_PARAM->wForCounter )
                                                         --HB_COMP_PARAM->wForCounter; ;}
    break;

  case 557:
#line 1591 "harbour.y"
    { hb_compLinePush( HB_COMP_PARAM );
                                                      if( HB_COMP_PARAM->wForCounter )
                                                         --HB_COMP_PARAM->wForCounter; ;}
    break;

  case 558:
#line 1594 "harbour.y"
    { hb_compLinePush( HB_COMP_PARAM );
                                                      if( HB_COMP_PARAM->wForCounter )
                                                         --HB_COMP_PARAM->wForCounter; ;}
    break;

  case 559:
#line 1597 "harbour.y"
    { hb_compLinePush( HB_COMP_PARAM );
                                                      if( HB_COMP_PARAM->wForCounter )
                                                         --HB_COMP_PARAM->wForCounter; ;}
    break;

  case 560:
#line 1602 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 561:
#line 1603 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewRef( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 562:
#line 1606 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 563:
#line 1607 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 564:
#line 1610 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(2) - (2)].string), HB_COMP_PARAM ); ;}
    break;

  case 566:
#line 1614 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 567:
#line 1615 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 568:
#line 1620 "harbour.y"
    {
                ++HB_COMP_PARAM->wForCounter;              /* 5 */
                hb_compLinePushIfInside( HB_COMP_PARAM );
                hb_compDebugStart();
             ;}
    break;

  case 569:
#line 1626 "harbour.y"
    {
                /* 7
                */
                hb_compEnumStart( HB_COMP_PARAM, (yyvsp[(2) - (6)].asExpr), (yyvsp[(4) - (6)].asExpr), (yyvsp[(6) - (6)].iNumber) );
                
                hb_compLoopStart( HB_COMP_PARAM );
                (yyval.lNumber) = HB_COMP_PARAM->functions.pLast->lPCodePos;
             ;}
    break;

  case 570:
#line 1635 "harbour.y"
    {
                /* 9
                */
                (yyval.lNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
             ;}
    break;

  case 571:
#line 1641 "harbour.y"
    {
                hb_compLoopHere( HB_COMP_PARAM );
                hb_compEnumNext( HB_COMP_PARAM, (yyvsp[(2) - (10)].asExpr), (yyvsp[(6) - (10)].iNumber) );
                hb_compGenJump( (yyvsp[(7) - (10)].lNumber) - HB_COMP_PARAM->functions.pLast->lPCodePos, HB_COMP_PARAM );

                hb_compGenJumpHere( (yyvsp[(9) - (10)].lNumber), HB_COMP_PARAM );
                hb_compLoopEnd( HB_COMP_PARAM );
                HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                hb_compEnumEnd( HB_COMP_PARAM, (yyvsp[(2) - (10)].asExpr) );
                hb_compExprDelete( (yyvsp[(2) - (10)].asExpr), HB_COMP_PARAM );
                hb_compExprDelete( (yyvsp[(4) - (10)].asExpr), HB_COMP_PARAM );
             ;}
    break;

  case 572:
#line 1655 "harbour.y"
    { (yyval.iNumber) =  1; ;}
    break;

  case 573:
#line 1656 "harbour.y"
    { (yyval.iNumber) = -1; ;}
    break;

  case 574:
#line 1660 "harbour.y"
    {
                hb_compLoopStart( HB_COMP_PARAM );
                hb_compSwitchStart( HB_COMP_PARAM );
                hb_compGenJump( 0, HB_COMP_PARAM );
             ;}
    break;

  case 575:
#line 1667 "harbour.y"
    {
                hb_compSwitchEnd( HB_COMP_PARAM );
                hb_compLoopEnd( HB_COMP_PARAM );
             ;}
    break;

  case 576:
#line 1674 "harbour.y"
    {
                hb_compGenPCode1( HB_P_POP, HB_COMP_PARAM );
             ;}
    break;

  case 577:
#line 1680 "harbour.y"
    { if( HB_COMP_PARAM->wSwitchCounter )
                  --HB_COMP_PARAM->wSwitchCounter; 
                HB_COMP_PARAM->functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );
             ;}
    break;

  case 578:
#line 1687 "harbour.y"
    { ++HB_COMP_PARAM->wSwitchCounter; 
                 hb_compLinePushIfInside( HB_COMP_PARAM );
              ;}
    break;

  case 579:
#line 1691 "harbour.y"
    {
                 hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
              ;}
    break;

  case 581:
#line 1697 "harbour.y"
    {
                        if( (yyvsp[(2) - (2)].lNumber) > 0 )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                        }
                     ;}
    break;

  case 582:
#line 1705 "harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 584:
#line 1708 "harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 588:
#line 1716 "harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, NULL ); hb_compLinePush( HB_COMP_PARAM ); ;}
    break;

  case 589:
#line 1716 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 591:
#line 1721 "harbour.y"
    {              /* 2 */
                  ++HB_COMP_PARAM->wSeqCounter;
                  hb_compStatmentStart( HB_COMP_PARAM );
                  (yyval.lNumber) = hb_compSequenceBegin( HB_COMP_PARAM );
               ;}
    break;

  case 592:
#line 1728 "harbour.y"
    {              /* 5 */
                  /* Set jump address for HB_P_SEQBEGIN opcode - this address
                   * will be used in BREAK code if there is no RECOVER clause
                   */
                  hb_compGenJumpHere( (yyvsp[(2) - (4)].lNumber), HB_COMP_PARAM );
                  (yyval.lNumber) = hb_compSequenceEnd( HB_COMP_PARAM );
               ;}
    break;

  case 593:
#line 1736 "harbour.y"
    {              /* 7 */
                  /* Replace END address with RECOVER address in
                   * HB_P_SEQBEGIN opcode if there is RECOVER clause
                   */
                  if( (yyvsp[(6) - (6)].lNumber) )
                     hb_compGenJumpThere( (yyvsp[(2) - (6)].lNumber), (yyvsp[(6) - (6)].lNumber), HB_COMP_PARAM );
                  else if( HB_COMP_PARAM->wSeqCounter )
                     --HB_COMP_PARAM->wSeqCounter;
               ;}
    break;

  case 594:
#line 1746 "harbour.y"
    {              /* 9 */
                  if( (yyvsp[(8) - (8)].lNumber) )
                  {
                     /* replace END address with ALWAYS address in
                        HB_P_SEQEND opcode */
                     hb_compGenJumpThere( (yyvsp[(5) - (8)].lNumber), (yyvsp[(8) - (8)].lNumber), HB_COMP_PARAM );
                     /* Fix ALWAYS address in HB_P_SEQALWAYS opcode */
                     hb_compGenJumpThere( (yyvsp[(2) - (8)].lNumber) - 4, (yyvsp[(8) - (8)].lNumber), HB_COMP_PARAM );
                     /* Fix ALWAYSEND address in HB_P_ALWAYSBEGIN opcode */
                     hb_compGenJumpHere( (yyvsp[(8) - (8)].lNumber) + 1, HB_COMP_PARAM );
                     hb_compGenPCode1( HB_P_ALWAYSEND, HB_COMP_PARAM );
                  }
                  else
                  {
                     /* Fix END address in HB_P_SEQEND opcode */
                     hb_compGenJumpHere( (yyvsp[(5) - (8)].lNumber), HB_COMP_PARAM );
                  }
                  hb_compSequenceFinish( HB_COMP_PARAM, (yyvsp[(2) - (8)].lNumber), (yyvsp[(5) - (8)].lNumber), (yyvsp[(8) - (8)].lNumber),
                                         (yyvsp[(4) - (8)].lNumber) != 0, (yyvsp[(6) - (8)].lNumber) != 0 );
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~FUN_WITH_RETURN;
               ;}
    break;

  case 596:
#line 1770 "harbour.y"
    { (yyval.lNumber) = 0; ;}
    break;

  case 598:
#line 1775 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~FUN_BREAK_CODE;
                  (yyval.lNumber) = HB_COMP_PARAM->functions.pLast->lPCodePos;
                  hb_compSequenceAlways( HB_COMP_PARAM );
               ;}
    break;

  case 599:
#line 1782 "harbour.y"
    { (yyval.lNumber) = 0; ;}
    break;

  case 602:
#line 1788 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.lNumber) = HB_COMP_PARAM->functions.pLast->lPCodePos;
                  if( HB_COMP_PARAM->wSeqCounter )
                     --HB_COMP_PARAM->wSeqCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode2( HB_P_SEQRECOVER, HB_P_POP, HB_COMP_PARAM );
               ;}
    break;

  case 603:
#line 1799 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.lNumber) = HB_COMP_PARAM->functions.pLast->lPCodePos;
                  if( HB_COMP_PARAM->wSeqCounter )
                     --HB_COMP_PARAM->wSeqCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode1( HB_P_SEQRECOVER, HB_COMP_PARAM );
                  hb_compGenPopVar( (yyvsp[(2) - (2)].string), HB_COMP_PARAM );
               ;}
    break;

  case 606:
#line 1821 "harbour.y"
    {  (yyval.bTrue) = HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL; ;}
    break;

  case 607:
#line 1823 "harbour.y"
    {
                  (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(2) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM );
                  HB_COMP_PARAM->iPassByRef = (yyvsp[(3) - (4)].bTrue);
               ;}
    break;

  case 608:
#line 1828 "harbour.y"
    {  (yyval.bTrue) = HB_COMP_PARAM->iPassByRef;HB_COMP_PARAM->iPassByRef=HB_PASSBYREF_FUNCALL; ;}
    break;

  case 609:
#line 1830 "harbour.y"
    {
                  hb_compAutoOpenAdd( HB_COMP_PARAM, (yyvsp[(1) - (3)].string) );
                  /* DOIDENT is the only one identifier which can be returned in lower letters */
                  (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( hb_compIdentifierNew( HB_COMP_PARAM, hb_strupr( hb_strdup( (yyvsp[(1) - (3)].string) ) ), HB_IDENT_FREE ), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM );
                  HB_COMP_PARAM->iPassByRef = (yyvsp[(2) - (3)].bTrue);
               ;}
    break;

  case 610:
#line 1838 "harbour.y"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 611:
#line 1839 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 612:
#line 1842 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), hb_compExprNewNil( HB_COMP_PARAM ) ); ;}
    break;

  case 613:
#line 1843 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 614:
#line 1844 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 615:
#line 1845 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (2)].asExpr), hb_compExprNewNil( HB_COMP_PARAM ) ); ;}
    break;

  case 616:
#line 1846 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 617:
#line 1849 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 622:
#line 1857 "harbour.y"
    {
                  hb_compLinePushIfInside( HB_COMP_PARAM ); 
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  hb_compGenPCode1( HB_P_WITHOBJECTSTART, HB_COMP_PARAM );
                  HB_COMP_PARAM->wWithObjectCnt++;
               ;}
    break;

  case 623:
#line 1865 "harbour.y"
    {  if( HB_COMP_PARAM->wWithObjectCnt )
                    --HB_COMP_PARAM->wWithObjectCnt;
                  hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
               ;}
    break;

  case 624:
#line 1869 "harbour.y"
    { hb_compExprDelete( (yyvsp[(2) - (4)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 625:
#line 1872 "harbour.y"
    { HB_COMP_PARAM->fError = FALSE; ;}
    break;


/* Line 1267 of yacc.c.  */
#line 6910 "harboury.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (pComp, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (pComp, yymsg);
	  }
	else
	  {
	    yyerror (pComp, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, pComp);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, pComp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (pComp, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, pComp);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, pComp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 1876 "harbour.y"


/*
 ** ------------------------------------------------------------------------ **
 */

/*
 * Avoid tracing in preprocessor/compiler.
 */
#if ! defined(HB_TRACE_UTILS)
   #if defined(HB_TRACE_LEVEL)
      #undef HB_TRACE_LEVEL
   #endif
#endif


/* ************************************************************************* */

/*
 * This function stores the position in pcode buffer where the FOR/WHILE
 * loop starts. It will be used to fix any LOOP/EXIT statements
 */
static void hb_compLoopStart( HB_COMP_DECL )
{
   HB_LOOPEXIT_PTR pLoop = ( HB_LOOPEXIT_PTR ) hb_xgrab( sizeof( HB_LOOPEXIT ) );

   if( HB_COMP_PARAM->pLoops )
   {
      HB_LOOPEXIT_PTR pLast = HB_COMP_PARAM->pLoops;

      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pLoop;
   }
   else
      HB_COMP_PARAM->pLoops = pLoop;

   pLoop->pNext       = NULL;
   pLoop->pExitList   = NULL;
   pLoop->pLoopList   = NULL;
   pLoop->ulOffset    = HB_COMP_PARAM->functions.pLast->lPCodePos;  /* store the start position */
   pLoop->wSeqCounter = HB_COMP_PARAM->wSeqCounter;  /* store current SEQUENCE counter */
}

/*
 * Stores the position of LOOP statement to fix it later at the end of loop
 */
static void hb_compLoopLoop( HB_COMP_DECL )
{
   if( ! HB_COMP_PARAM->pLoops )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "LOOP", NULL );
   }
   else
   {
      HB_LOOPEXIT_PTR pLast, pLoop;

      pLoop = ( HB_LOOPEXIT_PTR ) hb_xgrab( sizeof( HB_LOOPEXIT ) );

      pLoop->pLoopList = NULL;
      pLoop->ulOffset = HB_COMP_PARAM->functions.pLast->lPCodePos;  /* store the position to fix */

      pLast = HB_COMP_PARAM->pLoops;
      while( pLast->pNext )
         pLast = pLast->pNext;

      if( pLast->wSeqCounter != HB_COMP_PARAM->wSeqCounter )
      {
         /* Attempt to LOOP from BEGIN/END sequence
         * Current SEQUENCE counter is different then at the beginning of loop
         * Notice that LOOP is allowed in RECOVER code.
         */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else
      {
         while( pLast->pLoopList )
            pLast = pLast->pLoopList;

         pLast->pLoopList = pLoop;

         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Stores the position of EXIT statement to fix it later at the end of loop
 */
static void hb_compLoopExit( HB_COMP_DECL )
{
   if( ! HB_COMP_PARAM->pLoops )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "EXIT", NULL );
   }
   else
   {
      HB_LOOPEXIT_PTR pLast, pLoop;

      pLoop = ( HB_LOOPEXIT_PTR ) hb_xgrab( sizeof( HB_LOOPEXIT ) );

      pLoop->pExitList = NULL;
      pLoop->ulOffset = HB_COMP_PARAM->functions.pLast->lPCodePos;  /* store the position to fix */

      pLast = HB_COMP_PARAM->pLoops;
      while( pLast->pNext )
         pLast = pLast->pNext;

      if( pLast->wSeqCounter != HB_COMP_PARAM->wSeqCounter )
      {
         /* Attempt to LOOP from BEGIN/END sequence
         * Current SEQUENCE counter is different then at the beginning of loop
         * Notice that LOOP is allowed in RECOVER code.
         */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else
      {
         while( pLast->pExitList )
            pLast = pLast->pExitList;

         pLast->pExitList = pLoop;

         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Fixes the LOOP statement
 */
static void hb_compLoopHere( HB_COMP_DECL )
{
   HB_LOOPEXIT_PTR pLoop = HB_COMP_PARAM->pLoops, pFree, pLast;

   if( pLoop )
   {
      while( pLoop->pNext )
         pLoop = pLoop->pNext;

      pLast = pLoop;
      pLoop = pLoop->pLoopList;
      while( pLoop )
      {
         hb_compGenJumpHere( pLoop->ulOffset + 1, HB_COMP_PARAM );
         pFree = pLoop;
         pLoop = pLoop->pLoopList;
         hb_xfree( ( void * ) pFree );
      }
      pLast->pLoopList = NULL;
   }
}

/*
 * Fixes the EXIT statements and releases memory allocated for current loop
 */
static void hb_compLoopEnd( HB_COMP_DECL )
{
   HB_LOOPEXIT_PTR pExit, pLoop = HB_COMP_PARAM->pLoops, pLast = HB_COMP_PARAM->pLoops, pFree;

   if( pLoop )
   {
      while( pLoop->pNext )
      {
         pLast = pLoop;
         pLoop = pLoop->pNext;
      }

      pExit = pLoop->pExitList;
      while( pExit )
      {
         hb_compGenJumpHere( pExit->ulOffset + 1, HB_COMP_PARAM );
         pFree = pExit;
         pExit = pExit->pExitList;
         hb_xfree( ( void * ) pFree );
      }

      pLast->pNext = NULL;
      if( pLoop == HB_COMP_PARAM->pLoops )
         HB_COMP_PARAM->pLoops = NULL;
      hb_xfree( ( void * ) pLoop );
   }
}

void hb_compLoopKill( HB_COMP_DECL )
{
   HB_LOOPEXIT_PTR pLoop;
   HB_LOOPEXIT_PTR pExit;
   
   while( HB_COMP_PARAM->pLoops )   
   {
      pLoop = HB_COMP_PARAM->pLoops;
      while( pLoop->pExitList )
      {
         pExit = pLoop->pExitList;
         pLoop->pExitList = pExit->pExitList;
         hb_xfree( ( void * ) pExit );
      }
      HB_COMP_PARAM->pLoops = pLoop->pNext;
      hb_xfree( ( void * ) pLoop );
   }
}

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirst, ULONG ulOffset )
{
   HB_ELSEIF_PTR pElseIf = ( HB_ELSEIF_PTR ) hb_xgrab( sizeof( HB_ELSEIF ) ), pLast;

   pElseIf->ulOffset = ulOffset;
   pElseIf->pPrev   = NULL;
   pElseIf->pElseif = NULL;

   if( pFirst )
   {
      pLast = ( HB_ELSEIF_PTR ) pFirst;
      while( pLast->pElseif )
         pLast = pLast->pElseif;
      pLast->pElseif = pElseIf;
   }
   else
   {
      if( HB_COMP_PARAM->elseif )
      {
         pElseIf->pPrev = HB_COMP_PARAM->elseif;
      }
      pFirst = pElseIf;
      HB_COMP_PARAM->elseif = pElseIf;
   }
   return pFirst;
}


static void hb_compElseIfFix( HB_COMP_DECL, void * pFixElseIfs )
{
   HB_ELSEIF_PTR pFix = ( HB_ELSEIF_PTR ) pFixElseIfs;
   HB_ELSEIF_PTR pDel;
   
   HB_COMP_PARAM->elseif = pFix->pPrev;
   while( pFix )
   {
      hb_compGenJumpHere( pFix->ulOffset, HB_COMP_PARAM );
      pDel = pFix;
      pFix = pFix->pElseif;
      hb_xfree( pDel );
   }
}

void hb_compElseIfKill( HB_COMP_DECL )
{
   HB_ELSEIF_PTR pFix;
   HB_ELSEIF_PTR pDel;
   
   while( HB_COMP_PARAM->elseif )
   {
      pFix = HB_COMP_PARAM->elseif;
      HB_COMP_PARAM->elseif = pFix->pPrev;
      while( pFix )
      {
         pDel = pFix;
         pFix = pFix->pElseif;
         hb_xfree( pDel );
      }
   }
}

static void hb_compRTVariableAdd( HB_COMP_DECL, HB_EXPR_PTR pVar, BOOL bPopInitValue )
{
   HB_RTVAR_PTR pRTvar = ( HB_RTVAR_PTR ) hb_xgrab( sizeof( HB_RTVAR ) );

   pRTvar->pVar = pVar;
   pRTvar->bPopValue = bPopInitValue;
   pRTvar->pNext = NULL;
   pRTvar->pPrev = NULL;

   if( HB_COMP_PARAM->rtvars )
   {
      HB_RTVAR_PTR pLast = HB_COMP_PARAM->rtvars;
      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pRTvar;
      pRTvar->pPrev = pLast;
   }
   else
      HB_COMP_PARAM->rtvars = pRTvar;
}

static void hb_compRTVariableGen( HB_COMP_DECL, char * szCreateFun )
{
   USHORT usCount = 0;
   HB_RTVAR_PTR pVar = HB_COMP_PARAM->rtvars;
   HB_RTVAR_PTR pDel;

   /* generate the function call frame */
   hb_compGenPushSymbol( szCreateFun, TRUE, FALSE, HB_COMP_PARAM );
   hb_compGenPushNil( HB_COMP_PARAM );

   /* push variable names to create */
   while( pVar->pNext )
   {
      hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
      pVar = pVar->pNext;
      ++usCount;
   }
   hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
   ++usCount;

   /* call function that will create either PUBLIC or PRIVATE variables */
   if( usCount > 255 )
      hb_compGenPCode3( HB_P_DO, HB_LOBYTE( usCount ), HB_HIBYTE( usCount ), HB_COMP_PARAM );
   else
      hb_compGenPCode2( HB_P_DOSHORT, ( BYTE ) usCount, HB_COMP_PARAM );

   /* pop initial values */
   while( pVar )
   {
      if( pVar->bPopValue )
         hb_compExprDelete( hb_compExprGenPop( pVar->pVar, HB_COMP_PARAM ), HB_COMP_PARAM );
      else
         hb_compExprDelete( pVar->pVar, HB_COMP_PARAM );
      pDel = pVar;
      pVar = pVar->pPrev;
      hb_xfree( pDel );
   }
   HB_COMP_PARAM->rtvars = NULL;
}

void hb_compRTVariableKill( HB_COMP_DECL )
{
   HB_RTVAR_PTR pVar;
   
   while( HB_COMP_PARAM->rtvars )
   {
      pVar = HB_COMP_PARAM->rtvars;

      hb_compExprDelete( pVar->pVar, HB_COMP_PARAM );
      HB_COMP_PARAM->rtvars = pVar->pPrev;
      hb_xfree( pVar );
   }
   HB_COMP_PARAM->rtvars = NULL;
}

static void hb_compVariableDim( char * szName, HB_EXPR_PTR pInitValue, HB_COMP_DECL )
{
  if( HB_COMP_PARAM->iVarScope == VS_PUBLIC || HB_COMP_PARAM->iVarScope == VS_PRIVATE )
  {
     USHORT uCount = (USHORT) hb_compExprListLen( pInitValue );
     hb_compVariableAdd( HB_COMP_PARAM, szName, 'A' );
     hb_compExprDelete( hb_compExprGenPush( pInitValue, HB_COMP_PARAM ), HB_COMP_PARAM );
     hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( szName, NULL, HB_COMP_PARAM ), TRUE );
  }
  else if( HB_COMP_PARAM->iVarScope == VS_STATIC )
  {
     USHORT uCount = (USHORT) hb_compExprListLen( pInitValue );
     HB_EXPR_PTR pVar = hb_compExprNewVar( szName, HB_COMP_PARAM );
     HB_EXPR_PTR pAssign;

     /* create a static variable */
     hb_compVariableAdd( HB_COMP_PARAM, szName, 'A' );
     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
     /* create an array */
     hb_compExprGenPush( pInitValue, HB_COMP_PARAM );
     hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
     /* check if valid initializers were used but don't generate any code */
     pAssign = hb_compExprAssignStatic( pVar, pInitValue, HB_COMP_PARAM );
     /* now pop an array */
     hb_compExprGenPop( pVar, HB_COMP_PARAM );
     /* delete all used expressions */
     hb_compExprDelete( pAssign, HB_COMP_PARAM );
     hb_compStaticDefEnd( HB_COMP_PARAM );
  }
  else
  {
     USHORT uCount = (USHORT) hb_compExprListLen( pInitValue );

     hb_compVariableAdd( HB_COMP_PARAM, szName, 'A' );
     hb_compExprDelete( hb_compExprGenPush( pInitValue, HB_COMP_PARAM ), HB_COMP_PARAM );
     hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
     hb_compExprDelete( hb_compExprGenPop( hb_compExprNewVar( szName, HB_COMP_PARAM ), HB_COMP_PARAM ), HB_COMP_PARAM );
  }
}

static void hb_compForStart( HB_COMP_DECL, char *szVarName, BOOL bForEach )
{
   HB_ENUMERATOR_PTR pEnumVar;
   
   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar == NULL )
   {
      HB_COMP_PARAM->functions.pLast->pEnum = (HB_ENUMERATOR_PTR) hb_xgrab( sizeof(HB_ENUMERATOR) );
      pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   }
   else
   {
      BOOL bWarn = TRUE;
      HB_ENUMERATOR_PTR pLast = pEnumVar;

      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            /* Enumerator variable exists already - throw warning */
            if( bWarn == TRUE )
            {
               hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_FORVAR_DUPL, szVarName, NULL );
               bWarn = FALSE;
            }
         }
         pLast = pEnumVar;
         pEnumVar = pEnumVar->pNext;
      }
      pLast->pNext = (HB_ENUMERATOR_PTR) hb_xgrab( sizeof( HB_ENUMERATOR ) );
      pEnumVar = pLast->pNext;
   }
   pEnumVar->szName   = szVarName;
   pEnumVar->bForEach = bForEach;
   pEnumVar->pNext    = NULL;
}

BOOL hb_compForEachVarError( HB_COMP_DECL, char *szVarName )
{
   HB_ENUMERATOR_PTR pEnumVar;
   
   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar )
   {
      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            if( pEnumVar->bForEach )
            {
               /* only if it is FOR EACH enumerator 
                * generate warning if it is FOR/NEXT loop
               */
               return FALSE;
            }
         }
         pEnumVar = pEnumVar->pNext;
      }
   }

   hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_ENUM_INVALID, szVarName, NULL );
   return TRUE;            
}

static void hb_compForEnd( HB_COMP_DECL, char *szVar )
{
   HB_ENUMERATOR_PTR pEnumVar;
   
   HB_SYMBOL_UNUSED( HB_COMP_PARAM );
   HB_SYMBOL_UNUSED( szVar );
   
   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar->pNext )
   {
      HB_ENUMERATOR_PTR pLast = pEnumVar;
      
      while( pEnumVar->pNext )
      {
         pLast = pEnumVar;
         pEnumVar = pEnumVar->pNext;
      }
      hb_xfree( pEnumVar );
      pLast->pNext = NULL;
   }
   else
   {
      hb_xfree( pEnumVar );
      HB_COMP_PARAM->functions.pLast->pEnum = NULL;
   }
}

static HB_CARGO2_FUNC( hb_compEnumEvalStart )
{
   char * szName = hb_compExprAsSymbol( (HB_EXPR_PTR)cargo );
   if( szName )
      hb_compForStart( HB_COMP_PARAM, szName, TRUE );

   hb_compExprGenPush( (HB_EXPR_PTR)dummy, HB_COMP_PARAM );  /* expression */
   hb_compExprGenPush( (HB_EXPR_PTR)cargo, HB_COMP_PARAM );  /* variable */
}

static void hb_compEnumStart( HB_COMP_DECL, HB_EXPR_PTR pVars, HB_EXPR_PTR pExprs, int descend )
{
   ULONG ulLen;
   
   if( hb_compExprListLen(pVars) != hb_compExprListLen(pExprs) )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_DIFF, NULL, NULL );
   }

   ulLen = hb_compExprListEval2( HB_COMP_PARAM, pVars, pExprs, hb_compEnumEvalStart );
   
   if( ulLen > 255 )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_TOOMANY, NULL, NULL );
   }
   else
   {
      BYTE Len;
      Len = (BYTE) (ulLen & 0xFF);
      hb_compGenPCode3( HB_P_ENUMSTART, Len, descend > 0 ? 1 : 0, HB_COMP_PARAM );
   }
}

static void hb_compEnumNext( HB_COMP_DECL, HB_EXPR_PTR pExpr, int descend )
{
   HB_SYMBOL_UNUSED( pExpr );
   if( descend > 0 )
   {
      hb_compGenPCode1( HB_P_ENUMNEXT, HB_COMP_PARAM );
   }
   else
   {
      hb_compGenPCode1( HB_P_ENUMPREV, HB_COMP_PARAM );
   }
}

static HB_CARGO_FUNC( hb_compEnumEvalEnd )
{
   char * szName = hb_compExprAsSymbol( (HB_EXPR_PTR)cargo );

   if( szName )
      hb_compForEnd( HB_COMP_PARAM, szName );
}

static void hb_compEnumEnd( HB_COMP_DECL, HB_EXPR_PTR pExpr )
{
   hb_compExprListEval( HB_COMP_PARAM, pExpr, hb_compEnumEvalEnd );
   hb_compGenPCode1( HB_P_ENUMEND, HB_COMP_PARAM );
}

static void hb_compSwitchStart( HB_COMP_DECL )
{
   HB_SWITCHCMD_PTR pSwitch = (HB_SWITCHCMD_PTR) hb_xgrab( sizeof( HB_SWITCHCMD ) );

   pSwitch->pCases = NULL;
   pSwitch->pLast  = NULL;
   pSwitch->ulDefault = 0;
   pSwitch->ulOffset = HB_COMP_PARAM->functions.pLast->lPCodePos;
   pSwitch->iCount = 0;
   pSwitch->pPrev = HB_COMP_PARAM->pSwitch;
   HB_COMP_PARAM->pSwitch = pSwitch;
}

static void hb_compSwitchAdd( HB_COMP_DECL, HB_EXPR_PTR pExpr )
{
   HB_SWITCHCASE_PTR pCase;
   
   if( pExpr )
   {
      /* normal CASE */
      pCase = (HB_SWITCHCASE_PTR) hb_xgrab( sizeof( HB_SWITCHCASE ) );
      pCase->ulOffset = HB_COMP_PARAM->functions.pLast->lPCodePos;
      pCase->pNext = NULL;
      pExpr = hb_compExprReduce( pExpr, HB_COMP_PARAM );
      if( !(hb_compExprIsLong(pExpr) || hb_compExprIsString(pExpr)) )
      {
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_NOT_LITERAL_CASE, NULL, NULL );
      }
      pCase->pExpr = pExpr;

      if( HB_COMP_PARAM->pSwitch->pLast )
      {
         HB_COMP_PARAM->pSwitch->pLast->pNext = pCase;
         HB_COMP_PARAM->pSwitch->pLast = pCase;
      }
      else
      {
         HB_COMP_PARAM->pSwitch->pCases = HB_COMP_PARAM->pSwitch->pLast = pCase;
      }
      HB_COMP_PARAM->pSwitch->iCount++;
      if( hb_compExprIsString( pExpr ) && hb_compExprAsStringLen(pExpr) > 255 )
      {
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INVALID_STR, NULL, NULL );
      }
   }
   else
   {
      /* DEFAULT */
      if( HB_COMP_PARAM->pSwitch->ulDefault )
      {
         /* more than one default clause */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
      }
      else
      {
         HB_COMP_PARAM->pSwitch->ulDefault = HB_COMP_PARAM->functions.pLast->lPCodePos;
         HB_COMP_PARAM->pSwitch->iCount++;
      }
   }
   
}

static void hb_compSwitchEnd( HB_COMP_DECL )
{ 
   BOOL fLongOptimize = HB_COMP_PARAM->fLongOptimize;
   BOOL fTextSubst = HB_COMP_PARAM->fTextSubst;
   HB_SWITCHCASE_PTR pCase = HB_COMP_PARAM->pSwitch->pCases;
   HB_SWITCHCASE_PTR pTmp;
   HB_SWITCHCMD_PTR pTmpSw;
   ULONG ulExitPos;
   ULONG ulDef;

   /* skip switch pcode if there was no EXIT in the last CASE
    * or in the DEFAULT case
   */
   ulExitPos = hb_compGenJump( 0, HB_COMP_PARAM ); 
   
   hb_compGenJumpHere( HB_COMP_PARAM->pSwitch->ulOffset + 1, HB_COMP_PARAM );
   hb_compGenPCode3( HB_P_SWITCH, HB_LOBYTE(HB_COMP_PARAM->pSwitch->iCount), HB_HIBYTE(HB_COMP_PARAM->pSwitch->iCount), HB_COMP_PARAM );
   HB_COMP_PARAM->fLongOptimize = FALSE;   
   HB_COMP_PARAM->fTextSubst = FALSE;
   while( pCase )
   {
      if( pCase->pExpr )
      {
         if( hb_compExprIsLong(pCase->pExpr) || hb_compExprIsString(pCase->pExpr) )
         {
            hb_compExprDelete( hb_compExprGenPush( pCase->pExpr, HB_COMP_PARAM ), HB_COMP_PARAM );
            hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ), pCase->ulOffset, HB_COMP_PARAM );
         }
         else
         {
            hb_compExprDelete( pCase->pExpr, HB_COMP_PARAM );
         }
      }
      pCase = pCase->pNext;
   }
   hb_compGenPCode1( HB_P_PUSHNIL, HB_COMP_PARAM );    /* end of cases */
   ulDef = hb_compGenJump( 0, HB_COMP_PARAM );
   
   if( HB_COMP_PARAM->pSwitch->ulDefault )
   {
      hb_compGenJumpThere( ulDef, HB_COMP_PARAM->pSwitch->ulDefault, HB_COMP_PARAM );
   }
   else
      hb_compGenJumpHere( ulDef, HB_COMP_PARAM );

   HB_COMP_PARAM->fLongOptimize = fLongOptimize;
   HB_COMP_PARAM->fTextSubst = fTextSubst;

   hb_compGenJumpHere( ulExitPos, HB_COMP_PARAM );
   
   pCase = HB_COMP_PARAM->pSwitch->pCases;
   while( pCase )
   {
      pTmp = pCase->pNext;
      hb_xfree( (void *)pCase );
      pCase = pTmp;
   }
   pTmpSw = HB_COMP_PARAM->pSwitch;
   HB_COMP_PARAM->pSwitch = HB_COMP_PARAM->pSwitch->pPrev;
   hb_xfree( pTmpSw );
}

/* Release all switch statements
*/
void hb_compSwitchKill( HB_COMP_DECL )
{
   HB_SWITCHCASE_PTR pCase;
   HB_SWITCHCMD_PTR pSwitch;

   while( HB_COMP_PARAM->pSwitch )
   {
      while( HB_COMP_PARAM->pSwitch->pCases )
      {
         pCase = HB_COMP_PARAM->pSwitch->pCases;
         hb_compExprDelete( pCase->pExpr, HB_COMP_PARAM );
         HB_COMP_PARAM->pSwitch->pCases = pCase->pNext;
         hb_xfree( (void *) pCase );
      }
      pSwitch = HB_COMP_PARAM->pSwitch;
      HB_COMP_PARAM->pSwitch = pSwitch->pPrev;
      hb_xfree( (void *) pSwitch );
   }
}

static HB_EXPR_PTR hb_compCheckPassByRef( HB_COMP_DECL, HB_EXPR_PTR pExpr )
{
   const char * szDesc;

   if( pExpr->ExprType == HB_ET_FUNCALL )
   {
      if( hb_compExprParamListLen( pExpr->value.asFunCall.pParms ) == 0 )
      {
         HB_EXPR_PTR pDelExpr = pExpr;
         if( pExpr->value.asFunCall.pFunName->ExprType == HB_ET_MACRO )
         {
            pExpr = pExpr->value.asFunCall.pFunName;
            hb_compExprClear( pDelExpr, HB_COMP_PARAM );
         }
         else
         {
            pExpr = hb_compExprNewFunRef( hb_compExprAsSymbol( pExpr ), HB_COMP_PARAM );
            hb_compExprDelete( pDelExpr, HB_COMP_PARAM );
         }
         return pExpr;
      }
   }
   else if( HB_COMP_PARAM->iPassByRef & ( HB_PASSBYREF_FUNCALL | HB_PASSBYREF_ARRAY ) )
      return pExpr;

   if( pExpr->ExprType == HB_ET_REFERENCE )
   {
      HB_EXPR_PTR pDelExpr = pExpr;
      pExpr = pExpr->value.asReference;
      hb_compExprClear( pDelExpr, HB_COMP_PARAM );
   }

   szDesc = hb_compExprAsSymbol( pExpr );
   if( ! szDesc )
      szDesc = hb_compExprDescription( pExpr );

   return hb_compErrorRefer( HB_COMP_PARAM, pExpr, szDesc );
}

/* ************************************************************************* */

BOOL hb_compCheckUnclosedStru( HB_COMP_DECL )
{
   BOOL fUnclosed = TRUE;
   
   if( HB_COMP_PARAM->wIfCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "IF", NULL );
      HB_COMP_PARAM->wIfCounter = 0;
   }
   else if( HB_COMP_PARAM->wForCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "FOR", NULL );
      HB_COMP_PARAM->wForCounter = 0;
   }
   else if( HB_COMP_PARAM->wWhileCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WHILE", NULL );
      HB_COMP_PARAM->wWhileCounter = 0;
   }
   else if( HB_COMP_PARAM->wCaseCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "CASE", NULL );
      HB_COMP_PARAM->wCaseCounter = 0;
   }
   else if( HB_COMP_PARAM->wSwitchCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "SWITCH", NULL );
      HB_COMP_PARAM->wSwitchCounter = 0;
   }
   else if( HB_COMP_PARAM->wWithObjectCnt )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WITH OBJECT", NULL );
      HB_COMP_PARAM->wWithObjectCnt = 0;
   }
   else if( HB_COMP_PARAM->wSeqCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "BEGIN SEQUENCE", NULL );
      HB_COMP_PARAM->wSeqCounter = 0;
   }
   else
      fUnclosed = FALSE;

   return fUnclosed;
}

void yyerror( HB_COMP_DECL, char * s )
{
   HB_SYMBOL_UNUSED( pComp );

   if( !HB_COMP_PARAM->pLex->lasttok || HB_COMP_PARAM->pLex->lasttok[ 0 ] == '\n' )
   {
      if( ! hb_pp_eof( HB_COMP_PARAM->pLex->pPP ) )
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INCOMPLETE_STMT, NULL, NULL );
   }
   else
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_YACC, s, HB_COMP_PARAM->pLex->lasttok );
}

