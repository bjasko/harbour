// PRTREE.och oszt ly implement ci¢.
// Gener lva: 1999.06.10, 14:40:20, OBJCCC  v2.2.03
// Meta oszt ly defin¡ci¢: Van


#ifndef CA_OBJECT_N
#ifdef _STRICT_PARENT_
#ifdef _CA_CM_ONLY_
#include "OBJECT.och"
#else // _CA_CM_ONLY_
#define _CA_CM_ONLY_
#include "OBJECT.och"
#undef _CA_CM_ONLY_
#endif // _CA_CM_ONLY_
#else
#include "OBJECT.och"
#endif // _STRICT_PARENT_
#endif // CA_OBJECT_N

#ifndef _CA_CM_ONLY_
#ifndef _PRTREE_OCH_
#define _PRTREE_OCH_




#xtranslate PRTREE.<obj>:oinit            => (OBJGEN.(<obj>):(4))
#xtranslate PRTREE.<obj>:getclass         => (OBJGEN.(<obj>):(5))
#xtranslate PRTREE.<obj>:isclass          => (OBJGEN.(<obj>):(6))
#xtranslate PRTREE.<obj>:getattrib        => (OBJGEN.(<obj>):(7))
#xtranslate PRTREE.<obj>:setattrib        => (OBJGEN.(<obj>):(8))


#xtranslate PRTREE.<obj>:nwords           => <obj>\[CA_OBJECT_N+1\]
#xtranslate PRTREE.<obj>:tree             => <obj>\[CA_OBJECT_N+2\]

// Specifik lva: addword(result,itemArray)
// ™r”k”lve: oinit()

#xtranslate PRTREE.<obj>:addword          => (OBJGEN.(<obj>):(CM_OBJECT_N+1))
// ™r”k”lve: oinit()

#endif // _PRTREE_OCH_
#endif // _CA_CM_ONLY_

#ifndef CA_PRTREE_N
#define CA_PRTREE_N             CA_OBJECT_N+2
#define CM_PRTREE_N             CM_OBJECT_N+1
#endif // CA_PRTREE_N

#ifndef _CA_CM_ONLY_
#ifndef _PRTREECLASS_OCH_
#define _PRTREECLASS_OCH_

**********************************************************************
#xtranslate C.PRTREE:<m> => (PRTREECLASS.clPRTREE():<m>)
#xtranslate C.PRTREE:self() => (clPRTREE())


#xtranslate PRTREECLASS.<obj>:parent           => <obj>\[CA_OBJECT_N+1\]
#xtranslate PRTREECLASS.<obj>:name             => <obj>\[CA_OBJECT_N+2\]
#xtranslate PRTREECLASS.<obj>:objsize          => <obj>\[CA_OBJECT_N+3\]
#xtranslate PRTREECLASS.<obj>:attribs          => <obj>\[CA_OBJECT_N+4\]
#xtranslate PRTREECLASS.<obj>:methods          => <obj>\[CA_OBJECT_N+5\]
#xtranslate PRTREECLASS.<obj>:classid          => <obj>\[CA_OBJECT_N+6\]
#xtranslate PRTREECLASS.<obj>:parentclassids   => <obj>\[CA_OBJECT_N+7\]
#xtranslate PRTREECLASS.<obj>:amblock          => <obj>\[CA_OBJECT_N+8\]
#xtranslate PRTREECLASS.<obj>:methodsblock     => <obj>\[CA_OBJECT_N+9\]
#xtranslate PRTREECLASS.<obj>:objmethodsimplement  => <obj>\[CA_OBJECT_N+10\]


#xtranslate PRTREECLASS.<obj>:oinit            => (OBJGEN.(<obj>):(4))
#xtranslate PRTREECLASS.<obj>:getclass         => (OBJGEN.(<obj>):(5))
#xtranslate PRTREECLASS.<obj>:isclass          => (OBJGEN.(<obj>):(6))
#xtranslate PRTREECLASS.<obj>:getattrib        => (OBJGEN.(<obj>):(7))
#xtranslate PRTREECLASS.<obj>:setattrib        => (OBJGEN.(<obj>):(8))
#xtranslate PRTREECLASS.<obj>:onew             => (OBJGEN.(<obj>):(CM_OBJECT_N+1))
#xtranslate PRTREECLASS.<obj>:ocreate          => (OBJGEN.(<obj>):(CM_OBJECT_N+2))
#xtranslate PRTREECLASS.<obj>:rawoinit         => (OBJGEN.(<obj>):(CM_OBJECT_N+3))
#xtranslate PRTREECLASS.<obj>:oinitclass       => (OBJGEN.(<obj>):(CM_OBJECT_N+4))
#xtranslate PRTREECLASS.<obj>:getmethodsimplement  => (OBJGEN.(<obj>):(CM_OBJECT_N+5))
#xtranslate PRTREECLASS.<obj>:attribidx        => (OBJGEN.(<obj>):(CM_OBJECT_N+6))
#xtranslate PRTREECLASS.<obj>:needclassid      => (OBJGEN.(<obj>):(CM_OBJECT_N+7))
#xtranslate PRTREECLASS.<obj>:isinheritfrom    => (OBJGEN.(<obj>):(CM_OBJECT_N+8))





#endif // _PRTREECLASS_OCH_
#endif // _CA_CM_ONLY_

#ifndef CA_PRTREECLASS_N
#define CA_PRTREECLASS_N             CA_BEHAVIOR_N+0
#define CM_PRTREECLASS_N             CM_BEHAVIOR_N+0
#endif // CA_PRTREECLASS_N


**********************************************************************
#ifdef _PRTREE_PRG_
#ifndef _PRTREE_PRG_OCH_
#define _PRTREE_PRG_OCH_


**********************************************************************
#xtranslate othis:<m> => PRTREE.(othis):<m>
#xtranslate thisclass:<m> => PRTREECLASS.(this:getClass()):<m>
#define CTHIS PRTREE


**********************************************************************
#xtranslate this:<m> => PRTREE.(this):<m>

#xcommand implement addword(result,itemArray) => ;
                    static function addword(this,result,itemArray)
#xcommand implement oinit()        => static function oinit(this)

#ifdef _IMPLEMENT_EXPORT_
#xcommand implement export addword(result,itemArray) => ;
                    function addword(this,result,itemArray)
#xcommand implement export oinit()        => function oinit(this)
#endif // _IMPLEMENT_EXPORT_

#xtranslate super:oinit            => (OBJGENM.(eval(BEHAVIOR.clOBJECT():objmethodsimplement)).(this):(4))
#xtranslate super:getclass         => (OBJGENM.(eval(BEHAVIOR.clOBJECT():objmethodsimplement)).(this):(5))
#xtranslate super:isclass          => (OBJGENM.(eval(BEHAVIOR.clOBJECT():objmethodsimplement)).(this):(6))
#xtranslate super:getattrib        => (OBJGENM.(eval(BEHAVIOR.clOBJECT():objmethodsimplement)).(this):(7))
#xtranslate super:setattrib        => (OBJGENM.(eval(BEHAVIOR.clOBJECT():objmethodsimplement)).(this):(8))

**********************************************************************
static function setCMethods(pOsztaly)
// Egy t”mb”t felt”lt az oszt ly m–veleti blokkjaival.
   pOsztaly[(CM_OBJECT_N+1)]:={|this,result,itemArray| addword(this,result,itemArray)}
   pOsztaly[(4)]:={|this| oinit(this)}
return pOsztaly

**********************************************************************
static function setCams(ta,tm)
// Egy t”mb”t felt”lt az oszt ly  ltal def. objektumok attrib£tumaival ‚s m–veleteivel.
   ta[CA_OBJECT_N+1-CA_NIL_N] := {CA_OBJECT_N+1,'nwords', }
   ta[CA_OBJECT_N+2-CA_NIL_N] := {CA_OBJECT_N+2,'tree', }

   tm[(CM_OBJECT_N+1)-CM_NIL_N] := {(CM_OBJECT_N+1),'addword','result,itemArray',nil}
   tm[(4)-CM_NIL_N] := {(4),'oinit','',nil}
return nil

#ifndef _NO_CLPRTREE_
#ifdef _STRICT_PARENT_
#ifdef _CA_CM_ONLY_
#include "meta.och"
#else // _CA_CM_ONLY_
#define _CA_CM_ONLY_
#include "meta.och"
#undef _CA_CM_ONLY_
#endif // _CA_CM_ONLY_
#else
#include "meta.och"
#endif // _STRICT_PARENT_
**********************************************************************
function clPRTREE()
// El“szedi az oszt lyt. (class)
static osztaly
   if (osztaly==nil)
      osztaly:=META.mcPRTREECLASS():onew(;
                  clOBJECT(),;
                  "PRTREE",;
                  CA_PRTREE_N,;
                  CM_PRTREE_N,;
                  {|ta,tm|setCams(ta,tm)},;
                  {|t|setCMethods(t)})
   endif
return osztaly
#endif // _NO_CLPRTREE_

#ifndef _NO_PRTREECLASS_

**********************************************************************
#xtranslate class:<m> => PRTREECLASS.(class):<m>


#ifdef _IMPLEMENT_EXPORT_
#endif // _IMPLEMENT_EXPORT_

#xtranslate superclass:oinit            => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(4))
#xtranslate superclass:getclass         => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(5))
#xtranslate superclass:isclass          => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(6))
#xtranslate superclass:getattrib        => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(7))
#xtranslate superclass:setattrib        => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(8))
#xtranslate superclass:onew             => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+1))
#xtranslate superclass:ocreate          => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+2))
#xtranslate superclass:rawoinit         => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+3))
#xtranslate superclass:oinitclass       => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+4))
#xtranslate superclass:getmethodsimplement  => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+5))
#xtranslate superclass:attribidx        => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+6))
#xtranslate superclass:needclassid      => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+7))
#xtranslate superclass:isinheritfrom    => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+8))

**********************************************************************
static function setMCMethods(pOsztaly)
// Egy t”mb”t felt”lt a metaoszt ly m–veleti blokkjaival.
return pOsztaly

**********************************************************************
static function setMCams(ta,tm)
// Egy t”mb”t felt”lt a metaoszt ly  ltal def. objektumok attrib£tumaival ‚s m–veleteivel.

return nil

**********************************************************************
#ifndef _NO_MCPRTREECLASS_
#ifdef _STRICT_PARENT_
#ifdef _CA_CM_ONLY_
#include "meta.och" // "metaclas.och" 
#else // _CA_CM_ONLY_
#define _CA_CM_ONLY_
#include "meta.och" // "metaclas.och" 
#undef _CA_CM_ONLY_
#endif // _CA_CM_ONLY_
#else
#include "meta.och" // "metaclas.och" 
#endif // _STRICT_PARENT_
function mcPRTREECLASS()
// El“szedi az oszt ly metaoszt ly t. (metaclass)
static metaOsztaly
   if (metaOsztaly==nil)
      metaOsztaly:=META.clMETA():onew(;
                  clBEHAVIOR(),;
                  "PRTREECLASS",;
                  CA_PRTREECLASS_N,;
                  CM_PRTREECLASS_N,;
                  {|ta,tm|setMCams(ta,tm)},;
                  {|t|setMCMethods(t)})
   endif
return metaOsztaly
#endif // _NO_MCPRTREECLASS_

#endif // _NO_PRTREECLASS_

**********************************************************************
#ifdef _IMPLEMENT_OINIT_
implement oinit()
    super:oinit()
return this
#endif // _IMPLEMENT_OINIT_

**********************************************************************
**********************************************************************
#endif // _PRTREE_PRG_OCH_
#endif // _PRTREE_PRG_
