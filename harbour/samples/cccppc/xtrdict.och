// XTRDICT.och oszt ly implement ci¢.
// Gener lva: 1999.06.10, 14:39:58, OBJCCC  v2.2.03
// Meta oszt ly defin¡ci¢: Van


#ifndef CA_OBJECT_N
#ifdef _STRICT_PARENT_
#ifdef _CA_CM_ONLY_
#include "OBJECT.och"
#else // _CA_CM_ONLY_
#define _CA_CM_ONLY_
#include "OBJECT.och"
#undef _CA_CM_ONLY_
#endif // _CA_CM_ONLY_
#else
#include "OBJECT.och"
#endif // _STRICT_PARENT_
#endif // CA_OBJECT_N

#ifndef _CA_CM_ONLY_
#ifndef _XTRDICT_OCH_
#define _XTRDICT_OCH_




#xtranslate XTRDICT.<obj>:oinit            => (OBJGEN.(<obj>):(4))
#xtranslate XTRDICT.<obj>:getclass         => (OBJGEN.(<obj>):(5))
#xtranslate XTRDICT.<obj>:isclass          => (OBJGEN.(<obj>):(6))
#xtranslate XTRDICT.<obj>:getattrib        => (OBJGEN.(<obj>):(7))
#xtranslate XTRDICT.<obj>:setattrib        => (OBJGEN.(<obj>):(8))


#xtranslate XTRDICT.<obj>:cmdict           => <obj>\[CA_OBJECT_N+1\]
#xtranslate XTRDICT.<obj>:trdict           => <obj>\[CA_OBJECT_N+2\]
#xtranslate XTRDICT.<obj>:cmdicttree       => <obj>\[CA_OBJECT_N+3\]
#xtranslate XTRDICT.<obj>:trdicttree       => <obj>\[CA_OBJECT_N+4\]

// Specifik lva: add(extrdict)
// Specifik lva: printstr(printBlock,xcmd)
// ™r”k”lve: oinit()
// Specifik lva: getextrlist(item,xcmd)

#xtranslate XTRDICT.<obj>:add              => (OBJGEN.(<obj>):(CM_OBJECT_N+1))
#xtranslate XTRDICT.<obj>:printstr         => (OBJGEN.(<obj>):(CM_OBJECT_N+2))
// ™r”k”lve: oinit()
#xtranslate XTRDICT.<obj>:getextrlist      => (OBJGEN.(<obj>):(CM_OBJECT_N+3))

#endif // _XTRDICT_OCH_
#endif // _CA_CM_ONLY_

#ifndef CA_XTRDICT_N
#define CA_XTRDICT_N             CA_OBJECT_N+4
#define CM_XTRDICT_N             CM_OBJECT_N+3
#endif // CA_XTRDICT_N

#ifndef _CA_CM_ONLY_
#ifndef _XTRDICTCLASS_OCH_
#define _XTRDICTCLASS_OCH_

**********************************************************************
#xtranslate C.XTRDICT:<m> => (XTRDICTCLASS.clXTRDICT():<m>)
#xtranslate C.XTRDICT:self() => (clXTRDICT())


#xtranslate XTRDICTCLASS.<obj>:parent           => <obj>\[CA_OBJECT_N+1\]
#xtranslate XTRDICTCLASS.<obj>:name             => <obj>\[CA_OBJECT_N+2\]
#xtranslate XTRDICTCLASS.<obj>:objsize          => <obj>\[CA_OBJECT_N+3\]
#xtranslate XTRDICTCLASS.<obj>:attribs          => <obj>\[CA_OBJECT_N+4\]
#xtranslate XTRDICTCLASS.<obj>:methods          => <obj>\[CA_OBJECT_N+5\]
#xtranslate XTRDICTCLASS.<obj>:classid          => <obj>\[CA_OBJECT_N+6\]
#xtranslate XTRDICTCLASS.<obj>:parentclassids   => <obj>\[CA_OBJECT_N+7\]
#xtranslate XTRDICTCLASS.<obj>:amblock          => <obj>\[CA_OBJECT_N+8\]
#xtranslate XTRDICTCLASS.<obj>:methodsblock     => <obj>\[CA_OBJECT_N+9\]
#xtranslate XTRDICTCLASS.<obj>:objmethodsimplement  => <obj>\[CA_OBJECT_N+10\]


#xtranslate XTRDICTCLASS.<obj>:oinit            => (OBJGEN.(<obj>):(4))
#xtranslate XTRDICTCLASS.<obj>:getclass         => (OBJGEN.(<obj>):(5))
#xtranslate XTRDICTCLASS.<obj>:isclass          => (OBJGEN.(<obj>):(6))
#xtranslate XTRDICTCLASS.<obj>:getattrib        => (OBJGEN.(<obj>):(7))
#xtranslate XTRDICTCLASS.<obj>:setattrib        => (OBJGEN.(<obj>):(8))
#xtranslate XTRDICTCLASS.<obj>:onew             => (OBJGEN.(<obj>):(CM_OBJECT_N+1))
#xtranslate XTRDICTCLASS.<obj>:ocreate          => (OBJGEN.(<obj>):(CM_OBJECT_N+2))
#xtranslate XTRDICTCLASS.<obj>:rawoinit         => (OBJGEN.(<obj>):(CM_OBJECT_N+3))
#xtranslate XTRDICTCLASS.<obj>:oinitclass       => (OBJGEN.(<obj>):(CM_OBJECT_N+4))
#xtranslate XTRDICTCLASS.<obj>:getmethodsimplement  => (OBJGEN.(<obj>):(CM_OBJECT_N+5))
#xtranslate XTRDICTCLASS.<obj>:attribidx        => (OBJGEN.(<obj>):(CM_OBJECT_N+6))
#xtranslate XTRDICTCLASS.<obj>:needclassid      => (OBJGEN.(<obj>):(CM_OBJECT_N+7))
#xtranslate XTRDICTCLASS.<obj>:isinheritfrom    => (OBJGEN.(<obj>):(CM_OBJECT_N+8))





#endif // _XTRDICTCLASS_OCH_
#endif // _CA_CM_ONLY_

#ifndef CA_XTRDICTCLASS_N
#define CA_XTRDICTCLASS_N             CA_BEHAVIOR_N+0
#define CM_XTRDICTCLASS_N             CM_BEHAVIOR_N+0
#endif // CA_XTRDICTCLASS_N


**********************************************************************
#ifdef _XTRDICT_PRG_
#ifndef _XTRDICT_PRG_OCH_
#define _XTRDICT_PRG_OCH_


**********************************************************************
#xtranslate othis:<m> => XTRDICT.(othis):<m>
#xtranslate thisclass:<m> => XTRDICTCLASS.(this:getClass()):<m>
#define CTHIS XTRDICT


**********************************************************************
#xtranslate this:<m> => XTRDICT.(this):<m>

#xcommand implement add(extrdict)  => static function add(this,extrdict)
#xcommand implement printstr(printBlock,xcmd) => ;
                    static function printstr(this,printBlock,xcmd)
#xcommand implement oinit()        => static function oinit(this)
#xcommand implement getextrlist(item,xcmd) => ;
                    static function getextrlist(this,item,xcmd)

#ifdef _IMPLEMENT_EXPORT_
#xcommand implement export add(extrdict)  => function add(this,extrdict)
#xcommand implement export printstr(printBlock,xcmd) => ;
                    function printstr(this,printBlock,xcmd)
#xcommand implement export oinit()        => function oinit(this)
#xcommand implement export getextrlist(item,xcmd) => ;
                    function getextrlist(this,item,xcmd)
#endif // _IMPLEMENT_EXPORT_

#xtranslate super:oinit            => (OBJGENM.(eval(BEHAVIOR.clOBJECT():objmethodsimplement)).(this):(4))
#xtranslate super:getclass         => (OBJGENM.(eval(BEHAVIOR.clOBJECT():objmethodsimplement)).(this):(5))
#xtranslate super:isclass          => (OBJGENM.(eval(BEHAVIOR.clOBJECT():objmethodsimplement)).(this):(6))
#xtranslate super:getattrib        => (OBJGENM.(eval(BEHAVIOR.clOBJECT():objmethodsimplement)).(this):(7))
#xtranslate super:setattrib        => (OBJGENM.(eval(BEHAVIOR.clOBJECT():objmethodsimplement)).(this):(8))

**********************************************************************
static function setCMethods(pOsztaly)
// Egy t”mb”t felt”lt az oszt ly m–veleti blokkjaival.
   pOsztaly[(CM_OBJECT_N+1)]:={|this,extrdict| add(this,extrdict)}
   pOsztaly[(CM_OBJECT_N+2)]:={|this,printBlock,xcmd| printstr(this,printBlock,xcmd)}
   pOsztaly[(4)]:={|this| oinit(this)}
   pOsztaly[(CM_OBJECT_N+3)]:={|this,item,xcmd| getextrlist(this,item,xcmd)}
return pOsztaly

**********************************************************************
static function setCams(ta,tm)
// Egy t”mb”t felt”lt az oszt ly  ltal def. objektumok attrib£tumaival ‚s m–veleteivel.
   ta[CA_OBJECT_N+1-CA_NIL_N] := {CA_OBJECT_N+1,'cmdict', }
   ta[CA_OBJECT_N+2-CA_NIL_N] := {CA_OBJECT_N+2,'trdict', }
   ta[CA_OBJECT_N+3-CA_NIL_N] := {CA_OBJECT_N+3,'cmdicttree', }
   ta[CA_OBJECT_N+4-CA_NIL_N] := {CA_OBJECT_N+4,'trdicttree', }

   tm[(CM_OBJECT_N+1)-CM_NIL_N] := {(CM_OBJECT_N+1),'add','extrdict',nil}
   tm[(CM_OBJECT_N+2)-CM_NIL_N] := {(CM_OBJECT_N+2),'printstr','printBlock,xcmd',nil}
   tm[(4)-CM_NIL_N] := {(4),'oinit','',nil}
   tm[(CM_OBJECT_N+3)-CM_NIL_N] := {(CM_OBJECT_N+3),'getextrlist','item,xcmd',nil}
return nil

#ifndef _NO_CLXTRDICT_
#ifdef _STRICT_PARENT_
#ifdef _CA_CM_ONLY_
#include "meta.och"
#else // _CA_CM_ONLY_
#define _CA_CM_ONLY_
#include "meta.och"
#undef _CA_CM_ONLY_
#endif // _CA_CM_ONLY_
#else
#include "meta.och"
#endif // _STRICT_PARENT_
**********************************************************************
function clXTRDICT()
// El“szedi az oszt lyt. (class)
static osztaly
   if (osztaly==nil)
      osztaly:=META.mcXTRDICTCLASS():onew(;
                  clOBJECT(),;
                  "XTRDICT",;
                  CA_XTRDICT_N,;
                  CM_XTRDICT_N,;
                  {|ta,tm|setCams(ta,tm)},;
                  {|t|setCMethods(t)})
   endif
return osztaly
#endif // _NO_CLXTRDICT_

#ifndef _NO_XTRDICTCLASS_

**********************************************************************
#xtranslate class:<m> => XTRDICTCLASS.(class):<m>


#ifdef _IMPLEMENT_EXPORT_
#endif // _IMPLEMENT_EXPORT_

#xtranslate superclass:oinit            => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(4))
#xtranslate superclass:getclass         => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(5))
#xtranslate superclass:isclass          => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(6))
#xtranslate superclass:getattrib        => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(7))
#xtranslate superclass:setattrib        => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(8))
#xtranslate superclass:onew             => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+1))
#xtranslate superclass:ocreate          => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+2))
#xtranslate superclass:rawoinit         => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+3))
#xtranslate superclass:oinitclass       => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+4))
#xtranslate superclass:getmethodsimplement  => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+5))
#xtranslate superclass:attribidx        => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+6))
#xtranslate superclass:needclassid      => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+7))
#xtranslate superclass:isinheritfrom    => (OBJGENM.(eval(BEHAVIOR.clBEHAVIOR():objmethodsimplement)).(class):(CM_OBJECT_N+8))

**********************************************************************
static function setMCMethods(pOsztaly)
// Egy t”mb”t felt”lt a metaoszt ly m–veleti blokkjaival.
return pOsztaly

**********************************************************************
static function setMCams(ta,tm)
// Egy t”mb”t felt”lt a metaoszt ly  ltal def. objektumok attrib£tumaival ‚s m–veleteivel.

return nil

**********************************************************************
#ifndef _NO_MCXTRDICTCLASS_
#ifdef _STRICT_PARENT_
#ifdef _CA_CM_ONLY_
#include "meta.och" // "metaclas.och" 
#else // _CA_CM_ONLY_
#define _CA_CM_ONLY_
#include "meta.och" // "metaclas.och" 
#undef _CA_CM_ONLY_
#endif // _CA_CM_ONLY_
#else
#include "meta.och" // "metaclas.och" 
#endif // _STRICT_PARENT_
function mcXTRDICTCLASS()
// El“szedi az oszt ly metaoszt ly t. (metaclass)
static metaOsztaly
   if (metaOsztaly==nil)
      metaOsztaly:=META.clMETA():onew(;
                  clBEHAVIOR(),;
                  "XTRDICTCLASS",;
                  CA_XTRDICTCLASS_N,;
                  CM_XTRDICTCLASS_N,;
                  {|ta,tm|setMCams(ta,tm)},;
                  {|t|setMCMethods(t)})
   endif
return metaOsztaly
#endif // _NO_MCXTRDICTCLASS_

#endif // _NO_XTRDICTCLASS_

**********************************************************************
#ifdef _IMPLEMENT_OINIT_
implement oinit()
    super:oinit()
return this
#endif // _IMPLEMENT_OINIT_

**********************************************************************
**********************************************************************
#endif // _XTRDICT_PRG_OCH_
#endif // _XTRDICT_PRG_
