/*
 * $Id$
 */

/*
 * The following parts are Copyright of the individual authors.
 * www - http://www.harbour-project.org
 *
 * Copyright 2000 Chen Kedem <niki@actcom.co.il>
 *    Documentation for: TONE()
 *
 * See doc/license.txt for licensing terms.
 *
 */

/*  $DOC$
 *  $FUNCNAME$
 *      OS()
 * $ONELINER$
 *      Return the current  operating system
 *  $SYNTAX$
 *      OS()   -> <cOperatinSystem>
 *  $CATEGORY$
 *      DOS
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *     <cOperatinSystem>  -> The Current operating system
 *  $DESCRIPTION$
 *      This function will return the current operating system
 *  $EXAMPLES$
 *      ? OS()
 *
 *  $FILES$
 *      source/rtl/environ.c
 *  $SEEALSO$
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      VERSION()
 *  $CATEGORY$
 *      Environment
 *  $ONELINER$
 *      Returns the HARBOUR Version or the Harbour/Compiler Version
 *  $SYNTAX$
 *      VERSION([<xMode>]  --> <cReturn>
 *  $ARGUMENTS$
 *      [<xMode>]   Optional Parameter that enables the display
 *      of the C compiler version that HARBOUR was built with.
 *  $RETURNS$
 *      <cReturn>   String contining the Harbour Version or the Harbour
 *      and C compiler Version when the <nMode> parameter is used.
 *  $DESCRIPTION$
 *      This function returns the HARBOUR Version or the Harbour Version+C
 *      compiler Version used to create the Harbour runtime library
 *  $EXAMPLES$
 *     ? QOUT(VERSION())    // Displays Harbour version only
 *     ? QOUT(VERSION(NIL)) // Displays Harbour and C Compiler versions
 *  $TESTS$
 *
 *  $STATUS$
 *     S
 *  $COMPLIANCE$
 *     This function is an enhanced version of the CA-Clipper VERSION function.
 *     The CA-Clipper version does not have a parameter and it only returns
 *     the Version of the CA-Clipper Compiler. The Harbour version returns
 *     only the Harbour Version if called without the <nMode> parameter, but
 *     returns both the Harbour Version and the Version of the C compiler used
 *     to build Harbour when the <nMode> parameter is present.
 *  $PLATFORMS$
 *
 *  $FILES$
 *    source/rtl/environ.c
 *  $SEEALSO$
 *    OS()
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *     GETENV()
 *  $CATEGORY$
 *      Environment
 *  $ONELINER$
 *      Obtains DOS system environmental settings
 *  $SYNTAX$
 *      GETENV(<cEnviroment>, <cDefaultValue> )  --> <cReturn>
 *  $ARGUMENTS$
 *      <cEnviroment> Enviromental variable to obtain
 *      <cDefaultValue> Optional value to return if <cEnvironment> is not found
 *  $RETURNS$
 *      <cReturn>     Value of the Variable
 *  $DESCRIPTION$
 *      This function yields a string that is the value of the
 *      environmental variable <cEnviroment>, witch is stored at the
 *      level with the Set command. If no environmental variable
 *      can be found, the value of the function will be a empty string.
 *  $EXAMPLES$
 *      ? QOUT(GETENV('PATH'))
 *      ? QOUT(GETENV('CONFIG'))
 *      ? QOUT(GETENV('HARBOURCMD', '-n -l -es2'))
 *  $TESTS$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      This functions is CA-CLIPPER compliant
 *  $PLATFORMS$
 *
 *  $FILES$
 *     source/rtl/environ.c
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      __RUN()
 *  $CATEGORY$
 *      DOS
 *  $ONELINER$
 *      Run a external program
 *  $SYNTAX$
 *      __RUN( <cCommand> )
 *  $CATEGORY$
 *      DOS
 *  $ARGUMENTS$
 *      <cCommand> Command to execute
 *  $DESCRIPTION$
 *      This command runs an external program. Please make sure that you have
 *      enough free memory to be able to run the external program.
 *      Do not use it to run Terminate and Stay Resident programs
 *      (in case of DOS) since it cause several problems
 *
 *      Note: This function is what the RUN command preprocesses into.
 *            It is considered bad form to use this function directly.
 *            Use the RUN command instead.
 *  $EXAMPLES$
 *      __Run( "edit " + cMyTextFile )    // Runs an external editor
 *      __Run( "command" )                // Gives a DOS shell (DOS only)
 *  $FILES$
 *      source/rtl/environ.c
 *  $SEEALSO$
 *      RUN
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      TONE()
 *  $CATEGORY$
 *      Misc
 *  $ONELINER$
 *      Sound a tone with a specifies frequency and duration
 *  $SYNTAX$
 *      TONE( <nFrequency>, <nDuration> ) --> NIL
 *  $ARGUMENTS$
 *      <nFrequency> is a non-negative numeric value that specifies the
 *      frequency of the tone in hertz.
 *      <nDuration> is a positive numeric value which specifies the duration
 *      of the tone in 1/18 of a second units.
 *  $RETURNS$
 *      TONE() always return NIL.
 *  $DESCRIPTION$
 *      TONE() is a sound function that could be used to irritate the end
 *      user, his or her dog, and the surrounding neighborhood. The frequency
 *      is clamped to the range 0 to 32767 Hz.
 *  $EXAMPLES$
 *      If lOk   // Good Sound
 *         TONE(  500, 1 )
 *         TONE( 4000, 1 )
 *         TONE( 2500, 1 )
 *      Else     // Bad Sound
 *         TONE(  300, 1 )
 *         TONE(  499, 5 )
 *         TONE(  700, 5 )
 *      EndIf
 *  $TESTS$
 *      TONE( 800, 1 )                         // same as ? CHR(7)
 *      TONE( 32000, 200 )                     // any dogs around yet?
 *      TONE( 130.80, 1 )                      // musical note - C
 *      TONE( 400, 0 )                         // short beep
 *      TONE( 700 )                            // short beep
 *      TONE( 10, 18.2 )                       // 1 second delay
 *      TONE( -1 )                             // 1/18.2 second delay
 *      TONE( )                                // 1/18.2 second delay
 *  $STATUS$
 *      S
 *  $COMPLIANCE$
 *      TONE() works exactly like CA-Clipper's TONE().
 *  $SEEALSO$
 *      CHR(),SET BELL
 *  $END$
 */
